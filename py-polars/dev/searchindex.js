Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 97, 115, 124, 127, 128, 228, 246, 260, 572, 652, 677, 954], "refer": [0, 29, 99, 100, 103, 133, 246, 409, 436, 495, 572, 852, 916, 954], "input": [0, 60, 89, 99, 100, 103, 128, 129, 140, 151, 179, 193, 199, 213, 223, 226, 246, 253, 260, 365, 383, 403, 416, 429, 466, 518, 521, 523, 525, 526, 527, 528, 539, 540, 548, 549, 552, 561, 572, 583, 586, 596, 603, 628, 635, 640, 646, 650, 668, 677, 807, 830, 831, 833, 954], "output": [0, 25, 27, 29, 30, 31, 32, 70, 103, 119, 128, 152, 153, 164, 174, 181, 190, 193, 219, 223, 246, 255, 260, 407, 408, 415, 515, 521, 529, 548, 559, 572, 583, 604, 605, 614, 618, 619, 628, 646, 649, 652, 668, 677, 943, 954], "seri": [0, 1, 22, 61, 62, 63, 64, 65, 68, 69, 70, 86, 88, 91, 93, 97, 118, 119, 121, 124, 128, 136, 144, 146, 148, 149, 154, 157, 158, 160, 162, 170, 171, 175, 186, 187, 201, 205, 208, 211, 212, 227, 246, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 279, 282, 283, 290, 291, 294, 295, 296, 299, 306, 307, 311, 312, 324, 326, 330, 333, 337, 339, 341, 344, 348, 349, 351, 355, 358, 367, 368, 374, 381, 383, 385, 386, 387, 388, 389, 391, 392, 393, 405, 407, 432, 436, 437, 438, 439, 440, 442, 454, 455, 458, 461, 462, 469, 484, 489, 495, 499, 505, 506, 507, 508, 514, 521, 522, 524, 530, 532, 533, 534, 540, 541, 543, 545, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 563, 564, 572, 583, 600, 646, 651, 668, 948, 950, 953, 955, 958, 959, 960], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 244, 245, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 583, 590, 592, 596, 597, 600, 601, 604, 605, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 626, 628, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 676, 677, 696, 714, 724, 739, 740, 804, 850, 897, 900, 912, 913, 923, 932, 933, 943, 954], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 110, 111, 112, 113, 114, 115, 117, 121, 168, 180, 246, 296, 371, 572, 583, 667, 961], "express": [0, 65, 67, 70, 119, 121, 122, 128, 129, 140, 142, 144, 151, 177, 181, 189, 193, 199, 213, 223, 226, 228, 246, 253, 255, 256, 257, 259, 260, 270, 276, 278, 296, 308, 309, 310, 313, 319, 321, 325, 345, 361, 365, 368, 371, 375, 377, 378, 381, 383, 387, 390, 395, 398, 399, 405, 406, 407, 408, 409, 413, 414, 415, 416, 420, 422, 426, 428, 429, 431, 432, 433, 434, 439, 453, 454, 455, 457, 459, 464, 466, 470, 478, 479, 495, 501, 502, 505, 511, 512, 514, 517, 518, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 548, 549, 552, 554, 556, 557, 558, 559, 561, 562, 565, 571, 583, 586, 590, 595, 596, 597, 600, 603, 622, 628, 630, 631, 632, 633, 635, 640, 646, 647, 650, 652, 668, 677, 694, 696, 728, 729, 730, 738, 747, 771, 794, 807, 870, 877, 891, 899, 900, 954], "extend": [0, 89, 246, 368, 572, 583, 676, 794, 954], "function": [0, 29, 61, 62, 63, 64, 69, 87, 93, 99, 100, 103, 110, 120, 128, 133, 139, 146, 173, 180, 181, 210, 214, 217, 218, 228, 246, 256, 260, 296, 319, 349, 362, 363, 364, 407, 408, 429, 431, 442, 443, 444, 445, 446, 447, 449, 450, 451, 463, 509, 519, 520, 521, 532, 533, 540, 541, 543, 548, 556, 572, 583, 614, 618, 621, 643, 652, 668, 677, 714, 738, 775, 788, 789, 790, 791, 804, 850, 858, 872, 873, 879, 884, 937, 954], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 51, 60, 61, 63, 68, 71, 76, 77, 81, 83, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 127, 128, 130, 131, 141, 150, 151, 152, 164, 165, 166, 168, 179, 180, 184, 189, 190, 197, 204, 209, 210, 223, 225, 244, 246, 257, 260, 297, 305, 324, 350, 358, 361, 377, 378, 382, 389, 391, 398, 406, 426, 428, 436, 452, 453, 463, 495, 509, 511, 512, 518, 526, 547, 559, 572, 583, 588, 589, 597, 603, 604, 621, 632, 633, 646, 668, 676, 677, 715, 722, 727, 731, 744, 746, 784, 804, 852, 868, 869, 879, 884, 916, 935, 936, 937, 938, 940, 945, 953, 954], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 76, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 124, 128, 146, 150, 152, 153, 154, 165, 204, 209, 210, 212, 215, 246, 260, 283, 296, 305, 306, 308, 309, 310, 326, 330, 333, 337, 339, 341, 344, 348, 351, 365, 379, 385, 387, 388, 409, 439, 490, 491, 492, 495, 509, 521, 526, 535, 536, 537, 539, 540, 547, 572, 583, 590, 595, 597, 604, 605, 622, 631, 632, 633, 641, 668, 701, 714, 722, 724, 728, 729, 730, 748, 752, 755, 762, 764, 767, 770, 774, 777, 802, 879, 911, 912, 913, 935, 936, 938, 946, 954], "config": [0, 60, 193, 223, 246, 583, 628, 646, 668], "except": [0, 155, 167, 169, 202, 246, 539, 583, 610, 668, 803, 828, 925, 936, 945, 954], "test": [0, 103, 583, 606, 613, 668], "util": [0, 543, 583, 597, 668], "sql": [0, 28, 48, 101, 166, 246, 583], "These": [1, 29, 125, 246, 355, 571, 781], "allow": [1, 29, 51, 76, 87, 110, 112, 113, 114, 115, 121, 122, 127, 164, 167, 168, 189, 190, 191, 210, 215, 225, 246, 345, 438, 453, 495, 572, 609, 610, 614, 618, 632, 633, 641, 647, 668, 771, 854, 869, 871, 916, 937, 954], "you": [1, 12, 29, 33, 60, 86, 88, 89, 90, 92, 97, 99, 100, 103, 104, 108, 110, 117, 124, 128, 137, 141, 164, 167, 177, 189, 190, 206, 209, 214, 228, 246, 260, 278, 308, 309, 310, 371, 383, 407, 409, 438, 443, 444, 445, 446, 447, 449, 450, 451, 480, 483, 495, 522, 532, 541, 572, 590, 593, 606, 610, 613, 631, 633, 652, 668, 676, 677, 696, 728, 729, 730, 807, 854, 901, 904, 916, 936, 945, 954], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 228, 246, 260, 296, 407, 442, 521, 548, 572, 614, 652, 668, 677, 714, 858, 954], "dedic": [1, 87, 164, 190, 246], "namespac": [1, 245, 571, 583, 667], "underli": [1, 72, 79, 86, 88, 89, 90, 92, 108, 121, 122, 141, 164, 165, 190, 204, 246, 300, 324, 325, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 348, 350, 356, 357, 358, 359, 438, 452, 470, 472, 572, 668, 676, 717, 746, 747, 751, 754, 756, 757, 761, 763, 766, 768, 769, 772, 773, 774, 776, 782, 783, 784, 785, 854, 868, 879, 891, 893, 931, 936, 954], "polar": [1, 246, 571, 572, 577, 583, 668, 954, 961, 962], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 91, 119, 120, 209, 210, 246, 572, 577, 583, 668, 935, 936, 954, 961], "without": [1, 5, 69, 93, 102, 105, 109, 111, 115, 217, 218, 246, 260, 319, 349, 443, 444, 445, 446, 447, 449, 450, 451, 558, 572, 643, 668, 738, 744, 775, 804, 850, 954], "requir": [1, 29, 33, 91, 117, 118, 133, 189, 210, 246, 297, 362, 363, 364, 458, 495, 512, 572, 633, 668, 715, 789, 790, 791, 878, 916, 936, 937, 940, 954], "subclass": [1, 246], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 140, 142, 144, 166, 167, 177, 181, 189, 193, 223, 246, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 572, 573, 574, 577, 578, 579, 580, 596, 598, 600, 609, 610, 623, 628, 630, 646, 668, 694, 696, 738, 747, 795, 877, 891, 895, 914, 926, 954], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 71, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 121, 125, 127, 128, 129, 133, 137, 139, 142, 146, 151, 152, 153, 164, 167, 168, 173, 174, 179, 189, 190, 193, 199, 205, 210, 213, 218, 219, 223, 226, 246, 256, 296, 315, 317, 318, 322, 323, 349, 355, 360, 362, 363, 364, 383, 385, 387, 388, 389, 391, 392, 393, 396, 409, 429, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 463, 465, 466, 480, 483, 484, 503, 522, 523, 525, 527, 528, 529, 549, 552, 559, 561, 565, 566, 568, 571, 572, 573, 574, 577, 578, 579, 580, 583, 586, 593, 598, 603, 604, 605, 606, 610, 613, 614, 618, 619, 622, 625, 628, 632, 633, 635, 640, 643, 646, 647, 650, 668, 674, 676, 714, 736, 737, 775, 781, 787, 788, 789, 790, 791, 801, 807, 811, 814, 815, 816, 817, 818, 819, 826, 852, 856, 858, 864, 881, 884, 901, 904, 905, 924, 936, 937, 945, 948, 950, 954, 955, 958, 959, 960], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 86, 89, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 122, 137, 143, 155, 160, 162, 164, 165, 168, 169, 173, 176, 177, 184, 189, 190, 198, 202, 207, 215, 217, 219, 246, 257, 258, 259, 278, 283, 293, 296, 298, 313, 319, 323, 365, 376, 379, 382, 385, 388, 392, 393, 395, 399, 401, 407, 408, 421, 427, 433, 436, 441, 458, 464, 466, 471, 477, 479, 482, 485, 486, 488, 494, 502, 515, 526, 539, 541, 556, 561, 565, 572, 577, 583, 590, 593, 595, 597, 599, 614, 618, 622, 631, 634, 641, 647, 668, 696, 701, 711, 714, 738, 744, 803, 809, 823, 828, 852, 885, 892, 898, 900, 903, 906, 907, 909, 915, 925, 954], "support": [1, 29, 33, 68, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 111, 119, 122, 125, 127, 164, 165, 190, 198, 199, 206, 210, 246, 291, 429, 464, 466, 489, 526, 572, 577, 634, 635, 668, 709, 885, 910, 937, 954], "target": [1, 29, 66, 246, 476, 495, 897, 916], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 133, 137, 138, 139, 141, 146, 151, 152, 153, 154, 158, 160, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 189, 190, 191, 193, 196, 198, 200, 201, 204, 206, 209, 210, 214, 215, 217, 218, 219, 220, 221, 223, 224, 228, 245, 246, 256, 259, 260, 269, 278, 279, 283, 292, 296, 297, 304, 306, 313, 319, 324, 335, 345, 348, 349, 358, 367, 381, 382, 383, 387, 399, 404, 405, 407, 413, 414, 415, 416, 424, 425, 429, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 455, 457, 458, 459, 464, 465, 466, 481, 482, 487, 488, 494, 495, 498, 510, 512, 513, 514, 515, 519, 520, 522, 527, 530, 532, 534, 540, 541, 543, 558, 562, 572, 583, 584, 587, 590, 593, 595, 597, 603, 604, 605, 607, 610, 614, 618, 619, 622, 625, 628, 630, 631, 632, 633, 634, 641, 643, 646, 647, 648, 649, 652, 667, 668, 676, 677, 686, 696, 697, 701, 710, 715, 721, 724, 738, 744, 746, 747, 757, 771, 774, 775, 784, 788, 793, 800, 801, 804, 808, 813, 814, 820, 822, 824, 827, 832, 834, 835, 836, 837, 839, 840, 842, 843, 845, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 865, 866, 867, 869, 872, 873, 874, 877, 878, 879, 880, 885, 886, 888, 902, 903, 908, 909, 915, 916, 919, 920, 923, 924, 931, 933, 935, 936, 937, 939, 940, 942, 944, 945, 954], "featur": [1, 33, 37, 51, 66, 246], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 73, 75, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 127, 128, 137, 139, 147, 150, 151, 152, 153, 154, 155, 158, 159, 161, 163, 164, 165, 167, 168, 169, 171, 173, 174, 177, 179, 180, 181, 189, 190, 191, 198, 199, 200, 201, 202, 204, 210, 214, 215, 217, 218, 219, 220, 228, 245, 246, 253, 256, 258, 259, 260, 270, 278, 281, 291, 295, 296, 319, 325, 334, 345, 349, 355, 362, 363, 364, 367, 379, 381, 383, 396, 404, 407, 409, 416, 429, 436, 438, 440, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 459, 460, 463, 464, 465, 466, 468, 470, 471, 476, 477, 479, 481, 482, 484, 487, 488, 489, 492, 494, 495, 498, 515, 516, 520, 522, 526, 527, 529, 530, 532, 533, 534, 541, 547, 549, 552, 554, 558, 559, 560, 562, 564, 565, 572, 590, 593, 595, 597, 603, 604, 605, 608, 610, 612, 614, 618, 619, 622, 631, 632, 633, 634, 635, 636, 641, 643, 644, 649, 652, 668, 675, 676, 677, 696, 699, 709, 713, 738, 747, 756, 771, 775, 781, 788, 789, 790, 791, 793, 801, 802, 803, 804, 806, 808, 810, 820, 821, 822, 824, 825, 826, 828, 850, 852, 854, 856, 869, 870, 871, 872, 873, 874, 880, 881, 884, 885, 888, 891, 892, 897, 898, 900, 902, 903, 905, 908, 909, 910, 913, 915, 919, 925, 931, 936, 937, 943, 944, 945, 954], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 128, 135, 137, 142, 143, 146, 151, 152, 153, 160, 162, 164, 165, 167, 171, 173, 176, 177, 180, 181, 189, 191, 193, 199, 200, 201, 207, 208, 210, 214, 215, 217, 218, 219, 220, 223, 226, 228, 246, 254, 260, 270, 278, 296, 300, 301, 306, 319, 322, 323, 358, 360, 362, 363, 364, 370, 371, 382, 383, 396, 407, 409, 412, 429, 436, 438, 440, 443, 444, 445, 446, 447, 449, 450, 451, 453, 455, 458, 459, 463, 465, 466, 468, 472, 473, 474, 480, 481, 487, 489, 491, 493, 495, 516, 521, 522, 526, 528, 529, 532, 534, 541, 543, 547, 549, 552, 554, 557, 558, 559, 560, 561, 562, 564, 571, 572, 583, 590, 592, 593, 598, 599, 603, 604, 605, 606, 610, 612, 613, 618, 628, 633, 635, 636, 641, 643, 644, 646, 650, 652, 668, 677, 696, 714, 717, 718, 724, 738, 784, 787, 789, 790, 791, 795, 796, 801, 804, 807, 826, 833, 852, 854, 856, 869, 872, 873, 874, 878, 880, 884, 888, 893, 894, 901, 902, 908, 910, 912, 916, 926, 932, 934, 935, 936, 937, 944, 945, 954], "librari": [1, 72, 79, 407, 572, 962], "author": 1, "domain": 1, "specif": [1, 25, 29, 86, 88, 90, 92, 99, 101, 102, 111, 121, 164, 246, 442, 495, 572, 668, 858, 916, 954], "capabl": [1, 29, 246], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 89, 99, 100, 101, 102, 103, 110, 111, 117, 129, 137, 141, 152, 153, 213, 215, 246, 256, 296, 368, 383, 385, 388, 389, 391, 392, 393, 416, 443, 444, 445, 446, 447, 449, 450, 451, 484, 565, 572, 586, 593, 595, 604, 605, 632, 633, 640, 641, 649, 668, 676, 794, 807, 811, 815, 816, 817, 818, 819, 872, 905, 954], "mai": [1, 33, 37, 68, 69, 86, 88, 89, 90, 92, 99, 102, 104, 111, 112, 115, 128, 139, 141, 167, 195, 196, 210, 217, 218, 246, 260, 290, 295, 296, 319, 324, 335, 349, 443, 444, 445, 446, 447, 449, 450, 451, 456, 457, 495, 532, 533, 541, 556, 572, 610, 614, 629, 630, 633, 643, 648, 652, 668, 676, 677, 708, 713, 738, 746, 757, 775, 788, 804, 850, 876, 877, 916, 954], "exist": [1, 28, 29, 102, 111, 121, 223, 246, 325, 646, 668, 747], "belong": [1, 152, 246, 604, 668], "core": [1, 91, 210, 246], "cannot": [1, 87, 99, 100, 104, 117, 123, 128, 191, 228, 246, 300, 409, 453, 472, 491, 500, 572, 631, 652, 668, 677, 717, 869, 893, 912, 954], "overrid": [1, 29, 86, 88, 89, 90, 91, 92, 99, 119, 120, 122, 123, 246, 409, 572, 668, 833, 954], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 71, 86, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 129, 132, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 160, 162, 164, 166, 167, 170, 171, 172, 173, 174, 175, 177, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 260, 274, 275, 276, 281, 282, 283, 291, 294, 296, 321, 326, 345, 348, 349, 352, 355, 365, 367, 369, 371, 373, 381, 383, 390, 408, 409, 415, 417, 429, 431, 433, 439, 441, 443, 444, 445, 446, 447, 449, 450, 451, 457, 458, 465, 466, 499, 500, 502, 505, 517, 518, 519, 520, 521, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 572, 578, 586, 590, 591, 592, 593, 595, 596, 597, 600, 602, 603, 604, 605, 607, 609, 610, 618, 619, 622, 624, 625, 626, 630, 631, 632, 633, 634, 635, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 693, 694, 701, 714, 722, 739, 740, 748, 771, 774, 775, 778, 781, 793, 796, 833, 842, 843, 850, 855, 872, 873, 920, 922, 932, 933, 934, 954, 958], "dt": [1, 60, 70, 153, 246, 580, 605, 668, 960], "attempt": [1, 209, 246], "do": [1, 29, 60, 67, 110, 141, 167, 204, 214, 217, 246, 278, 319, 482, 488, 494, 519, 572, 590, 595, 610, 614, 622, 631, 632, 633, 668, 676, 696, 738, 903, 909, 915, 936, 945, 954], "so": [1, 51, 101, 110, 123, 150, 152, 153, 181, 246, 270, 281, 383, 482, 488, 494, 572, 604, 605, 668, 699, 903, 909, 915], "rais": [1, 13, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 117, 118, 189, 246, 295, 300, 415, 470, 472, 484, 495, 547, 713, 717, 891, 893, 905, 916, 936, 945, 954], "an": [1, 5, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 86, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 121, 122, 128, 130, 131, 139, 142, 144, 146, 152, 153, 164, 165, 167, 177, 181, 187, 189, 204, 209, 217, 223, 228, 246, 255, 256, 260, 276, 278, 281, 295, 296, 300, 305, 308, 309, 310, 314, 315, 316, 317, 318, 319, 325, 358, 368, 371, 395, 407, 408, 416, 434, 442, 443, 444, 445, 446, 447, 449, 450, 451, 470, 472, 477, 495, 505, 511, 522, 526, 538, 543, 547, 556, 557, 558, 561, 565, 572, 583, 588, 589, 590, 595, 597, 600, 604, 605, 610, 614, 622, 631, 646, 647, 652, 668, 677, 694, 696, 699, 713, 717, 722, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 747, 784, 788, 794, 858, 859, 860, 861, 862, 863, 865, 866, 867, 872, 873, 891, 893, 898, 916, 936, 945, 954], "attributeerror": 1, "howev": [1, 89, 139, 246, 788, 954], "can": [1, 12, 29, 60, 70, 77, 89, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 123, 128, 129, 138, 146, 152, 160, 162, 177, 181, 193, 199, 213, 214, 217, 223, 228, 246, 260, 278, 296, 315, 318, 319, 345, 355, 368, 382, 383, 421, 438, 443, 444, 445, 446, 447, 449, 450, 451, 455, 458, 460, 463, 466, 479, 482, 488, 494, 495, 515, 519, 522, 523, 526, 534, 541, 543, 562, 565, 571, 572, 586, 590, 595, 604, 628, 635, 640, 646, 648, 652, 668, 677, 696, 714, 738, 771, 781, 794, 807, 838, 854, 872, 873, 874, 878, 881, 884, 900, 903, 909, 915, 954], "other": [1, 17, 29, 70, 99, 100, 103, 110, 117, 118, 137, 141, 147, 166, 167, 173, 174, 189, 193, 218, 223, 244, 246, 253, 257, 259, 270, 274, 308, 309, 310, 321, 361, 375, 377, 378, 383, 387, 398, 406, 409, 420, 422, 426, 428, 466, 501, 509, 511, 518, 525, 527, 528, 549, 552, 561, 572, 583, 593, 609, 610, 618, 619, 628, 643, 646, 647, 668, 676, 692, 728, 729, 730, 742, 814, 871, 938, 946, 953, 954], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 121, 122, 125, 128, 137, 164, 167, 171, 190, 201, 206, 208, 246, 254, 260, 270, 307, 308, 309, 310, 345, 365, 374, 438, 513, 557, 572, 590, 593, 606, 610, 613, 668, 725, 728, 729, 730, 771, 799, 854, 931, 934, 954], "gener": [1, 94, 101, 119, 120, 121, 122, 133, 181, 191, 207, 214, 246, 296, 453, 459, 572, 668, 714, 869, 880, 932, 954], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 700, 701, 703, 708, 709, 710, 712, 714, 721, 722, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 954], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 120, 121, 122, 180, 214, 246, 253, 431, 518, 548, 572, 621, 668], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 119], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 131, 133, 134, 135, 137, 140, 141, 142, 143, 144, 151, 152, 153, 155, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 298, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 572, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 668, 676, 677, 722, 731, 797, 832, 833, 844, 847, 848, 853, 872, 873, 874, 886, 942, 946, 954], "_expr": [1, 62], "hello": [1, 482, 488, 494, 519, 701, 903, 909, 915], "return": [1, 25, 27, 29, 30, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 78, 80, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 124, 128, 129, 130, 133, 136, 137, 138, 139, 140, 142, 143, 146, 150, 151, 155, 157, 163, 164, 165, 166, 168, 169, 176, 177, 179, 180, 181, 189, 190, 191, 202, 203, 210, 213, 214, 215, 223, 225, 228, 231, 235, 240, 246, 256, 258, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 275, 279, 281, 282, 283, 294, 295, 299, 301, 304, 311, 312, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 359, 367, 380, 383, 385, 386, 387, 388, 389, 391, 392, 393, 400, 405, 409, 416, 421, 431, 439, 440, 453, 454, 460, 461, 462, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 487, 489, 490, 491, 492, 498, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 518, 520, 521, 522, 523, 526, 535, 536, 537, 543, 545, 547, 548, 557, 558, 561, 563, 565, 572, 586, 588, 590, 593, 594, 595, 597, 606, 612, 613, 614, 621, 622, 631, 632, 633, 638, 639, 640, 641, 646, 649, 655, 659, 664, 668, 673, 674, 675, 677, 684, 685, 687, 688, 690, 691, 693, 697, 699, 700, 701, 712, 713, 716, 718, 721, 727, 739, 740, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 788, 793, 801, 803, 804, 809, 811, 812, 814, 815, 816, 817, 818, 819, 823, 825, 828, 832, 833, 838, 850, 856, 857, 869, 870, 871, 873, 881, 890, 891, 892, 894, 896, 897, 898, 900, 901, 902, 904, 905, 908, 910, 911, 912, 913, 916, 919, 925, 927, 939, 941, 942, 946, 954], "lit": [1, 97, 124, 383, 395, 532, 534, 541, 562, 565, 572, 796, 954], "alia": [1, 60, 62, 64, 152, 153, 169, 216, 223, 246, 253, 257, 260, 276, 278, 304, 308, 309, 310, 314, 315, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 333, 335, 336, 337, 339, 341, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 357, 358, 361, 371, 373, 375, 377, 378, 381, 383, 386, 387, 395, 398, 399, 400, 406, 409, 418, 420, 422, 426, 428, 430, 432, 438, 454, 470, 471, 474, 477, 480, 483, 489, 491, 492, 493, 499, 500, 501, 509, 510, 511, 517, 518, 521, 524, 525, 527, 528, 532, 533, 534, 537, 538, 541, 542, 548, 556, 557, 561, 562, 565, 572, 604, 605, 607, 613, 642, 646, 668, 696, 746, 748, 753, 771, 774, 780, 784, 828, 912, 913, 954], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 482, 488, 494, 701, 903, 909, 915], "select": [1, 28, 60, 61, 62, 63, 65, 98, 99, 100, 101, 102, 104, 108, 110, 115, 128, 163, 167, 177, 180, 189, 198, 211, 216, 219, 246, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 372, 374, 376, 379, 381, 382, 384, 385, 387, 388, 390, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 419, 421, 423, 424, 425, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 481, 482, 484, 487, 488, 490, 491, 492, 494, 496, 497, 499, 500, 502, 503, 506, 507, 508, 510, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 543, 545, 549, 550, 551, 552, 553, 554, 556, 559, 560, 561, 562, 563, 564, 572, 591, 607, 610, 621, 634, 642, 647, 649, 668, 696, 714, 872, 873, 885, 897, 900, 926, 954], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 110, 115, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 586, 588, 590, 592, 593, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 695, 696, 697, 700, 701, 703, 708, 709, 710, 712, 714, 721, 722, 724, 725, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 809, 811, 814, 815, 816, 817, 818, 819, 823, 825, 832, 833, 838, 846, 847, 848, 850, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 876, 880, 881, 882, 883, 885, 886, 887, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 923, 925, 926, 927, 928, 929, 932, 933, 934, 938, 939, 940, 941, 942, 943, 946, 954], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 110, 115, 116, 117, 118, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 256, 260, 269, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 304, 305, 306, 307, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 340, 342, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 420, 421, 422, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 465, 466, 467, 470, 473, 474, 476, 478, 480, 483, 489, 490, 491, 492, 493, 499, 500, 501, 502, 504, 505, 506, 510, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 695, 696, 697, 700, 703, 708, 709, 710, 712, 714, 721, 722, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 751, 752, 753, 754, 756, 758, 759, 760, 762, 764, 765, 766, 768, 770, 772, 774, 775, 776, 780, 781, 783, 784, 788, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 880, 882, 883, 884, 885, 886, 888, 894, 895, 897, 899, 901, 904, 910, 914, 923, 924, 925, 926, 927, 928, 929, 931, 932, 935, 936, 937, 939, 940, 941, 942, 943, 944, 946, 954], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 110, 111, 115, 116, 117, 118, 119, 121, 122, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 699, 700, 703, 708, 709, 710, 712, 714, 721, 722, 724, 725, 726, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 827, 832, 834, 835, 836, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 855, 856, 857, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 897, 899, 900, 906, 912, 913, 916, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 954], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 110, 115, 116, 117, 118, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 257, 258, 259, 260, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 330, 332, 333, 335, 336, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 355, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 469, 471, 474, 477, 478, 479, 480, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 676, 677, 679, 683, 684, 685, 686, 687, 688, 695, 696, 697, 700, 701, 703, 708, 709, 710, 712, 714, 721, 724, 725, 726, 727, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 747, 749, 750, 754, 759, 760, 766, 768, 773, 775, 776, 779, 781, 783, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 827, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 880, 882, 884, 885, 886, 887, 888, 890, 892, 898, 899, 900, 903, 904, 905, 906, 907, 909, 912, 913, 915, 916, 923, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 946, 954], "column_0": [1, 128, 214, 246], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 165, 246, 491, 492, 912, 913], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 110, 120, 121, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 605, 642, 643, 649, 652, 655, 664, 668, 696, 714, 724, 897, 900, 907, 912, 913, 933, 954], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 86, 88, 89, 90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 132, 135, 138, 139, 140, 144, 149, 151, 152, 157, 164, 176, 179, 189, 190, 193, 199, 205, 206, 214, 215, 216, 217, 223, 226, 227, 246, 254, 274, 277, 278, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 367, 373, 407, 416, 417, 429, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 457, 465, 466, 477, 490, 499, 500, 505, 523, 526, 527, 534, 538, 547, 549, 552, 561, 562, 572, 591, 592, 594, 596, 600, 603, 604, 618, 628, 635, 641, 642, 646, 647, 650, 651, 668, 689, 692, 695, 696, 697, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 726, 739, 788, 793, 797, 800, 804, 814, 850, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 898, 911, 926, 935, 954], "with_row_count": [1, 246, 409, 572, 668, 873, 954], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 75, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 121, 122, 128, 129, 132, 135, 136, 137, 140, 145, 148, 150, 151, 164, 166, 167, 173, 179, 181, 185, 189, 190, 192, 193, 199, 205, 207, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 246, 255, 260, 296, 349, 355, 365, 383, 395, 408, 415, 417, 429, 433, 466, 499, 500, 502, 523, 525, 526, 527, 528, 529, 531, 534, 539, 545, 546, 549, 552, 554, 555, 557, 559, 561, 562, 563, 572, 586, 591, 592, 593, 596, 603, 609, 610, 618, 625, 627, 628, 635, 640, 641, 642, 643, 646, 648, 649, 650, 668, 673, 714, 727, 739, 775, 781, 850, 855, 920, 922, 932, 933, 937, 954], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 96, 97, 99, 100, 110, 124, 128, 130, 141, 152, 155, 164, 165, 169, 190, 191, 200, 202, 203, 206, 208, 220, 231, 240, 246, 277, 282, 294, 304, 319, 320, 324, 325, 331, 354, 358, 368, 380, 400, 430, 439, 453, 463, 468, 485, 491, 492, 504, 506, 510, 511, 516, 518, 529, 543, 545, 554, 557, 559, 560, 563, 564, 572, 588, 590, 604, 606, 613, 636, 638, 639, 644, 655, 664, 668, 676, 695, 700, 712, 721, 727, 738, 741, 746, 747, 753, 780, 784, 794, 803, 828, 846, 869, 884, 888, 906, 912, 913, 925, 927, 934, 939, 944, 954], "filter": [1, 61, 102, 110, 111, 115, 137, 160, 161, 162, 228, 246, 474, 493, 517, 522, 541, 572, 593, 597, 607, 652, 668, 872, 954], "col": [1, 27, 29, 60, 61, 62, 63, 65, 90, 92, 110, 120, 121, 128, 140, 144, 151, 152, 153, 161, 163, 177, 180, 189, 193, 199, 216, 223, 226, 246, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 384, 386, 387, 389, 390, 391, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 409, 410, 411, 412, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 525, 527, 528, 532, 533, 534, 537, 540, 541, 542, 543, 544, 549, 552, 555, 556, 562, 565, 572, 596, 600, 603, 604, 605, 607, 621, 628, 635, 642, 646, 647, 650, 668, 696, 714, 724, 771, 856, 872, 873, 897, 900, 916, 954], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 94, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 128, 130, 131, 133, 134, 135, 138, 142, 143, 146, 147, 149, 150, 151, 152, 154, 158, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 177, 178, 182, 183, 187, 191, 192, 193, 196, 198, 199, 200, 201, 207, 208, 210, 211, 214, 217, 219, 220, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 252, 254, 257, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 276, 278, 281, 287, 296, 305, 307, 309, 310, 311, 312, 314, 319, 322, 323, 332, 336, 337, 339, 340, 344, 350, 351, 361, 362, 363, 364, 366, 367, 368, 369, 370, 374, 375, 377, 378, 379, 382, 385, 388, 389, 391, 392, 393, 395, 396, 398, 402, 403, 404, 406, 407, 409, 410, 411, 412, 419, 420, 422, 424, 425, 426, 427, 428, 430, 431, 432, 435, 436, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 463, 467, 468, 476, 495, 498, 501, 503, 507, 508, 509, 511, 516, 522, 523, 524, 525, 527, 529, 531, 532, 534, 538, 541, 550, 551, 554, 555, 556, 559, 562, 564, 565, 572, 588, 589, 592, 594, 598, 599, 603, 604, 609, 612, 617, 622, 623, 627, 628, 630, 631, 633, 635, 636, 644, 646, 647, 648, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 678, 679, 680, 681, 682, 683, 684, 686, 688, 696, 699, 722, 725, 727, 732, 733, 738, 739, 740, 742, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 776, 777, 787, 789, 790, 791, 793, 795, 799, 802, 804, 811, 813, 815, 816, 817, 818, 819, 825, 826, 832, 835, 836, 846, 850, 851, 852, 858, 860, 861, 863, 864, 865, 867, 869, 881, 882, 883, 887, 888, 890, 897, 900, 919, 928, 929, 932, 937, 938, 942, 944, 945, 954], "drop": [1, 89, 128, 136, 137, 215, 223, 246, 277, 320, 322, 323, 495, 572, 593, 641, 646, 668, 695, 741, 743, 744, 954], "aaa": [1, 29, 246, 499, 500], "bbb": [1, 29, 246, 499, 500], "ccc": [1, 29, 246, 499, 500], "ddd": [1, 29, 246, 499, 500], "eee": [1, 29, 246], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 73, 75, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 127, 128, 129, 135, 136, 137, 138, 140, 145, 148, 150, 151, 152, 153, 157, 158, 164, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 199, 200, 201, 205, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 246, 256, 258, 260, 269, 274, 279, 292, 295, 296, 325, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 365, 367, 371, 373, 383, 395, 409, 414, 415, 417, 429, 433, 437, 439, 440, 443, 444, 445, 446, 447, 449, 450, 451, 458, 465, 466, 475, 491, 492, 495, 502, 517, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 572, 586, 592, 593, 594, 596, 603, 604, 605, 609, 610, 614, 615, 616, 617, 618, 620, 621, 623, 625, 627, 628, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 668, 674, 675, 692, 697, 710, 713, 739, 749, 750, 751, 754, 756, 757, 761, 763, 766, 768, 769, 772, 773, 776, 779, 782, 783, 785, 793, 850, 856, 878, 896, 912, 913, 923, 932, 933, 954], "txt": [1, 110], "utf8": [1, 9, 17, 51, 71, 89, 93, 99, 100, 110, 119, 138, 139, 140, 146, 192, 209, 246, 283, 367, 409, 469, 473, 476, 477, 479, 480, 489, 490, 491, 492, 495, 526, 528, 572, 594, 596, 627, 668, 701, 778, 793, 824, 890, 894, 897, 898, 900, 901, 910, 911, 912, 913, 916, 954], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 153, 180, 246, 253, 260, 270, 278, 305, 306, 308, 309, 310, 315, 318, 320, 361, 375, 377, 378, 379, 382, 383, 386, 389, 391, 392, 393, 395, 398, 406, 409, 420, 422, 426, 429, 430, 431, 432, 474, 480, 483, 485, 486, 489, 491, 492, 493, 495, 498, 501, 509, 511, 518, 521, 522, 525, 528, 534, 538, 548, 562, 565, 572, 605, 621, 668, 696, 724, 916], "tp": [1, 63], "cast": [1, 62, 63, 71, 86, 146, 152, 153, 180, 210, 223, 246, 259, 306, 317, 318, 324, 409, 428, 431, 438, 478, 479, 498, 503, 509, 528, 572, 604, 605, 621, 646, 668, 724, 736, 737, 746, 854, 899, 900, 924, 933, 938, 954], "int64": [1, 29, 31, 62, 63, 93, 97, 99, 124, 138, 146, 152, 153, 180, 192, 204, 210, 246, 317, 318, 330, 333, 337, 339, 341, 344, 351, 365, 431, 438, 478, 503, 509, 522, 526, 539, 561, 572, 594, 604, 605, 621, 627, 649, 668, 736, 737, 752, 755, 762, 764, 767, 770, 777, 854, 871, 924, 936, 937, 938, 954], "int8": [1, 63, 146, 246, 317, 318, 503, 572, 736, 737, 741, 833, 857, 924, 942, 954], "int16": [1, 63, 317, 318, 503, 572, 736, 737, 833, 924, 934, 954], "int32": [1, 63, 86, 89, 93, 121, 122, 152, 153, 165, 246, 305, 335, 359, 509, 572, 604, 605, 668, 757, 785, 832, 938, 954], "b": [1, 26, 27, 30, 33, 51, 63, 68, 71, 86, 88, 89, 90, 91, 92, 93, 94, 103, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 255, 259, 260, 271, 274, 278, 283, 285, 298, 305, 306, 313, 321, 322, 323, 365, 369, 370, 371, 373, 376, 379, 382, 383, 385, 388, 389, 390, 391, 392, 393, 395, 399, 401, 408, 421, 427, 429, 431, 433, 441, 458, 464, 466, 475, 478, 485, 502, 513, 515, 517, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 538, 539, 540, 541, 542, 545, 548, 549, 550, 551, 552, 553, 554, 556, 559, 560, 561, 562, 563, 564, 572, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 676, 696, 724, 740, 742, 787, 788, 796, 807, 814, 824, 855, 871, 896, 899, 906, 923, 937, 941, 954], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 110, 117, 118, 122, 128, 129, 130, 131, 134, 137, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 173, 176, 177, 179, 180, 181, 182, 186, 190, 194, 199, 202, 203, 204, 205, 206, 207, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 257, 259, 260, 271, 276, 277, 278, 279, 282, 290, 291, 294, 298, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 329, 333, 340, 341, 342, 346, 347, 349, 350, 351, 355, 356, 357, 359, 361, 366, 369, 370, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 392, 393, 395, 398, 399, 400, 401, 403, 406, 408, 409, 420, 422, 426, 428, 429, 432, 433, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 456, 457, 460, 464, 465, 466, 467, 470, 480, 481, 483, 484, 487, 489, 491, 492, 495, 499, 500, 501, 502, 504, 505, 506, 509, 510, 511, 518, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 538, 540, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 572, 586, 588, 589, 590, 593, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 676, 679, 686, 695, 696, 697, 700, 708, 709, 712, 721, 725, 726, 728, 738, 740, 742, 754, 755, 761, 763, 766, 767, 768, 769, 773, 775, 776, 777, 778, 781, 782, 783, 795, 796, 803, 804, 806, 807, 809, 814, 816, 817, 818, 819, 823, 833, 839, 846, 847, 848, 850, 852, 856, 861, 863, 864, 865, 866, 867, 869, 871, 881, 885, 886, 891, 901, 902, 904, 905, 908, 910, 912, 913, 916, 923, 925, 926, 927, 934, 937, 938, 939, 946, 954], "c": [1, 26, 27, 30, 33, 51, 61, 63, 71, 89, 91, 93, 103, 110, 120, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 150, 151, 152, 155, 157, 158, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 208, 209, 210, 211, 213, 214, 217, 218, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 239, 240, 246, 253, 260, 274, 283, 285, 383, 395, 429, 431, 458, 491, 495, 513, 515, 519, 520, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 540, 541, 542, 545, 548, 549, 550, 551, 552, 553, 554, 559, 560, 562, 563, 564, 572, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 604, 609, 612, 618, 622, 625, 626, 627, 628, 631, 634, 635, 640, 643, 646, 647, 650, 653, 654, 655, 656, 657, 658, 660, 663, 664, 668, 740, 807, 824, 912, 916, 941, 954], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 86, 89, 90, 91, 92, 93, 96, 97, 100, 116, 121, 122, 124, 128, 130, 131, 134, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 163, 164, 167, 168, 169, 171, 173, 176, 177, 179, 181, 182, 183, 186, 190, 194, 199, 202, 203, 204, 205, 206, 212, 217, 219, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 257, 276, 278, 279, 282, 287, 293, 294, 304, 305, 306, 307, 308, 309, 310, 319, 320, 321, 325, 326, 330, 348, 350, 351, 352, 356, 364, 365, 368, 374, 375, 377, 378, 380, 383, 386, 389, 391, 392, 393, 395, 398, 400, 401, 420, 422, 428, 429, 430, 433, 435, 436, 440, 441, 442, 443, 444, 446, 450, 452, 454, 460, 466, 471, 479, 480, 483, 484, 498, 501, 502, 504, 506, 510, 511, 521, 524, 525, 527, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 559, 560, 562, 563, 564, 572, 588, 589, 590, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 608, 610, 611, 612, 613, 616, 617, 618, 622, 629, 630, 631, 634, 635, 636, 637, 638, 639, 645, 646, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 676, 679, 683, 686, 696, 697, 700, 703, 712, 721, 724, 726, 728, 734, 738, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 774, 776, 777, 779, 782, 783, 791, 794, 803, 804, 806, 807, 832, 833, 839, 846, 847, 848, 850, 851, 852, 856, 858, 859, 860, 862, 863, 866, 869, 871, 881, 887, 892, 900, 901, 905, 925, 939, 942, 946, 954], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 86, 89, 90, 91, 92, 94, 128, 132, 135, 136, 137, 138, 140, 141, 144, 145, 147, 148, 149, 150, 152, 153, 155, 157, 158, 159, 161, 163, 164, 166, 170, 171, 172, 173, 175, 178, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 231, 239, 240, 246, 253, 257, 260, 279, 298, 305, 317, 318, 321, 325, 345, 347, 350, 360, 369, 370, 376, 380, 382, 400, 401, 428, 434, 436, 437, 440, 443, 444, 445, 446, 447, 449, 450, 451, 454, 466, 471, 475, 480, 483, 484, 501, 504, 506, 518, 519, 521, 532, 533, 534, 538, 541, 548, 562, 572, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 604, 605, 606, 608, 609, 611, 613, 614, 618, 622, 625, 627, 628, 629, 630, 631, 634, 635, 638, 639, 642, 643, 645, 646, 648, 649, 655, 663, 664, 668, 676, 697, 726, 732, 736, 737, 742, 771, 783, 804, 839, 852, 856, 861, 863, 864, 865, 867, 871, 892, 896, 901, 905, 924, 954], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 132, 133, 134, 135, 136, 138, 140, 144, 145, 147, 152, 153, 155, 157, 159, 166, 170, 171, 172, 175, 178, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 219, 220, 221, 246, 253, 257, 318, 325, 329, 346, 348, 349, 355, 357, 359, 366, 380, 382, 400, 409, 428, 440, 444, 450, 466, 504, 506, 521, 532, 533, 541, 548, 562, 572, 591, 592, 594, 596, 600, 604, 605, 606, 608, 609, 613, 623, 625, 627, 628, 638, 639, 643, 649, 668, 683, 740, 747, 751, 757, 775, 781, 783, 833, 856, 866, 954], "float32": [1, 27, 63, 146, 208, 246, 668, 810, 832, 954], "lazi": [1, 63, 68, 70, 97, 110, 121, 124, 167, 180, 246, 260, 296, 522, 543, 572, 583, 609, 610, 647, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668], "i16": [1, 63, 458, 572, 833, 934, 954], "i32": [1, 63, 86, 89, 93, 121, 193, 246, 305, 335, 359, 458, 484, 565, 572, 628, 668, 757, 785, 832, 905, 954], "f32": [1, 63, 137, 208, 246, 278, 436, 458, 538, 572, 593, 668, 696, 832, 852, 954], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 97, 110, 122, 124, 128, 129, 130, 131, 132, 135, 137, 138, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 163, 166, 167, 170, 173, 175, 179, 180, 181, 182, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 236, 239, 240, 246, 253, 255, 259, 260, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 304, 306, 308, 309, 310, 315, 316, 317, 318, 320, 321, 330, 331, 333, 337, 339, 341, 344, 351, 354, 365, 368, 370, 371, 372, 373, 375, 376, 380, 381, 382, 383, 386, 389, 391, 392, 393, 395, 397, 400, 401, 405, 407, 408, 420, 421, 422, 429, 430, 431, 432, 433, 434, 437, 438, 440, 441, 453, 455, 456, 458, 459, 460, 464, 465, 466, 485, 486, 499, 500, 501, 502, 503, 504, 505, 506, 510, 511, 512, 514, 517, 519, 521, 525, 526, 528, 532, 533, 534, 538, 539, 540, 541, 545, 548, 549, 552, 556, 558, 562, 563, 565, 572, 586, 588, 590, 592, 593, 596, 597, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 618, 620, 621, 622, 625, 626, 628, 629, 630, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 648, 650, 651, 652, 654, 655, 656, 657, 660, 663, 664, 668, 676, 677, 695, 696, 697, 700, 708, 709, 710, 712, 721, 724, 728, 731, 734, 735, 736, 737, 740, 752, 753, 755, 762, 764, 767, 770, 774, 777, 780, 794, 796, 797, 803, 806, 814, 838, 855, 856, 859, 862, 866, 869, 872, 873, 876, 880, 881, 885, 886, 923, 925, 926, 927, 933, 939, 940, 943, 946, 954], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 732, 882, 928, 954], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 86, 94, 99, 100, 111, 122, 129, 135, 137, 139, 140, 151, 152, 158, 166, 167, 179, 181, 186, 187, 193, 199, 203, 207, 213, 215, 216, 217, 246, 282, 283, 290, 291, 294, 331, 352, 365, 396, 416, 421, 424, 425, 429, 430, 438, 442, 466, 480, 481, 483, 487, 489, 490, 492, 495, 498, 499, 500, 523, 526, 529, 534, 537, 539, 542, 543, 549, 552, 554, 561, 562, 572, 586, 592, 593, 596, 603, 604, 610, 628, 635, 640, 641, 642, 652, 668, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 697, 700, 701, 703, 708, 709, 710, 712, 721, 722, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 747, 753, 774, 775, 781, 788, 790, 791, 794, 795, 796, 797, 799, 802, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 846, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 880, 881, 882, 883, 885, 886, 888, 891, 892, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 919, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 954], "_": [1, 60, 64, 94, 181, 207, 246, 491, 912, 932, 954], "squar": [1, 64, 228, 396, 467, 572, 652, 826, 887, 954], "cube": [1, 64, 432, 572], "s2": [1, 118, 146, 246, 676, 726, 742, 814, 839, 871, 937, 946, 954], "renam": [1, 89, 99, 100, 193, 223, 226, 246, 255, 408, 418, 500, 558, 561, 572, 628, 646, 650, 668, 833, 922, 933, 954], "n2": 1, "in_plac": [1, 157, 197, 221, 246, 853, 855, 879, 886, 954], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 71, 86, 87, 91, 96, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 131, 134, 143, 146, 147, 149, 150, 151, 152, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 193, 199, 205, 210, 213, 214, 215, 216, 217, 219, 223, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 256, 257, 258, 259, 260, 270, 275, 292, 295, 300, 305, 314, 315, 316, 317, 318, 334, 349, 350, 355, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 406, 426, 428, 438, 448, 453, 458, 463, 465, 466, 470, 472, 474, 478, 479, 484, 490, 491, 493, 495, 499, 500, 505, 512, 515, 518, 520, 521, 522, 523, 529, 530, 541, 557, 559, 561, 565, 572, 586, 588, 589, 590, 595, 597, 599, 603, 604, 609, 610, 612, 614, 618, 622, 628, 631, 632, 633, 635, 640, 641, 642, 646, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 674, 675, 676, 677, 687, 710, 713, 717, 722, 726, 727, 756, 775, 776, 781, 787, 789, 790, 791, 797, 801, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 839, 847, 848, 854, 864, 871, 884, 886, 891, 893, 895, 899, 900, 905, 911, 912, 914, 916, 936, 937, 945, 946, 954], "s3": [1, 102, 111, 115, 954], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 94, 116, 120, 121, 128, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 147, 150, 155, 157, 166, 170, 171, 172, 175, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 220, 221, 223, 246, 257, 259, 271, 277, 278, 313, 315, 318, 319, 322, 323, 325, 382, 399, 422, 428, 432, 433, 440, 441, 444, 445, 447, 449, 451, 458, 464, 466, 481, 487, 495, 502, 506, 518, 524, 529, 530, 531, 533, 534, 538, 540, 545, 548, 549, 550, 551, 552, 553, 554, 559, 560, 562, 563, 564, 572, 591, 592, 593, 594, 596, 600, 606, 609, 613, 614, 622, 625, 627, 628, 638, 639, 643, 646, 649, 668, 695, 696, 738, 757, 804, 846, 850, 856, 858, 861, 863, 864, 865, 867, 902, 908, 916, 954], "9": [1, 26, 27, 30, 33, 60, 68, 128, 133, 146, 153, 155, 159, 193, 202, 217, 218, 221, 223, 239, 246, 253, 257, 259, 271, 277, 289, 292, 313, 315, 318, 322, 323, 325, 329, 346, 356, 357, 382, 387, 395, 399, 428, 440, 442, 444, 450, 460, 464, 506, 521, 527, 532, 533, 572, 605, 606, 608, 613, 628, 638, 643, 646, 663, 668, 695, 710, 751, 761, 763, 769, 775, 776, 781, 782, 814, 856, 858, 866, 868, 881, 954], "27": [1, 64, 239, 318, 335, 347, 359, 572, 663, 954], "16": [1, 29, 41, 54, 62, 69, 94, 116, 152, 153, 223, 246, 315, 318, 367, 382, 422, 432, 444, 484, 495, 521, 532, 537, 538, 541, 554, 559, 572, 604, 605, 631, 646, 668, 775, 781, 793, 846, 882, 905, 928, 954], "64": [1, 33, 40, 43, 56, 62, 64, 246, 422, 432, 572, 633, 668, 846, 954], "25": [1, 29, 64, 70, 93, 152, 153, 167, 219, 223, 246, 320, 335, 349, 355, 359, 511, 543, 572, 604, 605, 610, 616, 644, 646, 668, 741, 775, 781, 787, 804, 846, 850, 954], "125": [1, 29, 64, 246, 253, 572, 846, 954], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 180, 210, 246, 431, 523, 542, 572, 621, 668, 677, 936, 937, 954], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 86, 87, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 125, 128, 133, 137, 141, 143, 144, 146, 163, 164, 165, 179, 180, 189, 190, 205, 206, 209, 210, 215, 217, 246, 253, 257, 260, 274, 278, 305, 350, 361, 370, 375, 377, 378, 387, 398, 406, 407, 409, 418, 420, 422, 426, 428, 431, 440, 442, 454, 457, 484, 495, 501, 505, 511, 518, 521, 529, 540, 547, 559, 565, 572, 593, 599, 621, 641, 668, 676, 677, 692, 696, 742, 776, 796, 814, 825, 833, 856, 858, 870, 873, 905, 916, 926, 935, 936, 937, 954], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 133, 180, 210, 246, 431, 572, 621, 668, 937, 954], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 572, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 954, 961], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 87, 99, 100, 103, 119, 137, 151, 159, 164, 177, 183, 189, 190, 215, 223, 238, 246, 253, 256, 257, 361, 368, 375, 377, 378, 382, 398, 406, 420, 422, 426, 428, 432, 435, 436, 443, 444, 445, 446, 447, 449, 450, 451, 501, 511, 513, 518, 529, 554, 555, 559, 566, 568, 572, 573, 574, 577, 578, 579, 580, 583, 593, 608, 623, 641, 646, 662, 668, 677, 794, 806, 851, 852, 863, 938, 948, 950, 954, 955, 958, 959, 960], "A": [4, 27, 29, 48, 67, 70, 93, 99, 100, 101, 108, 110, 123, 146, 152, 167, 181, 190, 205, 217, 218, 219, 223, 246, 252, 296, 325, 330, 333, 337, 339, 341, 344, 351, 361, 368, 377, 378, 385, 388, 389, 391, 398, 406, 407, 408, 416, 426, 433, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 470, 471, 476, 477, 479, 485, 486, 498, 502, 527, 538, 542, 572, 604, 610, 625, 643, 646, 668, 714, 747, 752, 755, 762, 764, 767, 770, 777, 794, 858, 859, 860, 862, 865, 866, 867, 891, 892, 897, 898, 900, 906, 907, 916, 919, 954], "encod": [4, 59, 99, 100, 110, 300, 472, 717, 893], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 61, 65, 70, 87, 89, 92, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 127, 132, 137, 151, 154, 164, 167, 173, 191, 193, 198, 207, 214, 215, 217, 223, 246, 260, 291, 295, 296, 358, 379, 387, 409, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 459, 463, 464, 482, 488, 489, 494, 522, 557, 561, 565, 572, 591, 593, 595, 603, 609, 610, 614, 618, 628, 632, 633, 634, 641, 646, 649, 652, 668, 676, 677, 709, 713, 714, 784, 802, 814, 833, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 873, 880, 884, 885, 903, 909, 910, 915, 936, 954], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 71, 93, 99, 100, 110, 119, 120, 122, 129, 146, 150, 151, 152, 153, 167, 193, 199, 208, 213, 217, 219, 223, 226, 246, 253, 283, 302, 306, 345, 349, 355, 367, 373, 383, 409, 429, 443, 444, 445, 446, 447, 449, 450, 451, 466, 469, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 523, 525, 527, 528, 542, 549, 552, 561, 572, 586, 595, 602, 603, 604, 605, 610, 628, 635, 640, 646, 649, 650, 668, 701, 719, 724, 771, 775, 781, 793, 807, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 934, 954], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 602, 624, 668], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 278, 696], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 71, 86, 87, 91, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 143, 144, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 167, 179, 181, 191, 197, 199, 205, 210, 213, 214, 215, 216, 219, 221, 223, 230, 232, 233, 236, 246, 256, 257, 258, 259, 260, 269, 275, 276, 278, 292, 295, 297, 300, 305, 314, 315, 316, 317, 318, 319, 334, 350, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 406, 407, 413, 414, 426, 428, 436, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 463, 465, 466, 470, 472, 474, 484, 485, 486, 490, 491, 493, 495, 500, 512, 515, 518, 520, 521, 522, 523, 529, 532, 547, 557, 559, 561, 572, 586, 588, 590, 595, 597, 599, 600, 603, 604, 609, 610, 614, 618, 622, 631, 632, 633, 635, 640, 641, 642, 646, 654, 656, 657, 660, 668, 674, 675, 676, 677, 686, 693, 694, 696, 710, 713, 715, 717, 722, 727, 734, 735, 736, 737, 738, 739, 756, 776, 787, 789, 790, 791, 797, 801, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 847, 848, 850, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 873, 874, 879, 884, 886, 891, 893, 895, 905, 906, 907, 911, 912, 914, 916, 935, 936, 937, 940, 943, 945, 954], "decim": [5, 27, 29, 246, 452, 572, 868, 954], "temporari": 5, "remov": [5, 7, 135, 218, 246, 260, 365, 367, 482, 488, 494, 495, 539, 554, 559, 572, 592, 643, 668, 793, 903, 909, 915, 954], "later": 5, "onc": [5, 99, 100, 103, 123, 127, 128, 191, 226, 246, 260, 453, 572, 587, 650, 668, 677, 869, 954], "stabil": 5, "happen": 5, "being": [5, 69, 99, 100, 110, 115, 217, 218, 246, 260, 319, 349, 443, 444, 445, 446, 447, 449, 450, 451, 538, 572, 643, 668, 738, 775, 804, 850, 954], "consid": [5, 69, 99, 100, 110, 115, 128, 137, 147, 173, 215, 217, 218, 246, 260, 308, 309, 310, 319, 349, 443, 444, 445, 446, 447, 449, 450, 451, 532, 541, 572, 593, 606, 613, 618, 641, 643, 668, 677, 728, 729, 730, 738, 775, 804, 850, 871, 872, 873, 954], "break": [5, 69, 115, 217, 218, 246, 260, 319, 349, 443, 444, 445, 446, 447, 449, 450, 451, 572, 643, 668, 738, 775, 804, 850, 954], "chang": [5, 25, 60, 69, 99, 100, 115, 217, 218, 219, 246, 260, 319, 320, 349, 430, 443, 444, 445, 446, 447, 449, 450, 451, 572, 643, 668, 738, 774, 775, 804, 846, 850, 879, 954], "current": [5, 8, 25, 87, 93, 101, 127, 130, 131, 246, 296, 349, 430, 572, 583, 588, 589, 668, 727, 731, 775, 846, 954], "alpha": [5, 67, 260, 362, 363, 364, 572, 590, 595, 597, 622, 631, 668, 789, 790, 791, 954], "state": [5, 7, 67, 79, 532, 583, 590, 595, 597, 622, 631, 668], "cfg": [6, 7, 8, 14, 125, 193, 223, 246, 628, 646, 668], "previous": 6, "save": [6, 583], "share": [6, 51, 139, 246, 788, 954], "option": [6, 7, 8, 25, 29, 37, 60, 70, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 167, 173, 205, 214, 246, 396, 442, 443, 444, 445, 446, 447, 449, 450, 451, 463, 489, 547, 561, 565, 572, 583, 609, 610, 618, 668, 822, 826, 858, 859, 860, 861, 862, 863, 865, 866, 867, 873, 884, 910, 933, 954], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 164, 165, 166, 167, 169, 171, 173, 174, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 231, 238, 240, 246, 253, 255, 257, 259, 260, 269, 274, 275, 276, 277, 278, 281, 282, 283, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 331, 345, 348, 349, 350, 354, 355, 358, 360, 361, 362, 363, 364, 365, 368, 370, 371, 375, 376, 377, 378, 379, 380, 382, 383, 387, 396, 398, 400, 402, 406, 407, 408, 409, 420, 422, 426, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 504, 505, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 541, 542, 543, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 572, 586, 588, 590, 592, 593, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 609, 610, 613, 614, 618, 619, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 655, 662, 664, 668, 673, 676, 677, 686, 692, 693, 694, 695, 696, 699, 700, 701, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 741, 742, 746, 747, 748, 753, 771, 774, 775, 776, 780, 781, 784, 787, 788, 789, 790, 791, 794, 795, 796, 797, 802, 803, 804, 806, 807, 821, 822, 826, 828, 833, 846, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 880, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 922, 925, 926, 932, 933, 934, 935, 936, 937, 939, 940, 943, 944, 945, 946, 954], "json": [6, 8, 31, 32, 106, 107, 113, 246, 478, 479, 583, 602, 624, 649, 668, 899, 900], "produc": [6, 121, 122, 276, 415, 548, 614, 668, 694], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 108, 110, 119, 120, 121, 122, 124, 137, 139, 151, 153, 154, 164, 167, 173, 179, 181, 189, 190, 191, 200, 207, 215, 217, 220, 224, 246, 291, 295, 296, 306, 360, 362, 363, 364, 379, 402, 409, 424, 425, 430, 436, 453, 459, 468, 476, 482, 484, 488, 489, 494, 495, 516, 522, 529, 543, 547, 554, 557, 559, 560, 561, 564, 572, 593, 595, 603, 605, 610, 618, 633, 636, 641, 644, 649, 668, 709, 713, 714, 724, 787, 788, 789, 790, 791, 802, 833, 842, 843, 846, 852, 869, 880, 888, 897, 903, 905, 909, 910, 915, 944, 954], "note": [7, 17, 29, 37, 60, 70, 86, 87, 88, 90, 92, 93, 97, 99, 101, 102, 108, 110, 111, 120, 121, 122, 123, 124, 125, 127, 128, 133, 142, 152, 153, 164, 166, 167, 177, 180, 189, 190, 206, 209, 214, 218, 219, 223, 246, 260, 278, 295, 317, 318, 322, 323, 345, 349, 355, 383, 389, 391, 443, 444, 445, 446, 447, 449, 450, 451, 463, 480, 482, 483, 488, 494, 495, 503, 511, 532, 541, 556, 565, 572, 590, 597, 598, 604, 605, 606, 610, 613, 625, 631, 643, 646, 668, 677, 696, 713, 736, 737, 771, 781, 872, 873, 879, 884, 901, 903, 904, 909, 915, 924, 954], "oper": [7, 29, 51, 68, 76, 77, 86, 88, 89, 90, 91, 92, 99, 108, 128, 141, 146, 151, 158, 168, 174, 177, 179, 180, 184, 204, 209, 210, 214, 217, 225, 226, 246, 253, 254, 257, 296, 314, 315, 316, 317, 318, 319, 361, 375, 377, 378, 395, 398, 406, 418, 420, 422, 426, 428, 432, 438, 501, 511, 518, 519, 520, 527, 528, 538, 572, 597, 603, 606, 609, 613, 618, 619, 650, 668, 676, 734, 735, 736, 737, 738, 854, 931, 935, 936, 937, 945, 954], "from": [7, 27, 29, 60, 68, 70, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 134, 135, 139, 141, 150, 152, 153, 164, 165, 167, 168, 173, 185, 189, 191, 193, 214, 215, 217, 219, 246, 314, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 365, 382, 396, 424, 425, 430, 453, 466, 476, 478, 484, 495, 513, 515, 525, 535, 536, 537, 559, 560, 571, 572, 592, 597, 602, 604, 605, 610, 618, 624, 625, 628, 641, 647, 668, 676, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 822, 826, 842, 843, 844, 846, 869, 897, 899, 905, 943, 946, 954], "environ": [7, 25, 123], "local": [7, 102, 111, 749, 750, 779, 847, 848, 954], "non": [7, 29, 37, 60, 91, 165, 173, 193, 218, 223, 246, 383, 430, 442, 443, 444, 445, 446, 447, 449, 450, 451, 471, 477, 525, 527, 528, 549, 552, 561, 572, 618, 628, 643, 646, 668, 714, 807, 846, 858, 859, 860, 861, 862, 863, 865, 866, 867, 892, 898, 936, 954], "env": 7, "back": [7, 60, 141, 210, 246, 429, 572, 676, 937, 954], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 51, 58, 60, 68, 69, 71, 89, 91, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 137, 141, 142, 143, 147, 150, 152, 153, 154, 155, 159, 164, 169, 170, 171, 172, 173, 175, 177, 179, 181, 182, 183, 185, 189, 190, 191, 195, 196, 199, 200, 201, 202, 205, 206, 210, 213, 217, 218, 219, 220, 229, 230, 232, 233, 234, 236, 237, 246, 252, 253, 254, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 276, 277, 280, 281, 282, 284, 286, 287, 288, 290, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 322, 323, 325, 329, 342, 346, 356, 361, 362, 363, 364, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 397, 398, 399, 403, 405, 406, 407, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 435, 436, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 485, 486, 489, 491, 492, 493, 498, 501, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 518, 520, 525, 528, 530, 532, 533, 534, 540, 541, 547, 549, 550, 551, 552, 553, 556, 557, 562, 565, 572, 586, 593, 598, 599, 604, 605, 607, 608, 615, 616, 617, 618, 620, 623, 625, 629, 630, 635, 636, 637, 640, 643, 644, 649, 653, 654, 656, 657, 658, 660, 661, 668, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 694, 695, 698, 699, 700, 702, 704, 705, 706, 708, 712, 715, 717, 718, 719, 720, 724, 725, 728, 729, 730, 732, 733, 738, 739, 740, 741, 743, 744, 747, 751, 768, 772, 782, 788, 789, 790, 791, 794, 795, 796, 799, 801, 802, 803, 804, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 823, 828, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 881, 882, 883, 884, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 904, 906, 907, 910, 912, 913, 914, 919, 924, 925, 926, 927, 928, 929, 937, 938, 941, 943, 945, 946, 954], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 700, 701, 703, 708, 709, 710, 712, 714, 721, 722, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 799, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 880, 881, 882, 883, 885, 886, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 954], "ascii": [9, 17, 481, 483, 487, 498, 902, 904, 908, 919], "charact": [9, 11, 17, 23, 27, 99, 100, 110, 246, 345, 475, 480, 481, 482, 487, 488, 490, 491, 494, 498, 622, 668, 771, 896, 901, 902, 903, 908, 909, 911, 912, 915, 919], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 246], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 86, 93, 99, 100, 102, 110, 111, 181, 204, 210, 217, 218, 246, 643, 668, 937, 954], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 87, 91, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 134, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 197, 199, 205, 210, 213, 214, 215, 219, 221, 223, 229, 230, 232, 233, 234, 236, 239, 246, 256, 257, 258, 260, 269, 275, 278, 292, 295, 297, 314, 315, 316, 317, 318, 319, 334, 350, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 406, 407, 426, 428, 436, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 458, 463, 465, 466, 470, 474, 478, 484, 485, 486, 490, 491, 493, 495, 512, 515, 518, 520, 522, 523, 529, 532, 547, 557, 559, 561, 565, 572, 586, 588, 589, 590, 595, 597, 603, 604, 609, 610, 612, 614, 622, 631, 632, 633, 635, 640, 641, 646, 653, 654, 656, 657, 658, 660, 663, 668, 676, 686, 696, 710, 713, 715, 722, 726, 727, 734, 735, 736, 737, 738, 739, 756, 776, 787, 789, 790, 791, 797, 807, 808, 809, 811, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 839, 847, 848, 850, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 874, 879, 884, 886, 891, 895, 899, 905, 906, 907, 911, 912, 914, 916, 935, 936, 937, 940, 943, 945, 946, 954], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 253, 485, 572, 906], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 253, 471, 477, 572, 892, 898, 933, 954], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 89, 115, 121, 130, 131, 133, 134, 135, 138, 142, 143, 146, 149, 150, 151, 158, 166, 167, 171, 172, 182, 183, 198, 199, 200, 220, 223, 226, 230, 232, 233, 234, 235, 236, 238, 239, 246, 252, 261, 262, 263, 264, 265, 266, 287, 305, 307, 311, 312, 319, 322, 323, 350, 360, 361, 362, 363, 364, 365, 366, 374, 375, 377, 378, 382, 389, 391, 392, 393, 395, 396, 398, 402, 403, 404, 406, 410, 411, 412, 419, 422, 424, 425, 426, 430, 432, 435, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 461, 462, 463, 467, 468, 507, 508, 511, 516, 524, 525, 527, 529, 531, 539, 550, 551, 554, 559, 560, 564, 572, 588, 592, 598, 599, 603, 609, 610, 616, 617, 623, 635, 636, 644, 646, 647, 650, 654, 656, 657, 658, 659, 660, 662, 663, 668, 678, 679, 680, 681, 682, 683, 725, 732, 733, 738, 739, 740, 776, 790, 791, 795, 799, 804, 846, 850, 858, 860, 861, 863, 864, 865, 867, 868, 882, 883, 887, 928, 929, 942, 954], "fmt": [10, 352, 381, 495, 542, 572, 607, 668, 778, 916], "floatfmt": 10, "mix": [10, 495, 740, 916, 954], "control": [10, 29, 120, 246, 595, 668], "how": [10, 29, 51, 68, 71, 89, 92, 101, 137, 166, 217, 218, 246, 276, 277, 306, 320, 382, 429, 439, 565, 572, 593, 609, 643, 668, 694, 695, 724, 741, 954], "float": [10, 29, 39, 40, 69, 115, 117, 118, 119, 121, 122, 139, 142, 167, 183, 191, 196, 238, 246, 275, 276, 307, 308, 309, 310, 322, 323, 350, 360, 361, 362, 363, 364, 369, 374, 377, 378, 382, 385, 388, 389, 391, 392, 393, 398, 402, 406, 410, 419, 424, 425, 426, 432, 435, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 511, 524, 534, 550, 551, 555, 557, 560, 562, 564, 572, 598, 610, 623, 630, 631, 662, 668, 693, 694, 722, 725, 728, 729, 730, 739, 742, 776, 787, 788, 789, 790, 791, 795, 799, 804, 813, 826, 829, 835, 836, 842, 843, 849, 850, 851, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 884, 888, 924, 944, 954], "point": [10, 29, 39, 40, 121, 122, 142, 152, 168, 246, 307, 322, 323, 350, 369, 374, 389, 391, 452, 453, 572, 598, 604, 614, 625, 668, 725, 776, 795, 799, 813, 868, 869, 954], "full": [10, 36, 66, 99, 100, 102, 110, 111, 614, 668], "format": [10, 13, 17, 27, 29, 93, 98, 99, 100, 110, 115, 140, 150, 164, 173, 190, 206, 244, 246, 349, 352, 484, 495, 520, 596, 602, 618, 649, 668, 778, 905, 916, 953], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 80, 86, 88, 90, 92, 96, 97, 99, 100, 103, 110, 113, 120, 121, 123, 124, 129, 130, 139, 140, 142, 143, 155, 164, 165, 168, 169, 176, 177, 191, 195, 196, 200, 202, 213, 217, 220, 229, 231, 240, 246, 270, 277, 282, 290, 294, 296, 298, 304, 313, 319, 320, 332, 335, 340, 342, 350, 356, 357, 359, 362, 363, 364, 368, 370, 376, 380, 389, 391, 399, 400, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 456, 457, 459, 468, 480, 483, 485, 491, 492, 504, 510, 516, 529, 530, 545, 554, 559, 560, 563, 564, 572, 586, 588, 596, 597, 598, 599, 606, 613, 622, 629, 630, 633, 636, 638, 640, 644, 653, 655, 664, 668, 695, 700, 708, 712, 714, 721, 727, 738, 741, 754, 757, 766, 768, 776, 782, 783, 785, 788, 789, 790, 791, 794, 796, 803, 813, 828, 839, 840, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 876, 877, 880, 888, 901, 904, 906, 912, 913, 925, 939, 944, 954], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 128, 129, 130, 139, 142, 143, 145, 154, 155, 156, 158, 164, 165, 167, 169, 170, 171, 175, 176, 177, 187, 189, 191, 194, 195, 196, 198, 200, 201, 202, 203, 208, 211, 213, 217, 220, 222, 224, 231, 240, 246, 253, 275, 276, 277, 281, 282, 290, 291, 294, 295, 296, 298, 304, 308, 309, 310, 319, 320, 362, 363, 364, 368, 369, 370, 376, 379, 380, 400, 428, 430, 432, 436, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 464, 468, 476, 481, 484, 485, 487, 489, 491, 492, 498, 504, 505, 506, 510, 516, 518, 522, 529, 530, 534, 535, 536, 537, 543, 545, 551, 553, 554, 557, 559, 560, 561, 562, 563, 564, 572, 586, 588, 597, 598, 599, 606, 610, 613, 622, 629, 630, 633, 634, 636, 638, 639, 640, 644, 645, 648, 655, 664, 668, 684, 685, 693, 694, 695, 699, 700, 708, 709, 712, 713, 714, 721, 722, 726, 727, 728, 729, 730, 738, 741, 788, 789, 790, 791, 794, 795, 796, 802, 803, 804, 827, 828, 835, 839, 840, 842, 843, 844, 845, 846, 849, 852, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 876, 877, 880, 885, 888, 897, 902, 905, 906, 908, 910, 912, 913, 919, 924, 925, 926, 927, 934, 939, 944, 954], "size": [12, 33, 99, 100, 120, 121, 122, 123, 139, 152, 217, 246, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 522, 572, 604, 633, 668, 788, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 954], "overwrit": [12, 28, 86, 88, 89, 90, 92, 99, 100, 110, 127, 246, 597, 668], "chunk": [12, 33, 96, 99, 100, 108, 110, 112, 113, 114, 121, 122, 141, 165, 176, 246, 259, 437, 572, 633, 668, 676, 726, 800, 839, 853, 931, 954], "stream": [12, 30, 67, 151, 215, 246, 590, 595, 597, 603, 614, 618, 622, 631, 632, 633, 641, 668], "engin": [12, 28, 101, 123, 128, 151, 215, 228, 246, 603, 614, 618, 641, 652, 668, 677, 954], "By": [12, 99, 100, 103, 110, 167, 200, 220, 246, 468, 484, 516, 529, 547, 554, 559, 560, 564, 572, 610, 636, 644, 668, 888, 905, 936, 944, 954], "determin": [12, 29, 58, 60, 68, 89, 92, 99, 100, 103, 108, 110, 114, 128, 146, 152, 153, 164, 165, 214, 219, 246, 296, 306, 334, 409, 415, 439, 443, 444, 445, 446, 447, 449, 450, 451, 463, 572, 604, 605, 668, 714, 724, 756, 804, 833, 884, 954], "schema": [12, 51, 61, 62, 63, 68, 71, 81, 82, 84, 86, 88, 89, 90, 92, 93, 99, 100, 105, 109, 110, 113, 120, 121, 128, 130, 131, 138, 139, 174, 177, 246, 296, 415, 518, 561, 572, 588, 589, 594, 614, 619, 649, 652, 668, 731, 954], "thread": [12, 27, 96, 99, 100, 101, 123, 246, 260, 278, 572, 696], "pool": [12, 123], "For": [12, 29, 101, 102, 103, 111, 141, 153, 166, 167, 228, 246, 296, 305, 362, 363, 364, 416, 438, 463, 532, 541, 542, 572, 605, 610, 652, 668, 676, 789, 790, 791, 854, 884, 936, 954], "some": [12, 25, 29, 89, 99, 100, 110, 137, 246, 593, 668, 814, 954], "dataset": [12, 99, 100, 110, 115, 396, 572, 583, 614, 668, 826, 954], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 94, 99, 100, 101, 104, 108, 110, 111, 112, 113, 121, 122, 128, 129, 138, 139, 141, 143, 146, 152, 180, 189, 193, 199, 207, 213, 215, 246, 308, 309, 310, 362, 363, 364, 370, 407, 409, 416, 465, 466, 482, 488, 494, 495, 523, 532, 541, 572, 586, 599, 604, 614, 628, 633, 635, 640, 641, 668, 676, 728, 729, 730, 788, 789, 790, 791, 796, 833, 872, 873, 903, 909, 915, 932, 954], "have": [12, 25, 29, 60, 71, 87, 99, 100, 103, 121, 122, 141, 164, 184, 190, 206, 246, 319, 362, 363, 364, 416, 436, 495, 572, 618, 631, 648, 668, 676, 738, 774, 789, 790, 791, 801, 852, 916, 954], "larg": 12, "element": [12, 22, 97, 122, 124, 129, 200, 213, 220, 246, 260, 261, 262, 263, 264, 265, 266, 276, 278, 279, 304, 311, 312, 314, 315, 316, 317, 318, 319, 366, 379, 387, 403, 404, 430, 436, 439, 454, 460, 461, 462, 467, 468, 491, 492, 507, 508, 510, 516, 529, 554, 559, 560, 564, 572, 586, 636, 640, 644, 668, 677, 678, 679, 680, 681, 682, 683, 694, 696, 697, 721, 727, 732, 733, 734, 735, 736, 737, 738, 792, 797, 803, 814, 828, 830, 831, 846, 852, 870, 881, 882, 883, 887, 888, 912, 913, 925, 928, 929, 934, 939, 940, 944, 954], "too": 12, "optimist": 12, "lead": [12, 93, 115, 246, 455, 482, 494, 498, 505, 515, 529, 559, 572, 614, 652, 668, 874, 903, 915, 919, 954], "out": [12, 93, 116, 153, 246, 281, 295, 300, 385, 388, 470, 472, 565, 572, 605, 632, 633, 668, 699, 713, 717, 891, 893], "memori": [12, 33, 68, 86, 87, 90, 91, 92, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 141, 197, 228, 246, 437, 458, 572, 633, 652, 668, 676, 677, 853, 878, 879, 954], "error": [12, 72, 99, 100, 110, 189, 246, 283, 295, 300, 305, 395, 470, 472, 478, 479, 495, 572, 652, 701, 713, 717, 722, 891, 893, 899, 900, 916, 954], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 78, 80, 85, 89, 90, 92, 93, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 121, 128, 129, 130, 137, 141, 144, 146, 150, 152, 154, 155, 160, 162, 164, 165, 167, 168, 169, 173, 177, 191, 198, 202, 203, 206, 208, 213, 215, 217, 218, 224, 228, 231, 240, 246, 260, 270, 279, 367, 380, 400, 430, 440, 464, 466, 475, 504, 523, 532, 533, 541, 545, 549, 552, 556, 563, 565, 572, 586, 588, 590, 593, 597, 600, 601, 604, 606, 610, 611, 613, 614, 618, 633, 634, 638, 639, 640, 641, 643, 648, 652, 655, 664, 668, 676, 697, 793, 803, 846, 856, 885, 896, 925, 954], "per": [12, 27, 29, 120, 121, 129, 150, 177, 178, 199, 213, 235, 237, 238, 246, 260, 278, 281, 295, 466, 523, 572, 586, 635, 640, 659, 661, 662, 668, 696, 699, 713], "everi": [12, 99, 100, 110, 152, 203, 206, 219, 246, 272, 273, 277, 279, 281, 282, 291, 294, 314, 315, 316, 317, 318, 319, 349, 355, 367, 475, 506, 532, 533, 572, 597, 604, 639, 668, 690, 691, 695, 697, 699, 700, 709, 712, 734, 735, 736, 737, 738, 775, 781, 793, 896, 927, 954], "process": [12, 27, 123, 246, 632, 633, 668], "liter": [13, 17, 65, 70, 103, 122, 150, 164, 170, 171, 175, 176, 179, 189, 190, 193, 201, 205, 218, 223, 246, 256, 258, 299, 325, 361, 368, 375, 377, 378, 383, 395, 398, 406, 420, 422, 426, 432, 437, 470, 485, 486, 501, 511, 522, 525, 527, 528, 535, 536, 547, 549, 552, 557, 561, 572, 599, 628, 643, 646, 668, 674, 675, 716, 747, 794, 807, 872, 873, 891, 906, 907, 954], "left": [13, 70, 117, 118, 152, 153, 166, 167, 218, 246, 362, 363, 364, 382, 383, 443, 444, 445, 446, 447, 449, 450, 451, 454, 481, 498, 509, 525, 532, 533, 541, 556, 565, 572, 604, 605, 609, 610, 643, 668, 789, 790, 791, 807, 870, 902, 919, 938, 954], "center": [13, 29, 246, 362, 363, 364, 442, 443, 444, 445, 446, 447, 449, 450, 451, 572, 789, 790, 791, 858, 859, 860, 861, 862, 863, 865, 866, 867, 954], "right": [13, 15, 29, 70, 99, 100, 117, 118, 152, 153, 166, 167, 246, 362, 363, 364, 383, 443, 444, 445, 446, 447, 449, 450, 451, 454, 463, 487, 525, 572, 604, 605, 609, 610, 668, 789, 790, 791, 807, 870, 884, 908, 954], "cell": 13, "align": [13, 29, 60, 246, 498, 919], "keyerror": [13, 17], "recognis": [13, 17, 119], "column_abc": 13, "column_xyz": 13, "visibl": [14, 139, 246, 788, 954], "eg": [14, 22, 29, 246, 349, 495, 511, 572], "rang": [14, 29, 69, 70, 101, 139, 152, 165, 246, 329, 342, 346, 347, 349, 355, 356, 382, 522, 527, 535, 536, 572, 604, 668, 739, 751, 768, 772, 773, 775, 781, 782, 788, 846, 850, 954], "100": [14, 29, 89, 92, 99, 100, 110, 113, 246, 498, 522, 668, 859, 860, 862, 954], "98": [14, 158, 246, 304, 465, 505, 510, 572], "99": [14, 29, 142, 143, 158, 161, 246, 254, 304, 368, 370, 465, 505, 510, 572, 598, 599, 668, 787, 794, 954], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 93, 101, 110, 121, 122, 131, 141, 149, 152, 153, 155, 157, 158, 159, 176, 180, 182, 186, 187, 193, 202, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 259, 267, 268, 269, 271, 277, 282, 290, 291, 294, 308, 313, 315, 318, 320, 322, 323, 325, 349, 355, 358, 379, 380, 382, 387, 395, 399, 400, 403, 430, 444, 464, 498, 504, 518, 525, 532, 538, 541, 543, 545, 547, 548, 554, 559, 563, 572, 590, 604, 605, 606, 608, 613, 621, 622, 628, 633, 637, 638, 646, 650, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 677, 695, 700, 708, 709, 712, 728, 739, 741, 747, 781, 784, 787, 803, 814, 828, 830, 846, 872, 873, 925, 954], "95": [14, 254, 572], "96": [14, 254, 572], "97": [14, 158, 246, 254, 572], "move": [15, 362, 363, 364, 443, 444, 446, 450, 572, 789, 790, 791, 859, 860, 862, 866, 954], "inlin": 15, "parenthes": 15, "print": [16, 100, 116, 138, 150, 151, 165, 168, 208, 225, 246, 381, 572, 607, 668, 814, 858, 934, 954], "below": [16, 29, 102, 111, 137, 246, 382, 565, 572, 593, 668], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 93], "utf8_full_condens": [17, 93], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 471, 476, 477, 479, 892, 897, 898, 900], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 71, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 128, 130, 134, 137, 142, 143, 150, 152, 153, 154, 159, 166, 167, 168, 171, 173, 177, 178, 181, 189, 191, 193, 196, 198, 199, 205, 207, 210, 214, 215, 216, 217, 218, 219, 223, 226, 246, 255, 259, 260, 271, 281, 291, 296, 298, 308, 309, 310, 313, 315, 318, 322, 323, 348, 349, 355, 362, 363, 364, 365, 368, 369, 370, 376, 379, 382, 383, 389, 390, 391, 392, 393, 399, 407, 409, 427, 430, 436, 437, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 457, 458, 459, 460, 464, 465, 469, 470, 473, 474, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 494, 495, 498, 499, 500, 509, 519, 521, 522, 525, 528, 530, 536, 537, 539, 540, 547, 548, 549, 552, 557, 558, 560, 561, 564, 565, 572, 588, 589, 593, 598, 599, 604, 605, 608, 609, 610, 612, 614, 618, 628, 630, 631, 632, 633, 634, 635, 641, 642, 643, 646, 647, 649, 650, 652, 668, 677, 684, 685, 699, 709, 714, 727, 728, 739, 740, 742, 758, 759, 760, 765, 774, 775, 781, 786, 787, 789, 790, 791, 794, 795, 796, 798, 801, 802, 804, 805, 806, 807, 818, 819, 822, 826, 833, 834, 835, 836, 837, 841, 850, 851, 852, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 875, 877, 880, 881, 884, 885, 888, 890, 891, 894, 895, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 912, 913, 914, 915, 916, 930, 933, 934, 937, 938, 944, 945, 954], "rounded_corn": 17, "style": [17, 29, 181, 246], "border": 17, "line": [17, 29, 99, 100, 103, 110, 150, 160, 162, 246], "includ": [17, 25, 27, 29, 66, 102, 111, 121, 129, 139, 152, 213, 214, 217, 246, 350, 383, 490, 491, 532, 572, 586, 604, 640, 668, 776, 788, 807, 911, 912, 945, 954], "divid": [17, 349, 355, 362, 363, 364, 396, 572, 775, 781, 789, 790, 791, 826, 954], "same": [17, 29, 51, 60, 67, 71, 104, 110, 120, 128, 135, 151, 199, 215, 223, 226, 228, 246, 252, 259, 367, 429, 442, 443, 444, 445, 446, 447, 449, 450, 451, 466, 500, 526, 572, 592, 603, 614, 635, 641, 646, 650, 652, 668, 672, 676, 677, 747, 793, 858, 859, 860, 861, 862, 863, 865, 866, 867, 946, 954], "dens": [17, 150, 246, 436, 572, 852, 954], "space": 17, "horizont": [17, 68, 146, 157, 217, 246, 527, 528, 532, 533, 534, 538, 541, 549, 552, 556, 562], "markdown": 17, "compat": [17, 29, 33, 101, 246, 470, 471, 476, 477, 485, 486, 633, 668], "No": 17, "appli": [17, 27, 29, 68, 110, 119, 121, 122, 146, 180, 246, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 363, 364, 407, 431, 442, 443, 444, 446, 450, 495, 518, 519, 520, 522, 532, 533, 541, 548, 556, 572, 606, 613, 614, 621, 668, 749, 750, 751, 754, 756, 757, 761, 763, 766, 768, 769, 772, 773, 776, 779, 782, 783, 785, 790, 791, 858, 859, 860, 862, 866, 916, 954], "round": [17, 29, 62, 93, 246, 307, 374, 507, 572, 725, 799, 954], "corner": [17, 93], "op": [17, 122, 246, 439, 572, 668, 954], "The": [17, 28, 29, 33, 45, 52, 60, 66, 86, 88, 89, 90, 92, 96, 99, 101, 108, 110, 123, 128, 136, 138, 150, 151, 152, 153, 154, 159, 164, 167, 174, 179, 189, 190, 193, 216, 219, 223, 226, 228, 246, 295, 296, 298, 299, 300, 301, 329, 342, 345, 346, 349, 355, 356, 365, 368, 376, 379, 407, 429, 436, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 460, 463, 469, 472, 473, 478, 480, 481, 482, 487, 488, 494, 498, 526, 539, 543, 558, 561, 565, 566, 568, 572, 573, 574, 578, 579, 580, 604, 605, 606, 608, 610, 613, 614, 619, 622, 628, 633, 642, 646, 650, 652, 668, 677, 713, 716, 717, 718, 727, 751, 768, 771, 772, 775, 781, 782, 794, 802, 806, 852, 858, 859, 860, 861, 862, 863, 865, 866, 867, 881, 884, 890, 893, 894, 899, 901, 902, 903, 908, 909, 915, 919, 948, 950, 954, 955, 958, 959, 960], "one": [17, 28, 29, 60, 78, 86, 88, 89, 90, 91, 92, 122, 143, 144, 150, 151, 152, 153, 164, 173, 181, 189, 190, 212, 227, 246, 254, 370, 395, 404, 442, 465, 505, 519, 549, 552, 562, 565, 572, 599, 600, 603, 604, 605, 618, 647, 651, 668, 676, 796, 822, 831, 858, 920, 954], "more": [17, 29, 31, 33, 60, 85, 86, 87, 88, 89, 90, 91, 92, 102, 108, 111, 121, 122, 128, 133, 164, 168, 173, 177, 189, 190, 191, 215, 228, 246, 257, 260, 297, 308, 309, 310, 395, 396, 404, 407, 428, 453, 463, 512, 549, 552, 562, 565, 572, 618, 633, 641, 652, 668, 677, 715, 728, 729, 730, 822, 826, 869, 884, 940, 954, 962], "semigraph": 17, "box": [17, 128, 246], "draw": [17, 22, 23], "found": [17, 27, 73, 82, 84, 89, 93, 138, 218, 246, 454, 479, 495, 572, 643, 668, 870, 900, 954], "unicod": 17, "block": [17, 151, 215, 246, 603, 625, 641, 648, 668, 872, 873, 954], "http": [17, 29, 87, 101, 127, 133, 246, 476, 897, 962], "en": [17, 29, 246], "wikipedia": 17, "org": [17, 87, 101, 127, 133, 246], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 246], "etc": [18, 29, 99, 102, 104, 108, 111, 112, 114, 246, 522, 872, 873, 954], "inform": [20, 66, 102, 111, 133, 246, 308, 309, 310, 396, 463, 572, 622, 668, 728, 729, 730, 826, 884, 954], "separ": [21, 27, 94, 96, 99, 100, 110, 179, 181, 207, 214, 216, 246, 260, 279, 283, 475, 528, 532, 533, 572, 642, 668, 697, 701, 896, 923, 932, 954], "between": [21, 68, 119, 120, 121, 122, 183, 238, 246, 283, 305, 321, 383, 430, 435, 447, 469, 529, 531, 554, 555, 559, 572, 623, 662, 668, 701, 722, 742, 807, 846, 851, 863, 890, 954], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 121, 122, 123, 134, 143, 151, 152, 153, 181, 246, 308, 309, 315, 370, 429, 436, 443, 455, 492, 572, 599, 603, 604, 605, 633, 668, 714, 728, 729, 734, 740, 796, 852, 859, 874, 913, 954], "both": [22, 27, 51, 70, 101, 152, 153, 166, 167, 174, 189, 246, 259, 383, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 609, 610, 619, 668, 807, 954], "width": [23, 29, 99, 100, 246, 481, 487, 498, 668, 902, 908, 919], "char": [23, 51, 71, 483, 904], "enabl": [24, 71, 193, 223, 246, 455, 572, 628, 646, 668, 874, 954], "addit": [24, 29, 89, 102, 111, 119, 120, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 253, 365, 368, 429, 466, 523, 525, 526, 527, 528, 539, 549, 552, 558, 561, 572, 592, 596, 603, 628, 635, 642, 646, 650, 668, 794, 954], "verbos": 24, "debug": [24, 93, 590, 597, 614, 668], "log": [24, 62, 304, 360, 404, 422, 432, 510, 572, 721, 787, 939, 954], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 86, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 121, 164, 179, 185, 189, 190, 192, 205, 206, 246, 409, 572, 625, 627, 668, 833, 954], "show": [25, 29, 137, 150, 168, 178, 246, 593, 622, 631, 668], "variabl": [25, 94, 123, 173, 207, 246, 618, 668, 932, 954], "restrict": [25, 492, 913], "dictionari": [25, 29, 86, 88, 89, 90, 92, 99, 100, 105, 109, 110, 164, 179, 189, 190, 205, 206, 246, 409, 572, 668, 740, 833, 954], "those": [25, 29, 99, 246, 436, 572, 852, 954], "been": [25, 29, 69, 94, 246, 436, 572, 852, 954], "set_fmt_float": 25, "directli": [25, 121, 122, 362, 363, 364, 572, 668, 789, 790, 791, 954], "via": [25, 99, 100, 103, 110, 112, 113, 114, 164, 190, 246, 260, 572], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 597, 624, 632, 633, 649, 668, 676, 954], "binaryio": [26, 30, 98, 99, 103, 104, 105, 108, 109, 246], "bytesio": [26, 27, 29, 30, 33, 98, 99, 100, 103, 104, 108, 246], "path": [26, 27, 29, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 246, 455, 479, 572, 624, 632, 633, 649, 668, 874, 900, 954], "compress": [26, 30, 33, 246, 632, 633, 668], "avrocompress": [26, 246], "uncompress": [26, 30, 33, 104, 112, 246, 633, 668], "write": [26, 27, 28, 29, 30, 31, 33, 100, 104, 246, 308, 309, 310, 572, 612, 631, 633, 649, 668, 728, 729, 730, 954], "apach": [26, 33, 98, 101, 246], "avro": [26, 98, 246, 583], "should": [26, 27, 29, 30, 31, 32, 33, 86, 88, 90, 92, 94, 97, 102, 110, 119, 120, 122, 124, 127, 128, 135, 152, 164, 167, 189, 190, 206, 207, 216, 228, 246, 254, 260, 278, 306, 319, 358, 365, 389, 391, 442, 443, 444, 445, 446, 447, 449, 450, 451, 454, 463, 526, 539, 546, 547, 565, 572, 592, 604, 609, 610, 614, 631, 632, 633, 642, 649, 652, 668, 677, 696, 724, 738, 784, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 884, 954], "written": [26, 27, 29, 30, 31, 32, 33, 246, 632, 633, 649, 668], "snappi": [26, 33, 246, 633, 668], "deflat": [26, 246], "import": [26, 27, 29, 30, 33, 36, 60, 70, 86, 90, 91, 110, 115, 117, 118, 119, 120, 121, 122, 123, 134, 150, 152, 165, 167, 210, 217, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 537, 604, 610, 614, 668, 732, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 811, 815, 816, 817, 822, 858, 882, 928, 954], "pathlib": [26, 27, 30, 33, 110, 246], "foo": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 220, 221, 222, 225, 246, 255, 275, 280, 281, 284, 285, 308, 309, 310, 345, 380, 381, 400, 440, 456, 457, 469, 471, 473, 475, 477, 482, 488, 490, 492, 494, 496, 497, 504, 506, 519, 522, 524, 526, 529, 530, 531, 540, 544, 545, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 563, 564, 565, 572, 591, 592, 593, 594, 600, 607, 608, 609, 625, 627, 628, 641, 642, 645, 647, 649, 668, 701, 728, 771, 856, 892, 894, 896, 898, 913, 954], "bar": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 155, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 215, 216, 220, 221, 225, 246, 255, 285, 381, 463, 473, 475, 490, 492, 519, 524, 526, 529, 530, 531, 540, 545, 549, 550, 551, 552, 553, 554, 558, 559, 560, 563, 564, 565, 572, 591, 592, 593, 594, 600, 607, 608, 609, 625, 627, 628, 641, 642, 645, 649, 668, 701, 884, 894, 896, 913, 954], "ham": [26, 27, 30, 33, 94, 132, 133, 135, 136, 137, 138, 144, 145, 147, 154, 155, 157, 166, 170, 171, 172, 175, 178, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 207, 208, 209, 210, 211, 215, 220, 221, 246, 526, 591, 592, 593, 594, 600, 609, 625, 627, 628, 641, 647, 668], "d": [26, 27, 30, 33, 51, 68, 71, 89, 115, 134, 150, 154, 155, 158, 166, 202, 204, 217, 221, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 253, 331, 352, 383, 431, 458, 471, 477, 491, 495, 525, 543, 572, 609, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 753, 778, 807, 892, 898, 912, 916, 954], "e": [26, 27, 30, 33, 51, 71, 87, 99, 100, 103, 104, 108, 112, 114, 134, 150, 155, 202, 204, 217, 246, 253, 260, 360, 365, 383, 402, 409, 458, 463, 539, 565, 572, 612, 625, 668, 787, 807, 871, 884, 936, 954], "dirpath": [26, 27, 30, 33, 110, 246], "new_fil": [26, 27, 30, 33, 246], "has_head": [27, 29, 99, 100, 103, 110, 246], "quot": [27, 99, 100, 110, 246], "batch_siz": [27, 99, 100, 113, 246], "1024": [27, 33, 99, 100, 113, 246, 633, 668], "datetime_format": [27, 246], "date_format": [27, 246, 352], "time_format": [27, 246], "float_precis": [27, 29, 246], "null_valu": [27, 99, 100, 110, 246], "_io": [27, 30, 246], "comma": [27, 246], "csv": [27, 99, 100, 103, 110, 246, 583, 632, 633, 668], "result": [27, 31, 32, 60, 90, 92, 101, 102, 110, 112, 114, 115, 122, 141, 152, 163, 177, 196, 210, 226, 246, 362, 363, 364, 368, 396, 429, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 455, 457, 490, 491, 511, 522, 532, 533, 534, 548, 562, 572, 587, 604, 614, 622, 630, 632, 633, 649, 650, 668, 676, 789, 790, 791, 826, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 874, 877, 911, 912, 936, 954], "If": [27, 29, 30, 31, 32, 33, 51, 65, 66, 69, 70, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 127, 128, 129, 137, 141, 150, 152, 153, 155, 164, 167, 169, 173, 177, 190, 191, 198, 202, 206, 207, 209, 213, 214, 215, 217, 218, 246, 260, 291, 296, 308, 309, 310, 325, 371, 396, 407, 409, 436, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 459, 463, 464, 478, 480, 482, 483, 488, 489, 490, 491, 492, 494, 495, 519, 520, 521, 522, 529, 530, 532, 541, 547, 549, 552, 557, 559, 561, 565, 572, 586, 593, 595, 604, 605, 609, 610, 614, 618, 625, 633, 634, 640, 641, 643, 649, 652, 668, 676, 677, 709, 728, 729, 730, 739, 747, 801, 803, 804, 826, 828, 850, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 874, 880, 884, 885, 899, 901, 903, 904, 909, 910, 911, 912, 913, 915, 916, 925, 931, 936, 945, 954], "instead": [27, 31, 32, 65, 97, 99, 108, 121, 124, 128, 152, 164, 177, 179, 189, 190, 193, 210, 223, 246, 269, 480, 482, 488, 494, 522, 557, 561, 572, 598, 604, 628, 646, 649, 668, 686, 872, 873, 901, 903, 909, 915, 937, 954], "whether": [27, 70, 90, 92, 122, 246, 334, 350, 413, 414, 455, 572, 614, 668, 756, 776], "header": [27, 29, 33, 93, 99, 100, 103, 110, 138, 181, 214, 246, 633, 668], "field": [27, 52, 82, 84, 89, 216, 246, 296, 409, 478, 491, 492, 500, 532, 533, 548, 561, 572, 642, 668, 714, 912, 913, 922, 923], "symbol": [27, 246], "byte": [27, 99, 100, 103, 104, 105, 108, 109, 110, 139, 246, 299, 302, 303, 480, 483, 633, 668, 716, 719, 720, 788, 901, 904, 954], "specifi": [27, 29, 60, 70, 73, 82, 84, 121, 129, 135, 139, 140, 143, 151, 179, 189, 193, 199, 213, 216, 223, 226, 246, 362, 363, 364, 365, 370, 409, 429, 439, 466, 481, 487, 523, 525, 526, 527, 528, 539, 549, 552, 558, 561, 572, 586, 592, 596, 599, 603, 628, 635, 640, 642, 646, 650, 668, 788, 789, 790, 791, 796, 902, 908, 954], "defin": [27, 29, 36, 70, 119, 120, 121, 128, 152, 153, 177, 180, 228, 246, 260, 295, 383, 431, 443, 444, 445, 446, 447, 449, 450, 451, 521, 547, 561, 572, 604, 605, 621, 652, 668, 677, 713, 807, 954], "chrono": [27, 246, 352, 495, 778, 916], "rust": [27, 33, 79, 104, 108, 128, 228, 246, 652, 677, 954], "crate": [27, 246, 470, 471, 476, 477, 485, 486], "fraction": [27, 117, 118, 191, 246, 350, 430, 453, 495, 572, 776, 846, 869, 954], "second": [27, 70, 152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 495, 536, 537, 565, 572, 604, 605, 610, 668, 771, 775, 781], "precis": [27, 29, 37, 164, 190, 206, 246, 324, 495, 746], "infer": [27, 86, 88, 89, 90, 91, 92, 99, 100, 103, 110, 113, 119, 128, 246, 440, 478, 495, 572, 668, 856, 899, 954], "maximum": [27, 99, 100, 110, 120, 121, 122, 170, 246, 272, 410, 424, 436, 549, 572, 615, 668, 690, 728, 758, 834, 842, 847, 852, 954], "timeunit": [27, 36, 38, 70, 246, 324, 325, 354, 358, 746, 747, 780, 784], "frame": [27, 28, 29, 60, 89, 117, 121, 128, 130, 164, 165, 174, 177, 180, 189, 190, 210, 217, 246, 588, 619, 621, 668, 727, 954], "datetim": [27, 29, 60, 70, 91, 93, 134, 150, 152, 153, 165, 167, 219, 246, 275, 276, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 443, 444, 445, 446, 447, 449, 450, 451, 495, 509, 537, 543, 547, 572, 604, 605, 610, 668, 693, 694, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 822, 842, 843, 873, 916, 938, 954], "place": [27, 129, 136, 157, 158, 186, 195, 196, 199, 213, 221, 246, 269, 283, 290, 456, 457, 465, 572, 586, 629, 630, 635, 640, 668, 686, 701, 708, 853, 855, 876, 877, 886, 954], "float64": [27, 29, 89, 97, 99, 121, 124, 138, 139, 146, 192, 210, 223, 246, 261, 262, 263, 264, 265, 266, 305, 311, 312, 350, 365, 389, 391, 461, 462, 507, 508, 526, 539, 572, 594, 627, 646, 668, 776, 937, 942, 954], "datatyp": [27, 31, 45, 58, 86, 88, 89, 90, 92, 95, 97, 103, 105, 109, 122, 124, 138, 140, 146, 192, 246, 279, 305, 365, 458, 475, 495, 509, 526, 539, 572, 583, 596, 627, 649, 668, 677, 697, 722, 740, 820, 822, 824, 878, 896, 916, 938, 954], "repres": [27, 46, 58, 70, 86, 88, 90, 91, 92, 200, 220, 246, 389, 391, 468, 516, 526, 529, 539, 547, 554, 559, 560, 564, 572, 636, 644, 668, 873, 888, 944, 954], "null": [27, 60, 68, 89, 99, 100, 110, 115, 127, 129, 130, 134, 137, 143, 146, 147, 159, 166, 171, 172, 178, 183, 195, 196, 199, 200, 201, 205, 210, 213, 216, 218, 220, 223, 246, 255, 259, 260, 269, 277, 280, 281, 284, 290, 295, 296, 298, 300, 308, 309, 310, 313, 315, 318, 320, 322, 323, 330, 333, 337, 339, 341, 344, 351, 362, 363, 364, 365, 368, 369, 370, 371, 376, 382, 389, 390, 391, 392, 393, 399, 409, 427, 430, 437, 442, 443, 444, 445, 446, 447, 449, 450, 451, 456, 457, 458, 460, 465, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 487, 489, 491, 492, 493, 498, 499, 500, 509, 517, 519, 525, 527, 528, 539, 561, 565, 572, 586, 588, 593, 599, 608, 609, 629, 630, 635, 640, 642, 643, 646, 647, 649, 668, 677, 686, 695, 708, 713, 714, 717, 727, 728, 741, 744, 752, 755, 762, 764, 767, 770, 777, 789, 790, 791, 794, 796, 801, 818, 819, 845, 846, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 871, 876, 877, 881, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 908, 910, 912, 913, 914, 934, 936, 937, 938, 945, 954], "empti": [27, 77, 89, 99, 100, 103, 110, 130, 131, 161, 173, 246, 558, 588, 589, 618, 668, 727, 731, 810, 954], "table_nam": [28, 29, 246], "connection_uri": [28, 101, 246], "if_exist": [28, 246], "dbwritemod": [28, 246], "fail": [28, 87, 102, 104, 111, 127, 215, 246, 270, 296, 495, 572, 641, 668, 677, 916, 954], "dbwriteengin": [28, 246], "sqlalchemi": [28, 246], "databas": [28, 101, 246, 583], "append": [28, 121, 141, 166, 167, 246, 437, 565, 572, 609, 610, 668, 954], "creat": [28, 29, 69, 70, 86, 90, 92, 111, 120, 121, 122, 130, 131, 152, 153, 178, 181, 219, 223, 246, 325, 349, 355, 437, 489, 515, 522, 527, 535, 536, 537, 572, 588, 589, 595, 604, 605, 646, 668, 727, 731, 739, 744, 747, 775, 781, 844, 850, 853, 910, 936, 954], "connect": [28, 99, 101, 104, 108, 112, 114, 115, 246, 584], "uri": [28, 101, 102, 111, 246], "postgresql": [28, 101, 246, 429, 572], "usernam": [28, 99, 101, 104, 108, 112, 114, 246], "password": [28, 99, 101, 104, 108, 112, 114, 246], "server": [28, 101, 246], "port": [28, 99, 101, 104, 108, 112, 114, 246], "replac": [28, 99, 100, 110, 142, 143, 187, 214, 223, 246, 325, 348, 409, 486, 572, 598, 646, 668, 747, 774, 833, 872, 873, 907, 954], "insert": [28, 99, 100, 104, 108, 110, 112, 113, 114, 158, 186, 214, 216, 246, 454, 469, 498, 572, 642, 668, 870, 890, 919, 954], "mode": [28, 246, 557, 572, 668, 954], "new": [28, 29, 97, 110, 124, 125, 128, 137, 157, 158, 177, 178, 185, 186, 203, 216, 217, 223, 246, 255, 325, 367, 382, 408, 485, 486, 491, 492, 499, 500, 506, 572, 583, 593, 625, 639, 642, 646, 652, 668, 673, 744, 747, 793, 844, 855, 906, 907, 912, 913, 920, 922, 927, 933, 946, 954], "alreadi": [28, 246, 278, 319, 572, 696, 738, 954], "adbc": [28, 101, 246], "workbook": [29, 246], "worksheet": [29, 246], "posit": [29, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 362, 363, 364, 365, 429, 466, 484, 523, 525, 526, 527, 528, 539, 549, 552, 558, 561, 572, 592, 596, 603, 628, 635, 642, 646, 650, 668, 789, 790, 791, 905, 954], "tupl": [29, 101, 128, 164, 189, 190, 194, 225, 246, 440, 572, 622, 631, 668, 856, 954], "a1": [29, 61, 63, 246], "table_styl": [29, 246], "column_format": [29, 246], "dtype_format": [29, 246], "oneormoredatatyp": [29, 120, 246, 822, 954], "conditional_format": [29, 246], "conditionalformatdict": [29, 246], "column_tot": [29, 246], "columntotalsdefinit": [29, 246], "column_width": [29, 246], "row_tot": [29, 246], "rowtotalsdefinit": [29, 246], "row_height": [29, 246], "sparklin": [29, 246], "sequenc": [29, 52, 60, 67, 86, 88, 89, 90, 92, 94, 96, 99, 100, 110, 120, 121, 122, 129, 135, 137, 140, 141, 166, 167, 173, 177, 180, 181, 199, 207, 213, 214, 215, 216, 217, 218, 219, 246, 387, 407, 431, 466, 500, 519, 520, 521, 523, 532, 533, 534, 541, 543, 548, 556, 562, 572, 586, 592, 593, 596, 609, 610, 621, 635, 640, 641, 642, 643, 668, 676, 742, 873, 922, 954], "formula": [29, 246, 360, 572, 787, 954], "autofilt": [29, 246], "autofit": [29, 246], "hidden_column": [29, 246], "hide_gridlin": [29, 246], "sheet_zoom": [29, 246], "excel": [29, 103, 246, 583], "object": [29, 30, 33, 70, 87, 88, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 121, 122, 127, 151, 168, 210, 246, 547, 583, 589, 607, 612, 624, 668, 689, 723, 745, 889, 931, 954], "open": [29, 99, 100, 103, 104, 108, 112, 114, 246], "xlsxwriter": [29, 116, 246], "ha": [29, 60, 69, 94, 110, 127, 219, 246, 260, 304, 319, 395, 416, 510, 521, 572, 652, 721, 727, 738, 801, 813, 939, 954], "close": [29, 70, 152, 153, 246, 383, 404, 443, 444, 445, 446, 447, 449, 450, 451, 463, 572, 604, 605, 668, 807, 884, 954], "xlsx": [29, 103, 246], "work": [29, 37, 100, 103, 153, 186, 246, 260, 278, 297, 307, 308, 309, 310, 365, 374, 429, 483, 512, 572, 605, 668, 696, 715, 725, 728, 729, 730, 799, 904, 940, 954], "directori": [29, 108, 246], "sheet1": [29, 246], "valid": [29, 104, 108, 122, 125, 139, 246, 319, 470, 479, 572, 738, 788, 801, 891, 892, 897, 898, 900, 906, 907, 954], "notat": [29, 246], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 120, 121, 152, 153, 246, 307, 350, 374, 375, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 484, 518, 522, 543, 572, 604, 605, 668, 684, 685, 725, 776, 799, 854, 864, 873, 905, 954], "medium": [29, 246], "kei": [29, 60, 66, 152, 167, 174, 179, 181, 185, 188, 246, 604, 610, 619, 625, 626, 668], "contain": [29, 60, 66, 88, 91, 93, 102, 111, 117, 129, 137, 165, 177, 181, 213, 246, 260, 387, 409, 471, 474, 476, 477, 479, 492, 493, 572, 586, 593, 622, 640, 668, 833, 839, 892, 895, 897, 898, 900, 913, 914, 931, 954], "follow": [29, 66, 99, 100, 102, 110, 111, 128, 152, 153, 167, 180, 219, 246, 260, 345, 349, 355, 431, 436, 443, 444, 445, 446, 447, 449, 450, 451, 500, 511, 521, 565, 566, 568, 572, 573, 574, 578, 579, 580, 604, 605, 610, 621, 668, 771, 775, 781, 852, 872, 873, 948, 950, 954, 955, 958, 959, 960, 962], "first_column": [29, 246], "last_column": [29, 246], "banded_column": [29, 246], "banded_row": [29, 246], "sheet": [29, 103, 246], "chart": [29, 246, 622, 668], "subsequ": [29, 184, 210, 246, 595, 668], "colnam": [29, 110, 121, 138, 246, 408, 572, 594, 668], "given": [29, 48, 50, 60, 69, 70, 86, 88, 89, 90, 92, 97, 99, 100, 110, 119, 120, 121, 122, 124, 128, 129, 139, 140, 179, 180, 189, 195, 196, 199, 213, 218, 246, 260, 275, 290, 326, 354, 360, 383, 402, 429, 431, 436, 439, 440, 443, 444, 446, 449, 450, 451, 454, 456, 457, 477, 495, 500, 519, 520, 539, 572, 586, 596, 614, 621, 629, 630, 635, 640, 643, 652, 668, 677, 693, 708, 739, 748, 780, 787, 788, 804, 807, 829, 832, 844, 850, 852, 856, 859, 860, 862, 865, 866, 867, 870, 876, 877, 898, 916, 942, 946, 954], "here": [29, 86, 88, 89, 90, 92, 101, 102, 111, 120, 121, 122, 246, 479, 668, 900], "dd": [29, 246], "mm": [29, 246], "yyyi": [29, 246], "00": [29, 70, 152, 167, 219, 246, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 495, 537, 604, 610, 668, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 916], "dtype": [29, 63, 71, 86, 88, 90, 92, 93, 97, 99, 100, 110, 119, 120, 121, 122, 124, 127, 152, 153, 167, 208, 210, 246, 260, 261, 262, 263, 264, 265, 266, 269, 272, 273, 274, 283, 295, 305, 308, 309, 310, 311, 312, 317, 318, 330, 333, 337, 339, 341, 344, 351, 358, 365, 367, 405, 407, 409, 438, 439, 443, 444, 445, 446, 447, 449, 450, 451, 458, 461, 462, 469, 478, 489, 503, 505, 507, 508, 509, 514, 515, 521, 522, 530, 539, 543, 547, 548, 561, 572, 604, 605, 610, 668, 690, 691, 692, 701, 713, 722, 727, 728, 729, 730, 736, 737, 741, 752, 755, 762, 764, 767, 770, 777, 784, 788, 793, 810, 822, 832, 833, 857, 871, 878, 890, 899, 910, 916, 924, 934, 936, 937, 938, 942, 954], "overridden": [29, 86, 88, 90, 92, 123, 246, 668], "basi": [29, 121, 246], "param": [29, 86, 88, 89, 90, 92, 99, 100, 110, 121, 122, 189, 246, 668], "It": [29, 70, 128, 174, 180, 228, 246, 260, 296, 415, 572, 614, 619, 652, 668, 872, 873, 954], "also": [29, 70, 89, 110, 121, 122, 138, 151, 152, 153, 174, 177, 193, 199, 223, 246, 315, 318, 348, 382, 383, 436, 443, 444, 445, 446, 447, 449, 450, 451, 466, 532, 533, 541, 543, 556, 565, 571, 572, 577, 603, 604, 605, 619, 628, 635, 646, 647, 668, 774, 807, 852, 954], "group": [29, 33, 100, 151, 152, 153, 165, 177, 179, 181, 217, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 254, 260, 278, 373, 429, 465, 466, 476, 505, 521, 572, 603, 604, 605, 633, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 696, 897], "float_dtyp": [29, 246], "simplifi": [29, 67, 246, 590, 595, 597, 622, 631, 632, 633, 668], "uniform": [29, 246], "condit": [29, 65, 137, 144, 189, 246, 474, 493, 541, 565, 593, 600, 668], "suppli": [29, 86, 88, 89, 90, 92, 189, 246, 668], "typenam": [29, 246], "3_color_scal": [29, 246], "data_bar": [29, 246], "make": [29, 52, 68, 86, 91, 99, 100, 101, 104, 108, 112, 114, 152, 153, 174, 177, 184, 219, 246, 363, 364, 409, 439, 491, 498, 572, 604, 605, 619, 668, 790, 791, 804, 833, 912, 919, 954], "icon": [29, 246], "multipl": [29, 67, 68, 99, 100, 110, 112, 113, 114, 120, 122, 129, 135, 139, 141, 144, 151, 152, 157, 165, 179, 181, 193, 199, 213, 223, 226, 246, 295, 413, 416, 421, 422, 429, 440, 443, 444, 445, 446, 447, 449, 450, 451, 466, 523, 526, 532, 533, 541, 548, 549, 552, 556, 565, 572, 586, 592, 600, 603, 604, 628, 635, 640, 646, 650, 668, 676, 713, 788, 838, 856, 954], "singl": [29, 60, 68, 99, 100, 101, 108, 110, 120, 135, 136, 137, 141, 148, 179, 189, 199, 246, 260, 276, 295, 345, 371, 407, 437, 440, 466, 469, 517, 521, 523, 526, 527, 528, 548, 549, 552, 557, 572, 592, 593, 635, 668, 676, 694, 713, 771, 853, 856, 890, 931, 954], "across": [29, 246, 534, 562], "effect": [29, 127, 146, 246, 260, 572, 648, 668], "heatmap": [29, 246], "min": [29, 33, 121, 122, 134, 143, 152, 153, 181, 246, 308, 310, 316, 370, 429, 436, 446, 558, 572, 599, 604, 605, 633, 668, 728, 730, 735, 740, 796, 852, 862, 954], "entir": [29, 246], "final": [29, 60, 114, 246, 362, 363, 364, 572, 597, 668, 789, 790, 791, 954], "made": [29, 246, 936, 954], "up": [29, 52, 101, 164, 167, 190, 206, 246, 260, 307, 498, 572, 609, 610, 614, 668, 725, 919, 954], "abov": [29, 246, 565], "order": [29, 60, 89, 117, 128, 129, 151, 152, 153, 179, 180, 181, 191, 199, 213, 215, 219, 246, 260, 269, 292, 297, 306, 436, 453, 454, 455, 465, 466, 500, 512, 513, 523, 572, 586, 603, 604, 605, 618, 632, 633, 635, 640, 641, 668, 677, 686, 710, 715, 724, 739, 821, 850, 852, 857, 869, 870, 874, 886, 922, 940, 941, 954], "than": [29, 70, 85, 90, 92, 99, 100, 110, 115, 121, 122, 128, 150, 151, 164, 167, 179, 189, 190, 191, 217, 228, 246, 260, 377, 378, 395, 398, 406, 453, 463, 481, 487, 492, 498, 529, 549, 552, 559, 562, 572, 603, 610, 632, 633, 652, 668, 677, 869, 884, 902, 908, 913, 919, 954], "add": [29, 50, 100, 128, 141, 152, 223, 224, 246, 433, 502, 537, 541, 565, 572, 604, 609, 646, 647, 648, 668, 676, 954], "total": [29, 139, 246, 788, 954], "export": [29, 164, 165, 190, 206, 246], "numer": [29, 167, 246, 253, 308, 309, 310, 375, 383, 404, 420, 422, 432, 439, 458, 501, 511, 572, 583, 610, 668, 728, 729, 730, 807, 820, 871, 878, 954], "associ": [29, 60, 246], "sum": [29, 60, 139, 146, 151, 153, 163, 181, 226, 246, 260, 296, 317, 318, 360, 371, 443, 444, 446, 449, 450, 451, 517, 519, 532, 534, 541, 549, 552, 556, 572, 590, 595, 597, 603, 605, 622, 631, 650, 668, 736, 737, 787, 788, 859, 860, 862, 865, 866, 867, 954], "pass": [29, 33, 60, 70, 88, 103, 110, 120, 121, 122, 129, 133, 135, 151, 155, 169, 179, 180, 193, 199, 202, 213, 223, 226, 246, 260, 331, 348, 368, 381, 429, 431, 466, 482, 488, 494, 523, 526, 543, 549, 552, 561, 572, 586, 592, 603, 607, 614, 621, 628, 631, 635, 640, 646, 650, 668, 677, 753, 774, 794, 803, 828, 903, 909, 915, 925, 954], "must": [29, 69, 87, 88, 102, 111, 140, 152, 153, 167, 174, 189, 246, 296, 407, 443, 444, 445, 446, 447, 449, 450, 451, 572, 596, 604, 605, 610, 614, 619, 668, 739, 850, 954], "funcnam": [29, 246], "averag": [29, 246, 362, 363, 364, 436, 572, 789, 790, 791, 852, 954], "count_num": [29, 246], "count": [29, 99, 100, 104, 108, 110, 112, 113, 114, 134, 152, 153, 167, 177, 178, 181, 214, 218, 219, 224, 228, 237, 246, 276, 314, 345, 399, 423, 427, 443, 444, 445, 446, 447, 449, 450, 451, 471, 513, 515, 553, 572, 604, 605, 610, 643, 648, 652, 661, 668, 694, 740, 771, 804, 840, 845, 892, 941, 943, 954], "std_dev": [29, 246], "var": [29, 246, 572, 668, 954], "pixel": [29, 246], "unit": [29, 36, 38, 70, 121, 122, 139, 246, 324, 325, 331, 354, 358, 405, 416, 514, 543, 572, 622, 668, 746, 747, 753, 780, 784, 788, 832, 942, 954], "hand": [29, 99, 100, 110, 246], "side": [29, 152, 153, 246, 383, 443, 444, 445, 446, 447, 449, 450, 451, 454, 572, 604, 605, 668, 807, 870, 954], "call": [29, 100, 121, 122, 128, 151, 168, 245, 246, 260, 315, 318, 572, 584, 603, 667, 668, 677, 954], "ad": [29, 89, 127, 152, 214, 223, 246, 259, 368, 532, 533, 572, 604, 646, 668, 794, 954], "end": [29, 70, 99, 100, 108, 110, 152, 246, 291, 302, 349, 350, 365, 383, 470, 474, 489, 493, 522, 526, 539, 565, 572, 604, 606, 613, 622, 668, 709, 719, 775, 807, 895, 910, 914, 954], "wise": [29, 60, 146, 246, 261, 262, 263, 264, 265, 266, 311, 312, 366, 403, 460, 461, 462, 507, 508, 532, 533, 541, 556, 572, 678, 679, 680, 681, 682, 683, 732, 733, 792, 830, 831, 881, 882, 883, 928, 929, 954], "match": [29, 68, 80, 86, 88, 89, 90, 92, 117, 118, 143, 167, 189, 246, 414, 470, 471, 474, 477, 478, 479, 485, 486, 493, 495, 526, 599, 610, 668, 822, 891, 892, 895, 898, 899, 900, 906, 907, 914, 916, 954], "particip": [29, 246], "distinct": [29, 122, 179, 246, 297, 436, 537, 572, 715, 852, 954], "referenc": [29, 246, 500], "differ": [29, 99, 115, 117, 141, 152, 153, 164, 190, 206, 214, 246, 277, 320, 329, 345, 346, 348, 356, 409, 424, 425, 495, 513, 540, 543, 572, 595, 604, 605, 668, 676, 677, 695, 741, 751, 771, 772, 774, 782, 842, 843, 871, 916, 954], "row_index": [29, 246], "height": [29, 137, 246], "provid": [29, 99, 100, 101, 102, 110, 111, 121, 122, 246, 296, 300, 301, 472, 473, 476, 478, 479, 543, 583, 632, 633, 668, 717, 718, 804, 893, 894, 897, 899, 900, 954, 962], "intersect": [29, 246], "bodi": [29, 246], "start": [29, 70, 98, 99, 100, 104, 108, 110, 112, 113, 114, 123, 151, 152, 168, 198, 219, 224, 246, 291, 303, 329, 331, 332, 334, 335, 340, 342, 346, 347, 349, 350, 354, 355, 356, 357, 359, 365, 383, 464, 470, 474, 489, 493, 522, 526, 532, 539, 541, 565, 572, 603, 604, 622, 634, 648, 668, 709, 720, 746, 748, 751, 753, 754, 756, 761, 763, 766, 768, 769, 772, 773, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785, 807, 885, 895, 910, 914, 954], "zero": [29, 86, 87, 98, 99, 100, 104, 108, 127, 130, 143, 164, 189, 204, 210, 246, 369, 370, 404, 454, 463, 498, 511, 572, 588, 599, 668, 714, 727, 796, 884, 919, 931, 936, 937, 954], "unless": [29, 60, 88, 210, 246, 668, 937, 945, 954], "marker": [29, 246], "compliant": [29, 246], "case": [29, 60, 86, 88, 89, 90, 92, 114, 123, 128, 141, 152, 153, 164, 246, 407, 415, 416, 572, 604, 605, 668, 676, 954], "three": [29, 212, 246, 454, 572], "avail": [29, 96, 102, 111, 120, 245, 246, 436, 566, 568, 571, 572, 573, 574, 577, 578, 579, 580, 583, 584, 597, 667, 668, 852, 948, 950, 954, 955, 958, 959, 960], "insert_befor": [29, 246], "insert_aft": [29, 246], "respect": [29, 246], "direct": [29, 101, 108, 114, 217, 246], "far": [29, 246], "thei": [29, 89, 110, 117, 125, 168, 246, 442, 572, 858, 954], "strongli": [29, 123, 128, 189, 228, 246, 260, 572, 652, 677, 954], "advis": [29, 168, 246, 296], "structur": [29, 77, 81, 83, 141, 180, 246, 431, 572, 621, 668, 676, 954], "your": [29, 99, 100, 117, 118, 128, 164, 193, 223, 226, 246, 260, 572, 590, 606, 613, 614, 628, 646, 650, 668, 677, 954], "wherev": [29, 128, 228, 246, 260, 572, 652, 677, 954], "possibl": [29, 99, 128, 151, 164, 190, 215, 228, 246, 260, 405, 415, 492, 514, 572, 603, 641, 652, 668, 677, 913, 954], "simpl": [29, 177, 246], "colx": [29, 246], "coli": [29, 246], "after": [29, 89, 98, 99, 100, 104, 108, 110, 112, 113, 114, 141, 216, 245, 246, 365, 409, 436, 498, 572, 642, 668, 676, 774, 833, 852, 919, 954], "befor": [29, 99, 110, 123, 125, 141, 152, 167, 216, 246, 317, 318, 319, 409, 430, 442, 443, 444, 445, 446, 447, 449, 450, 451, 498, 503, 572, 604, 607, 610, 642, 668, 676, 736, 737, 738, 833, 846, 858, 859, 860, 861, 862, 863, 865, 866, 867, 919, 924, 954], "most": [29, 86, 99, 100, 110, 246, 416, 421, 430, 492, 515, 572, 838, 846, 913, 943, 954], "mandatori": [29, 246], "return_dtyp": [29, 128, 246, 260, 407, 409, 521, 548, 572, 677, 833, 954], "latter": [29, 141, 246, 676, 954], "appropri": [29, 246, 436, 572, 852, 954], "pure": [29, 246], "actual": [29, 89, 103, 121, 122, 246, 879, 954], "indic": [29, 65, 94, 98, 99, 100, 104, 108, 110, 119, 120, 122, 152, 153, 207, 246, 270, 295, 385, 388, 389, 391, 392, 393, 443, 444, 445, 446, 447, 449, 450, 451, 454, 460, 505, 523, 572, 604, 605, 668, 713, 811, 815, 816, 817, 818, 819, 870, 881, 926, 932, 954], "calcul": [29, 60, 152, 200, 220, 246, 277, 320, 362, 363, 364, 396, 405, 448, 463, 468, 514, 516, 521, 529, 554, 559, 560, 564, 572, 604, 636, 644, 668, 695, 741, 789, 790, 791, 826, 864, 884, 888, 944, 954], "individu": [29, 121, 153, 246, 260, 477, 572, 605, 633, 668, 726, 898, 954], "gridlin": [29, 246], "zoom": [29, 246], "level": [29, 33, 110, 112, 113, 114, 121, 128, 146, 177, 246, 371, 572, 606, 613, 633, 668], "definit": [29, 246, 396, 572, 826, 954], "take": [29, 121, 146, 174, 180, 203, 246, 345, 466, 506, 538, 540, 572, 619, 639, 668, 771, 927, 946, 954], "care": [29, 246, 260, 455, 572, 874, 954], "rel": [29, 102, 111, 117, 118, 246, 345, 362, 363, 364, 572, 771, 789, 790, 791, 954], "see": [29, 101, 102, 103, 111, 117, 118, 121, 122, 133, 166, 180, 246, 308, 309, 310, 352, 370, 382, 396, 407, 463, 556, 572, 728, 729, 730, 778, 826, 884, 954, 962], "readthedoc": [29, 246, 962], "io": [29, 246, 962], "working_with_conditional_format": [29, 246], "html": [29, 87, 101, 127, 133, 246], "similarli": [29, 89, 246], "well": [29, 99, 100, 110, 140, 181, 246, 383, 572, 596, 668, 807, 954], "adjac": [29, 246], "two": [29, 88, 90, 92, 101, 146, 173, 174, 181, 212, 227, 228, 246, 254, 321, 325, 465, 505, 519, 529, 531, 554, 559, 572, 618, 619, 651, 652, 668, 742, 747, 954], "help": [29, 246, 597, 668], "where": [29, 65, 101, 137, 141, 164, 173, 190, 200, 220, 246, 270, 357, 360, 454, 463, 466, 468, 516, 529, 554, 559, 560, 564, 565, 572, 618, 636, 644, 668, 676, 687, 783, 787, 870, 884, 888, 944, 946, 954], "appear": [29, 89, 117, 246, 513, 572, 941, 954], "working_with_sparklin": [29, 246], "inject": [29, 60, 246], "locat": [29, 141, 187, 211, 216, 246, 454, 572, 642, 668, 676, 870, 873, 926, 954], "syntax": [29, 128, 177, 246, 631, 668, 954], "ensur": [29, 71, 121, 122, 151, 179, 189, 246, 383, 515, 572, 603, 614, 668, 936, 943, 954], "correctli": [29, 246], "microsoft": [29, 246], "com": [29, 101, 246, 362, 363, 364, 476, 572, 789, 790, 791, 897, 954], "u": [29, 36, 38, 70, 93, 164, 190, 206, 246, 324, 325, 331, 354, 358, 495, 543, 746, 747, 753, 780, 784], "offic": [29, 246], "f5ed2452": [29, 246], "2337": [29, 246], "4f71": [29, 246], "bed3": [29, 246], "c8ae6d2b276": [29, 246], "instanti": [29, 193, 223, 246, 628, 646, 668], "basic": [29, 246], "random": [29, 120, 121, 122, 154, 191, 246, 379, 436, 453, 459, 572, 802, 852, 869, 880, 954], "date": [29, 36, 60, 70, 99, 100, 101, 110, 115, 134, 150, 152, 153, 165, 167, 246, 275, 276, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 443, 444, 445, 446, 447, 449, 450, 451, 495, 509, 543, 547, 572, 604, 605, 610, 668, 693, 694, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 822, 842, 843, 873, 916, 938, 954], "dtm": [29, 246, 325, 747], "2023": [29, 93, 116, 165, 246, 325, 547, 747], "num": [29, 212, 246, 383, 386, 498, 572, 807, 954], "500": [29, 164, 218, 246, 597, 643, 668, 761, 763, 769, 776, 859, 860, 862, 954], "val": [29, 188, 246, 306, 509, 565, 572, 626, 668, 724], "10_000": [29, 246], "20_000": [29, 246], "30_000": [29, 246], "increas": [29, 99, 108, 246, 319, 572, 738, 954], "b4": [29, 246], "light": [29, 246], "twice": [29, 103, 246], "each": [29, 60, 100, 113, 117, 118, 120, 128, 150, 151, 165, 167, 179, 210, 216, 225, 226, 228, 229, 231, 240, 246, 260, 282, 294, 349, 355, 404, 436, 466, 477, 491, 492, 521, 523, 528, 549, 552, 561, 572, 610, 622, 642, 650, 652, 653, 655, 664, 668, 700, 712, 726, 775, 781, 852, 898, 912, 913, 923, 954], "titl": [29, 246], "explicit": [29, 110, 120, 246, 522, 556], "integr": [29, 246], "multi_fram": [29, 246], "wb": [29, 246], "coordin": [29, 246], "advanc": [29, 246], "len": [29, 69, 120, 121, 165, 246, 314, 440, 481, 487, 498, 572, 739, 850, 856, 902, 908, 919, 954], "min_color": [29, 246], "76933c": [29, 246], "mid_color": [29, 246], "c4d79b": [29, 246], "max_color": [29, 246], "ebf1d": [29, 246], "data_bar_2010": [29, 246], "bar_color": [29, 246], "9bbb59": [29, 246], "bar_negative_color_sam": [29, 246], "bar_negative_border_color_sam": [29, 246], "000": [29, 246], "white": [29, 246], "w": [29, 246, 476, 897], "get_worksheet_by_nam": [29, 246], "fmt_titl": [29, 246], "add_format": [29, 246], "font_color": [29, 246], "4f6228": [29, 246], "font_siz": [29, 246], "12": [29, 60, 69, 70, 93, 152, 153, 167, 219, 246, 317, 325, 332, 335, 342, 347, 349, 355, 359, 430, 458, 533, 535, 536, 548, 572, 604, 605, 606, 610, 613, 631, 638, 668, 677, 739, 747, 768, 775, 781, 868, 954], "ital": [29, 246], "bold": [29, 246], "customis": [29, 246], "trend": [29, 246], "win_loss": [29, 246], "subtl": [29, 246], "tone": [29, 246], "hidden": [29, 246], "id": [29, 228, 246, 485, 486, 513, 515, 572, 652, 941, 954], "q1": [29, 246], "55": [29, 62, 116, 246], "20": [29, 141, 157, 158, 180, 182, 186, 187, 246, 267, 268, 269, 320, 349, 355, 379, 382, 543, 547, 572, 621, 668, 741, 781, 954], "35": [29, 122, 246, 320, 572, 741, 954], "q2": [29, 246], "30": [29, 69, 141, 152, 157, 180, 186, 187, 205, 223, 246, 267, 268, 269, 320, 325, 330, 335, 347, 349, 355, 359, 379, 458, 547, 572, 604, 621, 646, 668, 739, 741, 747, 752, 775, 781, 954], "15": [29, 128, 152, 153, 158, 246, 319, 320, 349, 355, 367, 533, 572, 604, 605, 668, 738, 741, 775, 781, 793, 954], "60": [29, 141, 246, 350, 351, 495, 772, 776, 777, 916], "q3": [29, 246], "50": [29, 141, 246, 308, 309, 310, 349, 355, 572, 728, 781, 954], "40": [29, 141, 180, 246, 349, 355, 379, 572, 621, 668, 757, 781], "80": [29, 246], "q4": [29, 246], "75": [29, 246, 257, 428, 572, 804, 850, 954], "account": [29, 93, 246, 345, 362, 363, 364, 572, 771, 789, 790, 791, 954], "flavour": [29, 246], "integer_dtyp": [29, 193, 246, 628, 668], "0_": [29, 246], "just": [29, 101, 110, 173, 246, 618, 668], "unifi": [29, 246], "multi": [29, 99, 100, 246, 365, 572], "2_color_scal": [29, 246], "95b3d7": [29, 246], "ffffff": [29, 246], "base": [29, 34, 137, 144, 152, 153, 246, 360, 362, 363, 364, 402, 403, 484, 572, 583, 593, 600, 604, 605, 668, 787, 789, 790, 791, 804, 829, 830, 850, 905, 946, 954], "standardis": [29, 246], "z": [29, 93, 120, 121, 139, 160, 162, 166, 173, 246, 253, 257, 274, 306, 379, 428, 439, 495, 572, 609, 618, 634, 668, 724, 796, 916, 954], "score": [29, 246], "conjunct": [29, 246], "a123": [29, 246], "b345": [29, 246], "c567": [29, 246], "d789": [29, 246], "e101": [29, 246], "45": [29, 153, 246, 325, 349, 355, 471, 477, 547, 605, 668, 747, 775, 781, 892, 898], "85": [29, 246], "font": [29, 246], "consola": [29, 246], "standard": [29, 200, 246, 335, 363, 449, 463, 468, 479, 560, 572, 636, 668, 757, 790, 884, 888, 900, 954], "stdev": [29, 246], "ipccompress": [30, 246], "arrow": [30, 72, 86, 101, 104, 112, 204, 246, 632, 668, 931, 936, 954], "ipc": [30, 104, 105, 112, 115, 246, 583], "binari": [30, 246, 299, 301, 302, 303, 520, 716, 718, 719, 720], "feather": [30, 104, 112, 246, 583], "lz4": [30, 33, 246, 632, 633, 668], "zstd": [30, 33, 246, 632, 633, 668], "pretti": [31, 246], "row_ori": [31, 246], "iobas": [31, 32, 106, 107, 246, 624, 649, 668], "serial": [31, 32, 246], "represent": [31, 32, 208, 246, 306, 329, 332, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 509, 572, 595, 612, 668, 724, 751, 754, 756, 757, 761, 763, 766, 768, 769, 772, 773, 776, 782, 783, 785, 934, 938, 954], "orient": [31, 61, 63, 90, 92, 246, 668], "slower": [31, 90, 92, 128, 151, 179, 219, 228, 246, 603, 652, 668, 677, 954], "common": [31, 246, 577], "write_ndjson": [31, 246], "newlin": [32, 107, 113, 246], "delimit": [32, 94, 99, 100, 107, 110, 113, 181, 207, 246, 469, 890, 932, 954], "parquetcompress": [33, 246], "compression_level": [33, 246, 633, 668], "statist": [33, 99, 100, 108, 114, 134, 246, 363, 364, 396, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 572, 633, 668, 740, 790, 791, 826, 864, 884, 954], "row_group_s": [33, 246, 633, 668], "use_pyarrow": [33, 99, 104, 108, 246, 633, 668, 935, 936, 954], "pyarrow_opt": [33, 102, 108, 111, 246], "parquet": [33, 108, 109, 114, 246, 583, 633, 668], "gzip": [33, 246, 633, 668], "lzo": [33, 246, 633, 668], "brotli": [33, 246, 633, 668], "choos": [33, 246, 632, 633, 668], "good": [33, 164, 246, 632, 633, 668], "perform": [33, 77, 87, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 152, 153, 167, 184, 228, 246, 260, 429, 572, 604, 605, 610, 632, 633, 648, 652, 668, 677, 954], "fast": [33, 246, 368, 455, 572, 632, 633, 668, 794, 874, 954], "decompress": [33, 246, 632, 633, 668], "backward": [33, 143, 167, 246, 298, 370, 572, 599, 610, 633, 668, 796, 954], "guarante": [33, 87, 99, 100, 215, 246, 597, 633, 641, 668], "deal": [33, 164, 246, 436, 495, 572, 633, 668, 852, 916, 954], "older": [33, 246, 633, 668], "reader": [33, 96, 99, 100, 104, 108, 246, 584, 633, 668], "higher": [33, 183, 238, 246, 435, 447, 555, 572, 623, 633, 662, 668, 851, 863, 954], "mean": [33, 99, 100, 104, 108, 110, 134, 143, 151, 181, 226, 246, 367, 370, 444, 463, 476, 524, 572, 599, 603, 614, 633, 650, 668, 740, 793, 796, 801, 860, 884, 897, 954], "smaller": [33, 139, 246, 597, 633, 668, 788, 954], "disk": [33, 104, 246, 631, 632, 633, 668], "11": [33, 116, 153, 246, 322, 323, 335, 345, 349, 355, 382, 430, 450, 464, 498, 518, 526, 562, 572, 590, 605, 606, 613, 622, 633, 638, 668, 677, 771, 775, 781, 858, 954], "22": [33, 246, 349, 355, 358, 495, 526, 633, 668, 775, 781, 784, 916], "extra": [33, 99, 102, 103, 104, 108, 111, 112, 114, 141, 246, 633, 668, 676, 954], "comput": [33, 67, 68, 74, 139, 151, 167, 210, 215, 226, 238, 246, 252, 261, 262, 263, 264, 265, 266, 286, 287, 288, 311, 312, 314, 315, 316, 317, 318, 321, 360, 366, 396, 402, 403, 404, 421, 429, 430, 434, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 461, 462, 463, 467, 507, 508, 523, 529, 531, 538, 554, 559, 572, 603, 607, 609, 610, 633, 641, 647, 650, 662, 668, 672, 678, 679, 680, 681, 682, 683, 704, 705, 706, 732, 733, 734, 735, 736, 737, 742, 787, 788, 792, 826, 829, 830, 831, 838, 846, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 881, 882, 883, 884, 887, 928, 929, 937, 954], "reduc": [33, 99, 100, 108, 110, 112, 113, 114, 233, 234, 236, 239, 246, 458, 541, 572, 633, 657, 658, 660, 663, 668, 835, 849, 878, 924, 954], "pressur": [33, 108, 113, 114, 246, 458, 572, 633, 668, 878, 954], "improv": [33, 104, 112, 246, 633, 668], "speed": [33, 246, 260, 572, 633, 668], "minimum": [33, 120, 121, 122, 146, 175, 246, 362, 363, 364, 419, 425, 436, 552, 572, 620, 633, 668, 728, 765, 789, 790, 791, 843, 848, 852, 954], "implement": [33, 87, 127, 128, 228, 246, 260, 572, 652, 677, 872, 873, 954], "v": [33, 69, 139, 246, 454, 572, 739, 870, 954], "At": [33, 246], "moment": [33, 133, 246, 396, 463, 572, 826, 884, 954], "argument": [33, 99, 102, 108, 111, 133, 135, 140, 151, 152, 153, 171, 179, 180, 181, 193, 199, 201, 210, 216, 219, 223, 226, 246, 349, 355, 365, 383, 429, 431, 443, 444, 445, 446, 447, 449, 450, 451, 466, 482, 488, 494, 495, 523, 525, 526, 527, 528, 539, 549, 552, 558, 561, 572, 592, 596, 603, 604, 605, 621, 628, 635, 642, 646, 650, 668, 775, 781, 807, 903, 909, 915, 937, 954], "pyarrow": [33, 86, 91, 99, 102, 104, 108, 111, 115, 116, 165, 204, 209, 210, 246, 584, 931, 935, 936, 937, 954], "write_t": [33, 246], "calendar": [35, 36, 152, 153, 167, 219, 246, 335, 345, 349, 355, 359, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 757, 771, 775, 781, 785], "time": [36, 38, 66, 67, 70, 93, 110, 141, 152, 153, 167, 219, 246, 274, 275, 276, 296, 304, 324, 325, 326, 331, 345, 348, 354, 358, 495, 509, 510, 527, 528, 537, 543, 557, 572, 590, 604, 605, 610, 622, 668, 676, 692, 694, 721, 746, 747, 748, 753, 771, 774, 780, 784, 916, 938, 939, 954], "time_unit": [36, 38, 70, 93, 324, 325, 331, 354, 358, 543, 746, 747, 753, 774, 780, 784], "time_zon": [36, 70, 93, 326, 348, 748, 774], "m": [36, 38, 70, 324, 325, 331, 352, 354, 358, 495, 537, 543, 746, 747, 753, 778, 780, 784, 916], "zone": [36, 70, 326, 348, 748, 774], "zoneinfo": 36, "run": [36, 67, 128, 151, 168, 215, 228, 246, 260, 278, 319, 558, 572, 590, 595, 597, 603, 614, 618, 622, 631, 632, 633, 641, 652, 668, 677, 696, 738, 954, 961], "available_timezon": 36, "attribut": [36, 37, 38, 45, 119, 246, 566, 568, 573, 574, 578, 579, 580, 668, 948, 950, 955, 958, 959, 960], "128": [37, 62, 846, 954], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 438, 470, 572, 854, 891, 954], "neg": [37, 152, 155, 169, 195, 196, 198, 202, 246, 290, 291, 456, 457, 464, 489, 572, 604, 629, 630, 634, 648, 668, 708, 709, 803, 828, 876, 877, 885, 910, 925, 954], "scale": [37, 139, 246, 788, 954], "experiment": [37, 69, 115, 193, 217, 218, 223, 246, 319, 349, 443, 444, 445, 446, 447, 449, 450, 451, 572, 628, 643, 646, 668, 738, 775, 804, 850, 954], "progress": 37, "expect": [37, 78, 80, 85, 260, 521, 572, 612, 614, 668, 850, 954], "delta": [38, 102, 111, 200, 220, 246, 468, 516, 529, 554, 559, 560, 564, 572, 583, 636, 644, 668, 888, 944, 954], "32": [39, 42, 55, 62, 153, 163, 246, 422, 458, 572, 605, 668, 742, 772, 846, 863, 954], "sign": [41, 42, 43, 44, 345, 438, 498, 572, 771, 854, 919, 954], "inner": [45, 51, 71, 166, 218, 246, 283, 321, 572, 609, 643, 649, 668, 701, 742, 954], "polarsdatatyp": [45, 97, 99, 100, 105, 109, 110, 119, 121, 122, 124, 128, 138, 246, 260, 305, 365, 407, 409, 478, 521, 522, 526, 539, 547, 548, 572, 594, 668, 677, 722, 833, 899, 954], "pythondatatyp": 45, "nest": [45, 51, 139, 246, 583, 788, 954], "arrai": [45, 86, 90, 99, 100, 108, 139, 204, 209, 210, 246, 274, 285, 286, 287, 288, 289, 292, 293, 301, 308, 309, 310, 314, 315, 316, 317, 318, 403, 443, 444, 446, 449, 450, 451, 455, 471, 473, 476, 477, 479, 538, 572, 668, 692, 703, 704, 705, 706, 707, 710, 711, 718, 728, 729, 730, 734, 735, 736, 737, 742, 788, 830, 831, 859, 860, 862, 865, 866, 867, 874, 879, 892, 894, 897, 898, 900, 931, 936, 937, 945, 954], "within": [45, 117, 118, 167, 246, 466, 572, 610, 668], "wrap": [47, 93, 383, 572], "arbitrari": [47, 121], "python": [47, 70, 99, 100, 116, 128, 164, 190, 206, 228, 246, 260, 325, 407, 521, 565, 572, 577, 652, 677, 747, 758, 759, 760, 765, 935, 954], "queri": [48, 67, 101, 104, 110, 112, 113, 114, 141, 168, 180, 246, 296, 409, 479, 572, 590, 595, 597, 606, 613, 622, 631, 648, 652, 668, 676, 900, 954, 961], "pars": [48, 99, 100, 103, 110, 112, 113, 129, 151, 193, 199, 213, 223, 226, 246, 383, 429, 466, 478, 484, 495, 523, 525, 527, 528, 543, 549, 552, 561, 572, 586, 603, 628, 635, 640, 646, 650, 668, 807, 899, 905, 916, 954], "transform": [48, 128, 246, 407, 496, 497, 572], "lf": [50, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 668], "under": [50, 61, 62, 63, 64, 566, 568, 573, 574, 578, 579, 580, 948, 950, 955, 958, 959, 960], "context": [51, 123, 177, 246, 254, 260, 278, 371, 415, 465, 466, 515, 521, 530, 540, 543, 558, 571, 572, 583, 647, 668, 696], "manag": [51, 583], "categor": [51, 71, 94, 166, 207, 208, 246, 306, 409, 509, 572, 723, 724, 938, 954], "temporarili": [51, 123, 152, 153, 246, 604, 605, 668], "cach": [51, 67, 71, 104, 110, 112, 114, 409, 443, 444, 445, 446, 447, 449, 450, 451, 495, 572, 590, 595, 597, 622, 631, 668, 916], "categori": [51, 69, 71, 306, 724, 739, 804, 850, 954], "until": [51, 168, 246], "finish": [51, 74, 141, 246, 676, 954], "global": [51, 71, 121, 409, 572], "invalid": [51, 99, 100, 110, 478, 479, 484, 511, 572, 899, 900, 905], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "color": [51, 71, 228, 652], "red": [51, 71, 228, 652], "green": [51, 71, 228, 652], "blue": [51, 71], "orang": [51, 71, 132, 229, 230, 232, 233, 234, 236, 238, 239, 246, 653, 654, 656, 657, 658, 660, 662, 663], "uint8": [51, 71, 119, 208, 246, 317, 318, 409, 503, 518, 572, 736, 737, 924, 954], "df2": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "yellow": [51, 71], "black": [51, 71, 128, 246], "join": [51, 60, 67, 71, 167, 218, 246, 382, 429, 572, 590, 595, 597, 610, 622, 631, 643, 647, 668], "succe": [51, 99, 100, 110], "df_join": [51, 71], "cat": [51, 69, 71, 208, 246, 470, 496, 497, 509, 528, 568, 572, 739, 804, 850, 891, 950, 954], "u8": [51, 71, 94, 207, 208, 246, 409, 518, 572, 932, 954], "schemadict": [52, 86, 88, 89, 90, 91, 92, 110, 192, 246, 561, 614, 627, 652, 668], "composit": 52, "dai": [53, 70, 152, 153, 165, 167, 219, 246, 331, 335, 342, 345, 346, 347, 349, 354, 355, 356, 357, 359, 443, 444, 445, 446, 447, 449, 450, 451, 535, 536, 537, 572, 604, 605, 610, 668, 771, 772, 775, 781, 783], "unsign": [54, 55, 56, 57, 438, 572, 854, 954], "could": [58, 74, 137, 152, 246, 305, 532, 541, 572, 593, 604, 668, 722, 954], "static": [58, 652], "utf": 59, "descend": [60, 129, 199, 213, 246, 269, 292, 436, 455, 465, 466, 523, 572, 586, 635, 640, 668, 686, 710, 821, 852, 874, 886, 954], "union": [60, 67, 68, 179, 246, 590, 595, 597, 622, 631, 668, 742, 814, 873, 954], "uniqu": [60, 119, 120, 122, 162, 177, 237, 246, 271, 386, 394, 423, 495, 513, 515, 553, 572, 661, 668, 688, 740, 812, 823, 840, 916, 941, 943, 954], "fill": [60, 68, 97, 124, 142, 143, 196, 217, 246, 298, 315, 318, 369, 370, 376, 382, 443, 444, 446, 449, 450, 451, 457, 481, 487, 498, 542, 572, 598, 599, 630, 647, 668, 795, 796, 844, 859, 860, 862, 865, 866, 867, 877, 902, 908, 919, 954], "sort": [60, 61, 117, 129, 152, 153, 167, 174, 180, 181, 213, 219, 231, 240, 246, 269, 306, 371, 455, 466, 515, 517, 523, 572, 586, 595, 604, 605, 610, 619, 621, 622, 631, 640, 655, 664, 668, 686, 724, 821, 874, 940, 943, 954], "origin": [60, 99, 100, 215, 246, 348, 395, 409, 429, 438, 471, 476, 477, 479, 481, 487, 498, 572, 641, 668, 739, 774, 833, 850, 892, 897, 898, 900, 902, 908, 919, 954], "doe": [60, 80, 86, 88, 89, 90, 92, 93, 99, 100, 102, 103, 110, 111, 115, 117, 118, 141, 165, 189, 190, 215, 223, 246, 358, 409, 513, 540, 572, 597, 614, 641, 646, 668, 676, 784, 801, 833, 879, 945, 954], "receiv": [60, 110, 128, 180, 246, 431, 572, 621, 668], "now": [60, 153, 246, 495, 605, 668], "whose": [60, 167, 181, 246, 365, 539, 572, 610, 668], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 129, 144, 146, 199, 213, 246, 256, 257, 258, 275, 299, 334, 371, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 428, 466, 478, 517, 518, 523, 561, 572, 586, 600, 635, 640, 668, 674, 675, 687, 693, 716, 756, 797, 807, 808, 809, 811, 812, 814, 815, 816, 817, 818, 819, 823, 847, 848, 872, 891, 946, 954], "2022": [60, 70, 134, 150, 246, 325, 495, 537, 543, 747, 757, 916], "x": [60, 93, 99, 100, 101, 110, 120, 121, 139, 157, 160, 162, 166, 173, 246, 253, 257, 260, 274, 283, 361, 375, 377, 378, 379, 398, 404, 406, 407, 420, 422, 426, 428, 432, 439, 460, 463, 491, 501, 509, 511, 518, 521, 532, 533, 534, 541, 547, 548, 556, 562, 572, 609, 614, 618, 634, 668, 673, 677, 796, 824, 881, 884, 912, 938, 954], "y": [60, 93, 120, 121, 139, 160, 162, 166, 173, 246, 253, 257, 274, 283, 352, 361, 377, 378, 398, 406, 426, 428, 439, 495, 511, 518, 534, 547, 562, 572, 609, 618, 634, 668, 673, 778, 916, 954], "df3": [60, 246], "set_tbl_format": 60, "09": [60, 153, 246, 325, 335, 605, 668, 751], "01": [60, 70, 134, 150, 152, 153, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 495, 537, 604, 605, 668, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 916], "02": [60, 70, 116, 150, 152, 153, 219, 246, 324, 325, 331, 332, 333, 340, 341, 342, 350, 351, 354, 356, 358, 452, 495, 537, 572, 604, 605, 668, 746, 747, 749, 750, 753, 754, 755, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 916], "03": [60, 70, 93, 152, 153, 219, 246, 324, 325, 326, 330, 331, 333, 341, 342, 348, 349, 350, 351, 352, 354, 355, 356, 358, 604, 605, 668, 746, 747, 748, 751, 752, 753, 754, 755, 758, 759, 760, 761, 763, 765, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 782, 783, 784], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 99, 100, 110, 215, 218, 219, 246, 395, 409, 525, 572, 641, 643, 668, 739, 833, 850, 954], "easili": [60, 193, 223, 226, 246, 526, 561, 628, 646, 650, 668], "dot": [60, 572, 631, 668, 954], "product": [60, 133, 246, 317, 321, 521, 572, 736, 742, 954], "fill_nul": [60, 142, 246, 495, 572, 598, 647, 668, 916, 954], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 110, 128, 146, 180, 228, 246, 260, 296, 407, 408, 431, 442, 521, 532, 533, 541, 548, 556, 572, 614, 621, 652, 668, 677, 714, 858, 954], "decor": [61, 62, 63, 64, 121, 122, 128, 246, 260, 572, 677, 954], "access": [61, 62, 63, 64, 164, 189, 190, 246, 409, 572, 647, 668], "by_first_letter_of_column_nam": 61, "f": [61, 100, 134, 150, 165, 204, 214, 217, 246, 253, 260, 296, 458, 475, 495, 521, 527, 548, 572, 714, 896, 916], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 470, 474, 895], "slice": [61, 67, 139, 155, 165, 202, 246, 282, 294, 442, 443, 444, 445, 446, 447, 449, 450, 451, 572, 590, 595, 597, 614, 622, 631, 632, 633, 668, 700, 712, 788, 803, 858, 859, 860, 861, 862, 863, 865, 866, 867, 925, 954], "to_seri": [61, 65, 148, 246, 296, 714], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 298, 436, 572, 852, 954], "p": [62, 180, 246, 431, 561, 572, 621, 668], "ceil": [62, 572, 954], "previou": [62, 125, 430, 500, 572, 846, 954], "floor": [62, 572, 954], "nearest": [62, 167, 183, 238, 246, 307, 374, 435, 447, 555, 572, 610, 623, 662, 668, 725, 799, 806, 851, 863, 954], "24": [62, 116, 128, 139, 153, 246, 317, 319, 333, 422, 572, 605, 668, 738, 755, 954], "001": [62, 336, 337, 339, 344, 537, 762, 764, 770], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 110, 111, 115, 168, 204, 246, 260, 387, 522, 527, 543, 561, 572, 586, 592, 593, 596, 597, 598, 599, 600, 601, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 623, 625, 626, 628, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 814, 954], "31": [64, 70, 325, 329, 330, 342, 356, 495, 535, 536, 543, 547, 747, 751, 752, 916], "42": [64, 153, 154, 246, 605, 668, 802, 954], "961": 64, "1764": 64, "4160": 64, "eager": [65, 152, 217, 246, 522, 543, 557, 561, 571, 583, 604, 668], "evalu": [65, 142, 144, 167, 246, 257, 270, 319, 381, 383, 387, 409, 428, 520, 522, 538, 557, 561, 565, 572, 600, 607, 609, 610, 668, 687, 738, 946, 954], "immedi": [65, 436, 522, 557, 561, 572, 852, 954], "arg_tru": [65, 572, 954], "u32": [65, 152, 178, 224, 229, 237, 239, 246, 254, 267, 268, 269, 270, 271, 272, 273, 276, 285, 313, 314, 329, 332, 336, 340, 342, 346, 347, 350, 356, 357, 399, 409, 423, 427, 436, 454, 471, 480, 483, 509, 513, 523, 530, 553, 572, 604, 648, 653, 661, 663, 668, 686, 687, 688, 703, 722, 751, 754, 761, 763, 766, 768, 769, 772, 773, 776, 782, 783, 804, 852, 892, 901, 904, 938, 941, 943, 954], "build": [66, 87], "wa": 66, "compil": [66, 272, 273, 690, 691], "gate": 66, "info": [66, 102, 111, 116, 334, 756], "otherwis": [66, 123, 174, 193, 246, 300, 308, 309, 310, 362, 363, 364, 438, 470, 472, 565, 572, 619, 628, 668, 677, 717, 728, 729, 730, 789, 790, 791, 854, 872, 873, 891, 893, 954], "version": [66, 69, 94, 102, 111, 116, 367, 495, 554, 556, 559, 572, 793, 954], "depend": [66, 116, 260, 272, 273, 415, 436, 521, 540, 543, 572, 690, 691, 852, 954], "host": [66, 99, 104, 108, 112, 114], "git": 66, "lazy_fram": 67, "type_coercion": [67, 590, 595, 597, 622, 631, 632, 633, 668], "predicate_pushdown": [67, 590, 595, 597, 614, 622, 631, 632, 633, 668], "projection_pushdown": [67, 590, 595, 597, 614, 622, 631, 632, 633, 668], "simplify_express": [67, 590, 595, 597, 622, 631, 632, 633, 668], "no_optim": [67, 590, 597, 614, 622, 632, 633, 668], "slice_pushdown": [67, 590, 595, 597, 614, 622, 631, 632, 633, 668], "common_subplan_elimin": [67, 590, 595, 597, 622, 631, 668], "graph": [67, 168, 246, 607, 647, 668], "parallel": [67, 68, 96, 101, 108, 114, 152, 167, 168, 180, 246, 278, 319, 572, 583, 604, 609, 610, 668, 696, 738, 954], "threadpool": [67, 123], "coercion": [67, 439, 572, 590, 595, 597, 622, 631, 632, 633, 668], "optim": [67, 108, 110, 112, 113, 114, 164, 168, 180, 184, 190, 215, 246, 590, 595, 597, 614, 622, 631, 632, 633, 641, 648, 668], "predic": [67, 110, 112, 113, 114, 115, 144, 189, 246, 371, 517, 541, 572, 590, 595, 597, 600, 614, 622, 625, 631, 632, 633, 648, 668, 797, 872, 873, 954], "pushdown": [67, 590, 595, 597, 614, 622, 625, 631, 632, 633, 648, 668, 872, 873, 954], "project": [67, 110, 112, 113, 114, 260, 465, 466, 572, 590, 595, 597, 614, 622, 625, 631, 632, 633, 649, 668], "turn": [67, 99, 100, 110, 515, 572, 590, 595, 597, 614, 622, 632, 633, 668], "off": [67, 99, 100, 110, 515, 572, 590, 595, 597, 614, 622, 632, 633, 668], "Will": [67, 214, 246, 590, 595, 597, 622, 631, 668, 954], "try": [67, 81, 83, 99, 100, 103, 104, 108, 110, 112, 114, 590, 595, 597, 622, 631, 668], "branch": [67, 590, 595, 597, 622, 631, 668], "subplan": [67, 590, 595, 597, 622, 631, 668], "occur": [67, 276, 421, 436, 572, 590, 595, 597, 622, 631, 668, 694, 838, 852, 954], "part": [67, 86, 491, 492, 590, 595, 597, 622, 631, 647, 668, 751, 754, 761, 763, 766, 768, 769, 776, 785, 912, 913], "fashion": [67, 166, 246, 590, 595, 597, 622, 631, 668], "item": [68, 100, 191, 246, 275, 281, 283, 367, 453, 492, 572, 693, 699, 701, 793, 869, 913, 954], "iter": [68, 129, 151, 152, 153, 164, 165, 179, 189, 190, 193, 199, 213, 214, 223, 225, 226, 246, 319, 365, 429, 466, 523, 525, 526, 527, 528, 539, 549, 552, 558, 561, 565, 572, 586, 603, 604, 605, 628, 635, 640, 646, 650, 668, 738, 954], "concatmethod": 68, "vertic": [68, 141, 217, 221, 246, 469, 549, 552, 890], "rechunk": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 141, 246, 572, 676, 726, 839, 954], "aggreg": [68, 99, 100, 108, 146, 152, 170, 171, 172, 175, 177, 181, 182, 183, 200, 201, 217, 220, 226, 227, 230, 232, 246, 254, 371, 401, 407, 429, 442, 443, 444, 445, 446, 447, 449, 450, 451, 515, 532, 533, 534, 541, 546, 549, 552, 556, 562, 572, 604, 614, 615, 616, 617, 620, 623, 636, 637, 644, 650, 651, 654, 656, 668, 858, 859, 860, 862, 865, 866, 867, 954], "concaten": [68, 146, 180, 246, 431, 527, 528, 572, 621, 668, 726, 839, 954], "diagon": [68, 214, 246], "strategi": [68, 99, 119, 120, 121, 122, 143, 152, 166, 167, 176, 246, 260, 296, 370, 572, 599, 604, 609, 610, 668, 714, 796, 954], "vstack": [68, 141, 246], "find": [68, 145, 246, 454, 572, 870, 954], "miss": [68, 99, 100, 110, 142, 246, 298, 362, 363, 364, 376, 382, 389, 391, 559, 572, 598, 668, 789, 790, 791, 945, 954], "stack": [68, 157, 221, 246], "length": [68, 69, 97, 110, 120, 124, 152, 153, 198, 246, 291, 319, 349, 355, 416, 442, 443, 444, 445, 446, 447, 449, 450, 451, 464, 481, 483, 487, 489, 498, 522, 572, 604, 605, 622, 634, 668, 709, 714, 726, 738, 739, 747, 775, 781, 827, 844, 850, 858, 859, 860, 861, 862, 863, 865, 866, 867, 885, 902, 904, 908, 910, 919, 954], "don": [68, 128, 215, 217, 246, 260, 278, 319, 521, 572, 641, 668, 677, 696, 738, 871, 945, 954], "t": [68, 103, 110, 128, 180, 215, 217, 246, 260, 278, 319, 360, 362, 363, 364, 431, 482, 488, 494, 495, 521, 565, 572, 621, 641, 668, 677, 696, 738, 787, 789, 790, 791, 871, 903, 909, 915, 916, 945, 954], "sure": [68, 86, 91, 99, 100, 101, 104, 108, 184, 246, 522], "contigu": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 184, 246], "relev": 68, "execut": [68, 168, 246, 278, 587, 614, 622, 668, 696], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 484, 518, 566, 572, 739, 804, 850, 905, 948, 954], "label": [69, 442, 443, 444, 445, 446, 447, 449, 450, 451, 572, 622, 668, 739, 850, 858, 859, 860, 861, 862, 863, 865, 866, 867, 954], "break_point_label": [69, 739, 850, 954], "break_point": [69, 739, 804, 850, 954], "category_label": [69, 739, 850, 954], "discret": [69, 277, 320, 360, 572, 695, 739, 741, 787, 804, 850, 954], "deprec": [69, 94, 367, 495, 554, 559, 572, 668, 793, 954], "sinc": [69, 94, 102, 111, 331, 367, 495, 543, 554, 559, 572, 753, 793, 954], "assign": [69, 120, 152, 246, 436, 491, 492, 572, 604, 668, 739, 833, 850, 852, 912, 913, 954], "breakpoint": [69, 739, 850, 954], "inf": [69, 121, 122, 266, 385, 388, 511, 572, 683, 739, 804, 811, 815, 832, 846, 850, 942, 954], "interv": [70, 152, 153, 219, 246, 334, 349, 350, 355, 383, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 668, 751, 753, 754, 756, 761, 763, 766, 768, 769, 772, 773, 775, 776, 778, 780, 781, 782, 783, 785, 807, 954], "timedelta": [70, 152, 153, 219, 246, 329, 331, 332, 335, 340, 342, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 668, 758, 760, 765, 771, 775, 781, 842, 843, 954], "1d": [70, 152, 153, 167, 219, 246, 324, 333, 341, 345, 349, 355, 358, 443, 444, 445, 446, 447, 449, 450, 451, 547, 572, 604, 605, 610, 668, 746, 753, 755, 758, 759, 760, 765, 767, 771, 775, 778, 780, 781, 783, 784], "closedinterv": [70, 152, 153, 246, 383, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 668, 807, 954], "lower": [70, 110, 152, 183, 238, 246, 308, 310, 383, 405, 435, 438, 447, 522, 555, 572, 597, 604, 623, 662, 668, 730, 807, 832, 851, 854, 863, 942, 954], "bound": [70, 99, 100, 139, 152, 246, 281, 295, 308, 309, 310, 383, 405, 514, 522, 572, 604, 668, 699, 713, 729, 730, 788, 807, 832, 942, 954], "upper": [70, 99, 100, 139, 152, 246, 308, 309, 383, 514, 522, 572, 604, 668, 729, 788, 807, 832, 942, 954], "period": [70, 152, 153, 195, 196, 246, 290, 349, 355, 362, 363, 364, 430, 456, 457, 572, 604, 605, 629, 630, 668, 708, 775, 781, 789, 790, 791, 846, 876, 877, 954], "like": [70, 87, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 160, 162, 166, 246, 278, 418, 436, 549, 552, 562, 572, 597, 624, 668, 696, 852, 954], "durat": [70, 167, 219, 246, 330, 333, 337, 339, 341, 344, 351, 358, 509, 572, 610, 668, 752, 755, 762, 764, 767, 770, 777, 784, 938, 954], "3d12h4m25": [70, 152, 153, 167, 219, 246, 349, 355, 604, 605, 610, 668, 775, 781], "hour": [70, 152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 536, 537, 572, 604, 605, 610, 668, 771, 775, 781], "minut": [70, 152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 536, 537, 572, 604, 605, 610, 668, 771, 775, 781], "tempor": [70, 152, 153, 164, 190, 206, 246, 383, 443, 444, 445, 446, 447, 449, 450, 451, 572, 583, 604, 605, 668, 807, 822, 954], "window": [70, 152, 153, 246, 319, 349, 355, 362, 363, 364, 429, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 527, 572, 604, 605, 668, 738, 775, 781, 789, 790, 791, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 954], "timezon": [70, 495, 916], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 152, 153, 167, 219, 246, 326, 330, 345, 348, 349, 352, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 748, 752, 768, 771, 772, 773, 774, 775, 781, 782], "dtrang": 70, "1985": 70, "04": [70, 115, 152, 219, 246, 325, 326, 329, 330, 333, 340, 341, 342, 346, 348, 349, 350, 351, 352, 356, 357, 358, 495, 537, 604, 668, 748, 752, 755, 761, 763, 766, 767, 768, 769, 773, 774, 776, 777, 778, 782, 783, 784, 916], "05": [70, 115, 117, 118, 167, 219, 246, 325, 326, 330, 348, 350, 352, 610, 668, 747, 748, 749, 750, 751, 752, 774, 775, 779, 781, 783], "07": [70, 325, 329, 346, 348, 349, 355, 357, 495, 543, 747, 751, 783, 916], "08": [70, 117, 118, 153, 246, 325, 349, 495, 537, 605, 668, 775, 781, 916], "america": [70, 774], "new_york": [70, 774], "\u03bc": [70, 93, 152, 153, 167, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 495, 543, 604, 605, 610, 668, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 916], "est": [70, 774], "combin": [70, 81, 83, 152, 153, 154, 167, 219, 246, 257, 270, 355, 428, 482, 488, 494, 572, 604, 605, 610, 631, 668, 781, 903, 909, 915], "offset_bi": 70, "get": [70, 95, 105, 109, 123, 129, 132, 138, 148, 149, 152, 153, 155, 156, 160, 162, 169, 176, 189, 192, 194, 198, 202, 213, 222, 231, 240, 246, 254, 267, 268, 269, 271, 280, 284, 285, 297, 314, 315, 316, 317, 318, 331, 372, 380, 384, 386, 394, 397, 400, 410, 411, 412, 415, 417, 419, 424, 425, 435, 464, 468, 480, 483, 503, 504, 512, 516, 540, 545, 549, 550, 551, 552, 560, 563, 564, 572, 586, 591, 594, 601, 604, 605, 606, 611, 613, 627, 634, 638, 640, 645, 655, 664, 668, 684, 685, 686, 687, 688, 698, 702, 703, 715, 726, 734, 735, 736, 737, 753, 800, 803, 807, 809, 812, 823, 828, 834, 836, 837, 839, 842, 843, 847, 848, 851, 885, 888, 901, 904, 925, 931, 932, 940, 944, 945, 954], "last": [70, 129, 155, 167, 169, 181, 199, 202, 213, 215, 240, 246, 269, 281, 294, 319, 329, 346, 356, 465, 492, 504, 563, 572, 586, 610, 635, 638, 640, 641, 664, 668, 686, 699, 712, 738, 751, 772, 782, 803, 828, 913, 925, 954], "month": [70, 152, 153, 167, 219, 246, 329, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 535, 536, 572, 604, 605, 610, 668, 751, 771, 775, 781], "28": [70, 205, 246, 253, 358, 572, 784], "disabl": [71, 164, 246], "equal": [71, 99, 100, 110, 117, 118, 147, 152, 167, 174, 246, 361, 377, 398, 442, 443, 444, 445, 446, 447, 449, 450, 451, 480, 481, 487, 498, 522, 572, 604, 610, 619, 668, 858, 859, 860, 861, 862, 863, 865, 866, 867, 871, 901, 902, 908, 919, 954], "encount": [72, 152, 246, 424, 425, 478, 479, 529, 532, 541, 559, 572, 604, 668, 842, 843, 899, 900, 954], "duplic": [75, 160, 166, 167, 215, 246, 384, 572, 609, 610, 641, 668, 809, 954], "certain": [76, 102, 111, 158, 219, 246, 526, 590, 622, 632, 633, 668, 954], "least": [78, 121, 430, 515, 572, 846, 943, 954], "unexpect": [79, 246], "caus": [79, 87, 99, 100, 110, 127, 141, 246, 676, 954], "panic": 79, "mismatch": 81, "incompat": 83, "pa": [86, 115], "chunkedarrai": [86, 176, 246, 742, 954], "recordbatch": [86, 165, 246], "schemadefinit": [86, 88, 89, 90, 92, 246, 668], "schema_overrid": [86, 88, 89, 90, 91, 92, 165, 246, 668], "copi": [86, 87, 127, 130, 131, 165, 204, 210, 223, 246, 368, 498, 572, 588, 589, 646, 668, 673, 727, 731, 744, 794, 919, 931, 936, 937, 954], "closest": 86, "pair": [86, 88, 89, 90, 92, 185, 246, 625, 668], "declar": [86, 88, 89, 90, 92, 246, 668], "sever": [86, 88, 89, 90, 92, 246, 668], "wai": [86, 88, 89, 90, 92, 135, 151, 165, 180, 199, 226, 246, 429, 431, 466, 526, 572, 592, 603, 621, 635, 650, 668], "As": [86, 88, 89, 90, 92, 103, 246, 557, 668], "auto": [86, 88, 89, 90, 92, 108, 114, 214, 246, 495, 668], "automat": [86, 88, 89, 90, 92, 93, 99, 100, 101, 110, 121, 122, 123, 193, 223, 246, 409, 482, 488, 494, 495, 572, 628, 646, 668, 833, 903, 909, 915, 916, 954], "equival": [86, 88, 89, 90, 92, 102, 163, 177, 246, 253, 257, 361, 375, 377, 378, 398, 406, 420, 422, 426, 428, 432, 483, 501, 511, 518, 572, 668, 825, 904, 917, 918, 954], "form": [86, 88, 89, 90, 92, 164, 190, 217, 246, 430, 572, 668, 846, 954], "them": [86, 88, 89, 90, 92, 110, 141, 152, 153, 167, 174, 219, 246, 283, 383, 424, 425, 527, 572, 604, 605, 610, 619, 668, 676, 701, 842, 843, 954], "dimens": [86, 88, 90, 92, 246, 440, 572, 668, 856, 954], "construct": [86, 88, 89, 90, 91, 92, 246, 409, 572, 602, 624, 668, 954], "allow_copi": [87, 127], "interchang": [87, 127], "protocol": [87, 101, 127], "__dataframe__": 87, "convers": [87, 127, 165, 210, 246, 495, 583, 916, 935, 936, 937, 954], "detail": [87, 101, 117, 118, 127, 246, 668, 962], "latest": [87, 102, 111, 127, 376, 416, 572], "index": [87, 91, 95, 101, 116, 127, 145, 152, 153, 158, 167, 181, 187, 189, 198, 211, 219, 224, 246, 254, 267, 268, 269, 271, 272, 273, 281, 291, 295, 345, 443, 444, 445, 446, 447, 449, 450, 451, 454, 464, 476, 489, 505, 572, 604, 605, 610, 634, 648, 668, 684, 685, 686, 687, 688, 690, 691, 699, 709, 713, 771, 844, 870, 873, 885, 897, 910, 926, 954], "throw": [87, 305, 478, 479, 572, 722, 899, 900, 954], "runtimeerror": 87, "from_panda": [87, 103], "from_arrow": 87, "effici": [87, 165, 246], "map": [88, 89, 99, 100, 104, 105, 108, 109, 110, 112, 128, 138, 164, 185, 189, 190, 205, 246, 349, 355, 408, 409, 515, 521, 572, 594, 625, 668, 775, 781, 833, 954], "clone": [88, 89, 90, 91, 92, 130, 209, 210, 246, 588, 668, 727, 935, 936, 937, 945, 954], "dimension": [88, 90, 92, 246, 668, 954], "infer_schema_length": [89, 92, 99, 100, 103, 110, 113, 246, 668], "NOT": [89, 117, 118], "typic": [89, 128, 246, 677, 954], "clearer": 89, "load": [89, 91, 102, 111, 246, 583, 606, 613, 668], "want": [89, 128, 141, 177, 246, 260, 308, 309, 310, 371, 407, 409, 443, 444, 445, 446, 447, 449, 450, 451, 532, 541, 572, 590, 606, 613, 668, 676, 677, 728, 729, 730, 936, 954], "_partial_": [89, 246, 668], "omit": [89, 93, 120, 121, 122, 177, 246], "mani": [89, 92, 101, 141, 246, 676, 954], "scan": [89, 92, 99, 100, 108, 110, 111, 112, 113, 114, 115, 597, 606, 613, 668], "slow": [89, 92, 99, 100, 110, 260, 319, 572, 738, 954], "partial": 89, "present": [89, 117, 121, 387, 572, 945, 954], "np": [90, 144, 246, 505, 572, 668, 811, 815, 816, 817, 858, 926, 954], "ndarrai": [90, 144, 209, 246, 505, 572, 668, 742, 870, 873, 926, 936, 954], "numpi": [90, 116, 133, 209, 210, 246, 424, 425, 572, 668, 811, 815, 816, 817, 842, 843, 858, 870, 936, 937, 945, 954], "columnar": [90, 92, 164, 190, 246], "interpret": [90, 92, 99, 100, 110, 246, 668], "yield": [90, 92, 99, 100, 110, 139, 141, 214, 246, 668, 676, 788, 954], "conclus": [90, 92, 246, 668], "nan_to_nul": [91, 246, 668, 954], "include_index": 91, "panda": [91, 103, 116, 210, 246, 509, 572, 668, 937, 938, 954], "datetimeindex": [91, 742, 954], "instal": [91, 99, 100, 101, 104, 108, 116, 133, 209, 210, 246, 631, 668, 937, 954], "nan": [91, 117, 118, 121, 127, 142, 210, 246, 322, 323, 361, 369, 377, 378, 382, 389, 391, 392, 393, 398, 406, 410, 419, 424, 425, 426, 511, 529, 559, 572, 598, 668, 679, 683, 743, 795, 816, 817, 842, 843, 858, 937, 954], "convert": [91, 94, 102, 103, 111, 127, 205, 206, 207, 208, 209, 212, 246, 296, 326, 484, 495, 668, 714, 748, 905, 916, 923, 934, 935, 936, 937, 945, 954], "pd": [91, 103, 509, 572, 938, 954], "pd_df": 91, "pd_seri": 91, "tbl": [93, 96, 100], "reconstruct": 93, "repr": [93, 121, 122], "need": [93, 99, 100, 103, 117, 118, 152, 153, 197, 209, 246, 296, 409, 458, 480, 572, 604, 605, 668, 878, 901, 954], "trim": 93, "whitespac": [93, 482, 488, 494, 903, 909, 915], "prompt": 93, "extract": [93, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 350, 351, 356, 357, 359, 431, 477, 478, 479, 572, 749, 750, 751, 752, 754, 755, 757, 761, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 776, 777, 779, 782, 783, 785, 898, 899, 900], "to_init_repr": [93, 246, 954], "handl": [93, 99, 100, 110, 115, 277, 320, 498, 572, 695, 741, 919, 954], "truncat": [93, 152, 246, 604, 622, 668], "identifi": [93, 173, 179, 215, 246, 618, 641, 668], "compound": 93, "struct": [93, 177, 193, 212, 216, 223, 246, 296, 409, 478, 491, 492, 515, 532, 533, 534, 548, 572, 628, 642, 646, 668, 714, 899, 912, 913], "neither": [93, 191, 246], "though": 93, "plan": [93, 167, 168, 246, 587, 595, 602, 609, 610, 624, 631, 649, 668], "source_ac": 93, "source_cha": 93, "ident": [93, 130, 131, 246, 588, 589, 668, 727, 731, 954], "timestamp": [93, 348, 543, 774], "tor_id": 93, "nnel_id": 93, "asia": [93, 749, 750, 779], "tokyo": 93, "123456780": 93, "9876543210": 93, "56": [93, 507, 572], "59": [93, 116, 325, 340, 350, 536, 747, 766, 776], "663053": 93, "jst": 93, "803065983": 93, "2055938745": 93, "38": [93, 121], "18": [93, 153, 246, 318, 349, 355, 358, 382, 395, 572, 605, 622, 668, 784], "050545": 93, "source_actor_id": 93, "source_channel_id": 93, "dummi": [94, 207, 246, 932, 954], "to_dummi": [94, 246, 954], "foo_1": [94, 207, 246], "foo_2": [94, 207, 246], "bar_3": [94, 207, 246], "bar_4": [94, 207, 246], "ham_a": [94, 207, 246], "ham_b": [94, 207, 246], "datatypeclass": 95, "uint32": [95, 116, 139, 246, 269, 272, 273, 285, 329, 332, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 439, 471, 480, 483, 505, 509, 572, 687, 690, 691, 703, 722, 751, 754, 761, 763, 766, 768, 769, 772, 773, 776, 782, 783, 788, 871, 892, 938, 954], "regular": [95, 164, 189, 190, 219, 246, 365, 526, 539, 549, 552, 562, 572], "uint64": [95, 154, 246, 272, 273, 379, 438, 572, 690, 691, 802, 854, 954], "bigidx": 95, "read": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 407, 565, 572, 597, 602, 624, 668, 676, 954], "batch": [96, 100, 113, 614, 668], "over": [96, 99, 100, 102, 110, 121, 128, 141, 164, 165, 189, 190, 214, 225, 228, 246, 260, 319, 370, 382, 407, 408, 442, 443, 444, 445, 446, 447, 449, 450, 451, 521, 532, 533, 541, 548, 556, 572, 652, 676, 677, 738, 858, 859, 860, 862, 866, 954], "fetch": [96, 110, 168, 246, 588, 590, 606, 613, 668], "ideal": 96, "read_csv_batch": [96, 584], "tpch": [96, 100], "tables_scale_100": [96, 100], "lineitem": [96, 100, 101], "try_parse_d": [96, 99, 100, 110], "In": [97, 102, 111, 114, 121, 122, 124, 128, 139, 141, 152, 153, 177, 246, 260, 415, 572, 604, 605, 668, 676, 788, 853, 954], "probabl": [97, 124, 360, 572, 787, 954], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 165, 246, 597, 668], "accept": [98, 99, 100, 102, 104, 108, 129, 140, 151, 193, 199, 213, 223, 226, 246, 253, 365, 383, 429, 466, 518, 523, 525, 526, 527, 528, 539, 549, 552, 561, 572, 586, 596, 603, 628, 635, 640, 646, 650, 668, 807, 954], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 329, 331, 332, 334, 335, 340, 342, 346, 347, 349, 350, 354, 355, 356, 357, 359, 746, 748, 751, 753, 754, 756, 761, 763, 766, 768, 769, 772, 773, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785], "textio": 99, "new_column": [99, 100, 103, 110, 186, 246], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "storage_opt": [99, 102, 104, 108, 111, 112, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 167, 246, 278, 484, 547, 565, 610, 614, 668, 677, 696, 804, 850, 905, 954], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 217, 246, 253, 260, 365, 458, 539, 572, 625, 668, 871, 936, 954], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "first": [99, 100, 103, 110, 113, 128, 150, 152, 155, 167, 169, 176, 180, 181, 202, 208, 214, 215, 219, 231, 246, 269, 271, 278, 281, 282, 319, 345, 349, 380, 386, 400, 409, 431, 454, 466, 476, 478, 479, 485, 486, 525, 532, 541, 545, 565, 572, 590, 604, 606, 610, 613, 621, 641, 647, 655, 668, 686, 696, 699, 700, 714, 738, 740, 771, 775, 803, 812, 828, 833, 870, 897, 899, 900, 906, 907, 925, 934, 954], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 165, 246], "shorter": [99, 100], "remain": [99, 100, 110, 139, 246, 491, 492, 614, 668, 788, 912, 913, 954], "comment": [99, 100, 110], "instanc": [99, 100, 110, 121, 122, 141, 146, 246, 296, 305, 416, 443, 444, 445, 446, 447, 449, 450, 451, 532, 541, 572, 614, 648, 668, 676, 722, 954], "special": [99, 100, 110, 677, 954], "escap": [99, 100, 110], "dure": [99, 100, 110, 125, 141, 246, 676, 954], "would": [99, 100, 110, 269, 281, 415, 436, 523, 572, 686, 699, 852, 936, 954], "prefer": [99, 100, 102, 110, 128, 141, 164, 189, 190, 228, 246, 260, 442, 572, 652, 668, 676, 677, 858, 954], "treat": [99, 100, 110, 470, 485, 486, 891, 906, 907], "10000": [99, 165, 246, 498], "check": [99, 100, 110, 117, 118, 147, 161, 163, 246, 256, 258, 275, 299, 302, 303, 383, 387, 470, 474, 493, 572, 614, 668, 674, 675, 693, 716, 719, 720, 808, 810, 813, 814, 820, 821, 822, 824, 825, 871, 891, 895, 914, 954], "might": [99, 100, 110, 123, 260, 415, 513, 572, 937, 954], "issu": [99, 100, 103, 110, 317, 318, 503, 572, 736, 737, 924, 954], "iso8601": [99, 100, 110], "alwai": [99, 128, 228, 246, 415, 565, 614, 652, 668, 677, 954], "physic": [99, 100, 167, 246, 306, 509, 572, 587, 609, 610, 668, 724, 938, 954], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 150, 167, 246, 259, 305, 481, 487, 572, 610, 668, 722, 902, 908, 954], "buffer": [99, 100, 139, 164, 246, 788, 954], "modifi": [99, 100, 110, 123, 125, 157, 164, 221, 246, 270, 348, 358, 572, 774, 784, 855, 917, 918, 954], "lossi": [99, 100, 110], "decod": [99, 100], "im": [99, 100], "usag": [99, 100, 110, 121, 122, 197, 246, 879, 954], "expens": [99, 100, 108, 110, 113, 114, 128, 164, 189, 190, 214, 215, 246, 260, 572, 641, 668, 676, 677, 954], "nativ": [99, 104, 108, 128, 164, 190, 206, 228, 246, 260, 572, 577, 652, 677, 954], "parser": 99, "even": 99, "regard": [99, 529, 559], "sens": [99, 104, 108, 112, 114, 152, 153, 174, 219, 246, 604, 605, 619, 668], "particular": [99, 104, 108, 112, 114, 139, 246, 788, 954], "storag": [99, 102, 104, 108, 111, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 217, 246, 677, 954], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 152, 153, 198, 219, 224, 246, 291, 345, 349, 355, 464, 489, 495, 572, 604, 605, 634, 648, 668, 709, 771, 775, 781, 885, 910, 916, 954], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 228, 246, 463, 572, 652, 884, 954], "estim": [99, 100, 139, 246, 363, 364, 396, 572, 788, 790, 791, 826, 954], "alloc": [99, 100, 139, 184, 246, 788, 954], "scan_csv": [99, 100, 632, 633, 668], "lazili": [99, 100, 110, 111, 112, 113, 114, 409, 572], "glob": [99, 100, 110, 112, 113, 114], "pattern": [99, 100, 110, 112, 113, 114, 164, 246, 414, 470, 471, 476, 477, 485, 486, 872, 873, 891, 892, 897, 898, 906, 907, 954], "store": [99, 108, 141, 164, 190, 246, 676, 954], "continu": [99, 108, 463, 572, 884, 954], "benchmark": [99, 108], "50000": 100, "batchedcsvread": [100, 583], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "while": [100, 102, 103, 111, 121, 122, 164, 173, 214, 246, 618, 668], "df_current_batch": 100, "concat": [100, 726, 839, 954], "partition_df": 100, "partition_bi": [100, 165, 246], "as_dict": [100, 179, 246], "fh": 100, "write_csv": [100, 110, 246], "els": [100, 565], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "partit": [101, 102, 108, 111, 115, 165, 179, 246], "backend": [101, 102, 111], "transfer": 101, "document": [101, 103, 479, 495, 900, 916], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": 101, "doc": [101, 133, 246], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "sqlite": 101, "develop": [101, 121, 122], "flight_sql": 101, "further": [101, 937, 954], "wide": [101, 150, 173, 217, 246, 618, 668], "adopt": 101, "significantli": 101, "better": [101, 128, 228, 246, 260, 515, 572, 652, 872, 873, 954], "driver": 101, "cpp": 101, "partition_col": 101, "explicitli": [101, 120, 121, 409, 561, 572], "delta_table_opt": [102, 111], "lake": [102, 111, 583], "root": [102, 111, 395, 408, 417, 433, 467, 502, 571, 572, 887, 954], "filesystem": [102, 111], "absolut": [102, 111, 117, 118, 189, 246, 252, 362, 363, 364, 572, 672, 789, 790, 791, 954], "gc": [102, 111], "azur": [102, 111], "deltalak": [102, 111, 116], "cloud": [102, 111, 115], "configur": [102, 111], "authent": [102, 111], "keyword": [102, 108, 111, 133, 180, 189, 193, 223, 226, 246, 431, 558, 561, 572, 621, 628, 646, 650, 668, 954], "table_path": [102, 111], "avoid": 102, "year": [102, 111, 152, 153, 167, 219, 246, 334, 335, 345, 346, 349, 355, 356, 443, 444, 445, 446, 447, 449, 450, 451, 535, 536, 572, 604, 605, 610, 668, 756, 757, 771, 772, 775, 781, 782], "2021": [102, 111, 134, 150, 152, 219, 246, 495, 547, 604, 668, 749, 750, 757, 779, 822, 916, 954], "aw": [102, 111], "bucket": [102, 111, 349, 355, 775, 781, 804, 954], "aws_access_key_id": [102, 111], "the_aws_access_key_id": [102, 111], "aws_secret_access_kei": [102, 111], "the_aws_secret_access_kei": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 128, 246], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "skip_empty_lin": 103, "my": [103, 115], "datasheet": 103, "correct": [103, 363, 364, 396, 448, 463, 572, 614, 668, 790, 791, 826, 864, 884, 954], "look": [103, 296, 299, 716], "fix": [103, 120, 121, 358, 443, 444, 445, 446, 447, 449, 450, 451, 572, 784], "whole": [103, 465, 466, 476, 572, 668, 897], "With": [103, 128, 246, 260, 572, 677, 954], "1000": [103, 139, 208, 246, 336, 337, 498, 762, 934, 954], "spreadsheet": [103, 181, 246], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": [103, 494, 915], "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "repeat": [104, 112, 437, 439, 572], "o": [104, 112, 304, 319, 475, 510, 572, 721, 738, 896, 939, 954], "page": [104, 108, 112, 114, 246, 572, 583, 633, 668, 954], "give": [104, 108, 112, 113, 114, 173, 215, 246, 331, 396, 439, 511, 572, 583, 618, 641, 668, 753, 826, 954], "That": [104, 614, 668], "filenam": 104, "my_fil": 104, "write_ipc": [104, 246], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 164, 190, 206, 246, 495, 916], "stabl": [108, 133, 191, 246, 404, 572, 618, 668], "row_group": [108, 114], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 374, 572, 799, 954], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 141, 246, 676, 954], "headerless": 110, "unlik": 110, "fewer": 110, "my_long_fil": 110, "doesn": [110, 360, 572, 787, 945, 954], "thing": [110, 519, 540], "less": [110, 167, 246, 398, 406, 481, 487, 492, 498, 572, 610, 668, 902, 908, 913, 919], "limit": [110, 143, 246, 298, 308, 309, 310, 370, 376, 572, 599, 606, 633, 668, 728, 729, 730, 796, 954], "breezah": 110, "languag": [110, 152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 771, 775, 781], "hard": [110, 614, 668], "mydf": 110, "lambda": [110, 128, 146, 180, 228, 246, 260, 296, 362, 363, 364, 407, 408, 442, 521, 532, 533, 534, 541, 548, 556, 562, 572, 614, 621, 652, 668, 677, 714, 789, 790, 791, 954], "simpli": [110, 532, 541], "idx": [110, 152, 165, 246, 296, 604, 668, 714, 873, 954], "uint16": [110, 317, 318, 503, 572, 736, 737, 924, 954], "u16": 110, "aws_region": 111, "eu": 111, "central": [111, 396, 463, 572, 826, 884, 954], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "1970": 115, "stdout": [116, 150, 246], "13": [116, 130, 131, 142, 143, 149, 153, 158, 168, 176, 223, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 442, 444, 527, 532, 541, 564, 572, 588, 589, 598, 599, 605, 612, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 677, 775, 781, 782, 954], "platform": 116, "maco": 116, "arm64": 116, "arm": 116, "64bit": [116, 438, 572, 854, 954], "main": 116, "feb": 116, "clang": 116, "14": [116, 128, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 335, 382, 572, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 775], "1400": 116, "29": 116, "202": 116, "2_alpha": 116, "detect": 116, "matplotlib": [116, 622, 631, 668], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 147, 246, 361, 377, 378, 398, 406, 426, 520, 572, 871, 954], "exactli": [117, 118, 121, 122, 491, 492, 879, 912, 913, 954], "toler": [117, 118, 167, 246, 610, 668], "inexact": [117, 118], "assert": [117, 118, 120, 121, 122, 153, 246, 583, 605, 668, 801, 954], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 146, 246, 937, 946, 954], "searchstrategi": [119, 121, 122], "null_prob": [119, 121, 122], "percentag": [119, 121, 122, 430, 572, 846, 954], "chanc": [119, 121, 122], "flag": [119, 455, 572, 595, 614, 668, 874, 954], "hypothesi": [119, 120, 121, 122, 962], "sampled_from": 119, "unique_small_int": 119, "ccy": 119, "gbp": 119, "eur": [119, 134, 150, 246], "jpy": 119, "min_col": [120, 121], "max_col": [120, 121], "suitabl": [120, 128, 246, 260, 454, 572, 677, 870, 954], "standalon": [120, 121], "itself": [120, 612, 668], "mincol": 120, "exact": [120, 121, 122, 197, 246, 495, 511, 572, 916], "especi": 120, "punctuat": 120, "test_special_char_colname_init": 120, "test_unique_xyz": 120, "assert_someth": 120, "min_siz": [121, 122], "max_siz": [121, 122], "include_col": 121, "allow_infin": [121, 122], "allowed_dtyp": [121, 122], "excluded_dtyp": [121, 122], "describ": [121, 150, 246, 954], "desir": 121, "ignor": [121, 122, 171, 201, 246, 277, 320, 348, 362, 363, 364, 424, 425, 572, 695, 741, 774, 789, 790, 791, 842, 843, 954], "n_chunk": [121, 122, 246, 954], "randomis": 121, "onto": 121, "independ": [121, 122], "either": [121, 153, 168, 171, 179, 189, 201, 246, 523, 561, 605, 612, 668], "pct": 121, "preced": 121, "disallow": [121, 122], "exclud": [121, 122, 315, 318, 383, 526, 559, 572, 807, 822, 954], "deploi": [121, 122], "characterist": [121, 122], "concret": [121, 122], "test_repr": [121, 122], "isinst": [121, 122, 246], "known": [121, 652], "df_strategi": 121, "15836": 121, "1755e": 121, "575050513": 121, "constructor": 122, "max_data_s": 122, "54666": 122, "6414": 122, "63290": 122, "polars_max_thread": 123, "behind": 123, "lock": 123, "reason": 123, "low": 123, "pyspark": 123, "udf": [123, 128, 180, 228, 246, 260, 431, 521, 572, 621, 652, 668, 677, 954], "similar": [123, 146, 167, 246, 429, 565, 572, 610, 668], "recommend": [123, 164, 180, 246], "scope": 125, "lifetim": 125, "initi": [125, 532, 541, 565], "whatev": 125, "were": 125, "enter": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 210, 246, 937, 954], "propag": [127, 171, 201, 246, 424, 425, 572, 842, 843, 954], "inference_s": [128, 246], "256": [128, 246, 846, 954], "user": [128, 180, 228, 246, 260, 431, 455, 521, 572, 621, 652, 668, 677, 874, 954], "logic": [128, 228, 246, 257, 428, 509, 518, 572, 602, 609, 624, 649, 652, 668, 677, 938, 954], "almost": [128, 228, 246, 652, 677, 954], "_significantly_": [128, 228, 246, 652, 677, 954], "intens": [128, 228, 246, 652, 677, 954], "becaus": [128, 139, 152, 168, 217, 228, 246, 278, 604, 652, 668, 677, 696, 788, 954], "forc": [128, 167, 228, 246, 609, 610, 652, 668, 677, 954], "materi": [128, 228, 246, 622, 652, 668, 677, 954], "parallelis": [128, 228, 246, 652, 677, 954], "optimis": [128, 228, 246, 652, 668, 677, 872, 873, 954], "achiev": [128, 228, 246, 260, 572, 652, 677, 954], "best": [128, 228, 246, 260, 572, 652, 677, 954], "tri": [128, 246], "arbitrarili": [128, 246], "rearrang": [128, 246], "preserv": [128, 210, 246, 460, 572, 881, 937, 954], "lru_cach": [128, 246, 260, 572, 677, 954], "magnitud": [128, 246, 260, 572, 677, 954], "speedup": [128, 164, 246, 260, 572, 677, 954], "column_1": [128, 214, 246], "scalar": [128, 163, 246, 454, 521, 547, 572, 825, 870, 954], "k": [129, 213, 246, 304, 306, 396, 510, 572, 586, 640, 668, 721, 724, 826, 939, 954], "intoexpr": [129, 151, 152, 153, 193, 199, 213, 223, 226, 246, 383, 429, 466, 523, 525, 527, 528, 532, 541, 549, 552, 558, 561, 565, 572, 586, 603, 604, 605, 628, 635, 640, 650, 668, 807, 954], "nulls_last": [129, 199, 213, 246, 269, 465, 572, 586, 635, 640, 668, 686, 954], "smallest": [129, 213, 246, 304, 572, 586, 640, 668, 721, 954], "largest": [129, 213, 246, 510, 572, 586, 640, 668, 939, 954], "top": [129, 213, 246, 586, 640, 668], "top_k": [129, 246, 304, 572, 586, 668, 721, 954], "cheap": [130, 131, 246, 588, 589, 668, 676, 727, 731, 954], "deepcopi": [130, 131, 246, 588, 589, 668, 727, 731, 954], "clear": [131, 246, 589, 668, 731, 954], "properti": [132, 138, 156, 192, 194, 222, 246, 583, 591, 594, 627, 645, 668], "appl": [132, 157, 166, 185, 187, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 433, 441, 474, 493, 502, 572, 609, 625, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 895, 914], "banana": [132, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 433, 441, 502, 572, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663], "pearson": [133, 246, 396, 463, 529, 554, 572, 826, 884, 954], "correl": [133, 246, 529, 554, 559], "coeffici": [133, 246, 463, 572, 884, 954], "corrcoef": [133, 246], "summari": [134, 246, 740, 954], "glimps": [134, 155, 246], "usd": [134, 150, 246], "2020": [134, 150, 153, 246, 326, 330, 333, 336, 337, 339, 341, 344, 348, 351, 352, 495, 605, 668, 748, 752, 755, 762, 764, 767, 770, 774, 777, 916], "null_count": [134, 137, 246, 319, 572, 738, 740, 954], "266667": [134, 246], "666667": [134, 171, 220, 234, 246, 362, 572, 644, 658, 668], "std": [134, 246, 442, 572, 668, 740, 865, 954], "101514": [134, 246], "707107": [134, 246, 363, 572, 790, 954], "57735": [134, 246], "median": [134, 181, 246, 445, 572, 647, 668, 740, 861, 954], "more_column": [135, 140, 216, 246, 365, 539, 572, 592, 596, 642, 668], "Or": [135, 151, 152, 153, 167, 199, 219, 226, 246, 429, 466, 526, 565, 572, 592, 603, 604, 605, 610, 635, 650, 668], "subset": [137, 177, 215, 246, 593, 641, 668], "snippet": [137, 246, 593, 668], "is_nul": [137, 246, 572, 593, 668, 954], "sizeunit": [139, 246, 788, 954], "heap": [139, 246, 788, 954], "its": [139, 246, 325, 349, 355, 466, 572, 747, 775, 781, 788, 954], "bitmap": [139, 246, 788, 954], "therefor": [139, 246, 296, 565, 788, 954], "structarrai": [139, 246, 788, 954], "constant": [139, 153, 246, 368, 572, 605, 668, 788, 794, 954], "unchang": [139, 246, 509, 572, 614, 652, 668, 788, 938, 954], "capac": [139, 197, 246, 788, 879, 954], "ffi": [139, 246, 788, 954], "kb": [139, 246, 788, 954], "mb": [139, 246, 788, 954], "gb": [139, 246, 788, 954], "tb": [139, 246, 788, 954], "revers": [139, 246, 314, 315, 316, 317, 318, 408, 433, 502, 572, 668, 734, 735, 736, 737, 954], "1_000_000": [139, 246, 788, 954], "25888898": [139, 246], "689577102661133": [139, 246], "long": [140, 173, 217, 246, 596, 618, 668], "letter": [140, 231, 240, 246, 365, 539, 572, 596, 655, 664, 668], "thu": [141, 246, 529, 559, 676, 954], "faster": [141, 217, 246, 260, 442, 483, 513, 572, 632, 633, 668, 676, 677, 858, 904, 954], "onlin": [141, 246, 676, 954], "rerun": [141, 246, 676, 954], "fill_valu": [142, 196, 217, 246, 457, 572, 630, 668, 877, 954], "Not": [142, 246, 389, 391, 409, 572, 598, 668], "To": [142, 246, 322, 323, 370, 549, 552, 562, 572, 598, 668], "fillnullstrategi": [143, 246, 370, 572, 599, 668, 796, 954], "matches_supertyp": [143, 246, 599, 668], "forward": [143, 167, 246, 370, 376, 572, 599, 610, 668, 796, 954], "consecut": [143, 246, 298, 370, 376, 469, 572, 599, 668, 796, 890, 954], "supertyp": [143, 246, 259, 572, 599, 668], "fill_nan": [143, 246, 572, 668, 954], "OR": [144, 246, 520, 600, 668], "reduct": [146, 246], "supercast": [146, 246], "parent": [146, 246], "rule": [146, 246, 352, 778], "arithmet": [146, 246], "zip_with": [146, 246, 954], "foo11": [146, 246], "bar22": [146, 246], "null_equ": [147, 246, 871, 954], "retriev": [148, 246, 272, 273, 499, 690, 691, 920], "return_as_str": [150, 246], "preview": [150, 246], "nice": [150, 246], "few": [150, 246], "rather": [150, 167, 246, 498, 610, 668, 919], "head": [150, 169, 202, 246, 259, 400, 572, 613, 668, 828, 925, 954], "tail": [150, 155, 246, 259, 463, 572, 668, 803, 884, 954], "more_bi": [151, 179, 199, 246, 466, 572, 603, 635, 668], "maintain_ord": [151, 179, 181, 215, 219, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 260, 297, 505, 512, 530, 572, 590, 595, 597, 603, 622, 631, 632, 633, 641, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 668, 715, 739, 850, 940, 954], "consist": [151, 179, 246, 495, 603, 668, 916], "agg": [151, 152, 153, 246, 254, 260, 371, 373, 465, 466, 505, 517, 530, 572, 590, 595, 597, 603, 604, 605, 622, 631, 668], "anoth": [151, 246, 295, 319, 324, 572, 603, 647, 668, 713, 738, 746, 871, 954], "index_column": [152, 153, 246, 604, 605, 668], "include_boundari": [152, 246, 604, 668], "start_bi": [152, 246, 604, 668], "startbi": [152, 246, 604, 668], "dynamicgroupbi": [152, 246], "normal": [152, 246, 360, 396, 463, 572, 604, 668, 787, 826, 884, 954], "groupbi": [152, 153, 177, 246, 254, 260, 278, 319, 371, 373, 429, 465, 466, 505, 517, 521, 530, 572, 590, 595, 597, 604, 605, 622, 631, 668, 696, 738, 954], "member": [152, 246, 604, 668, 814, 954], "seen": [152, 246, 298, 376, 572, 604, 668], "roll": [152, 153, 246, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 527, 572, 604, 605, 668, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 954], "slot": [152, 246, 277, 319, 320, 572, 604, 668, 695, 738, 741, 954], "1n": [152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 771, 775, 781], "nanosecond": [152, 153, 167, 219, 246, 345, 349, 350, 355, 443, 444, 445, 446, 447, 449, 450, 451, 537, 572, 604, 605, 610, 668, 771, 775, 776, 781], "1u": [152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 771, 775, 781], "microsecond": [152, 153, 167, 219, 246, 345, 349, 350, 355, 443, 444, 445, 446, 447, 449, 450, 451, 536, 537, 572, 604, 605, 610, 622, 668, 771, 775, 781], "1m": [152, 153, 167, 219, 246, 336, 337, 339, 344, 345, 349, 351, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 762, 764, 770, 771, 775, 777, 781], "millisecond": [152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 537, 572, 604, 605, 610, 668, 771, 775, 781], "1h": [152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 754, 771, 775, 781], "1w": [152, 153, 167, 219, 246, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 771, 775, 781], "week": [152, 153, 167, 219, 246, 345, 349, 355, 357, 443, 444, 445, 446, 447, 449, 450, 451, 537, 572, 604, 605, 610, 668, 771, 775, 781, 783], "1y": [152, 153, 167, 219, 246, 334, 345, 349, 355, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 756, 771, 775, 781, 785], "1i": [152, 153, 167, 219, 246, 345, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 605, 610, 668, 771], "10i": [152, 153, 246, 604, 605, 668], "ascend": [152, 153, 246, 604, 605, 668], "often": [152, 153, 246, 276, 439, 572, 604, 605, 668, 694], "dynam": [152, 246, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 668], "matter": [152, 153, 164, 190, 206, 246, 604, 605, 668], "_lower_bound": [152, 246, 604, 668], "_upper_bound": [152, 246, 604, 668], "impact": [152, 246, 604, 668], "harder": [152, 246, 604, 668], "inclus": [152, 153, 246, 383, 443, 444, 445, 446, 447, 449, 450, 451, 490, 491, 572, 604, 605, 668, 807, 911, 912, 954], "datapoint": [152, 246, 604, 668], "mondai": [152, 246, 357, 604, 668, 783], "date_rang": [152, 219, 246, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 604, 668, 746, 748, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785], "30m": [152, 246, 349, 355, 604, 668, 775, 781], "time_min": [152, 246, 604, 668], "time_max": [152, 246, 604, 668], "23": [152, 153, 246, 325, 332, 349, 536, 604, 605, 668, 747, 754], "boundari": [152, 246, 308, 309, 310, 572, 604, 668, 728, 729, 730, 804, 954], "time_count": [152, 246, 604, 668], "_lower_boundari": [152, 246, 604, 668], "_upper_boundari": [152, 246, 604, 668], "lower_bound": [152, 246, 308, 310, 383, 572, 604, 668, 728, 730, 807, 942, 954], "upper_bound": [152, 246, 296, 308, 309, 383, 572, 604, 668, 728, 729, 807, 832, 954], "time_agg_list": [152, 246, 604, 668], "arang": [152, 217, 228, 246, 604, 652, 668], "2i": [152, 246, 604, 668], "3i": [152, 246, 604, 668], "a_agg_list": [152, 246, 604, 668], "rollinggroupbi": [153, 246], "dynamic_groupbi": [153, 246, 605, 668], "groupby_dynam": [153, 246, 605, 668], "48": [153, 246, 605, 668], "19": [153, 167, 246, 349, 605, 610, 668, 775, 781], "43": [153, 246, 318, 572, 605, 668], "strptime": [153, 246, 352, 605, 668, 778], "2d": [153, 209, 246, 547, 605, 668, 751], "sum_a": [153, 246, 605, 668], "min_a": [153, 246, 605, 668], "max_a": [153, 246, 605, 668], "to_list": [153, 246, 296, 605, 668, 714, 954], "seed": [154, 191, 246, 379, 436, 453, 459, 572, 802, 852, 869, 880, 954], "seed_1": [154, 246, 379, 572, 802, 954], "seed_2": [154, 246, 379, 572, 802, 954], "seed_3": [154, 246, 379, 572, 802, 954], "hash": [154, 246, 572, 954], "u64": [154, 246, 379, 438, 572, 622, 668, 802, 954], "10783150408545073287": [154, 246], "1438741209321515184": [154, 246], "10047419486152048166": [154, 246], "2047317070637311557": [154, 246], "ab": [155, 169, 202, 223, 246, 499, 500, 549, 552, 572, 646, 668, 803, 828, 925, 954], "grown": [157, 246], "baz": [158, 159, 181, 216, 246, 490, 492, 608, 642, 668, 913], "intermedi": [159, 246, 608, 668, 806, 954], "linear": [159, 183, 238, 246, 274, 382, 412, 435, 447, 527, 528, 555, 572, 608, 623, 662, 668, 692, 806, 851, 863, 954], "mask": [160, 162, 246, 275, 299, 300, 384, 386, 394, 470, 472, 572, 693, 716, 717, 797, 807, 809, 812, 823, 847, 848, 872, 891, 893, 946, 954], "visual": [160, 162, 246], "buffer_s": [164, 246], "intern": [164, 246], "veri": [164, 214, 246, 260, 572, 589, 668, 731, 954], "fit": [164, 197, 217, 246, 458, 572, 878, 879, 954], "signific": [164, 246, 260, 572], "4x": [164, 246], "materialis": [164, 165, 189, 190, 246], "iter_row": [165, 189, 190, 246], "17_500": [165, 246], "klmnoopqrstuvwxyz": [165, 246], "__name__": [165, 246], "7500": [165, 246], "15_000": [165, 246], "record_batch": [165, 246], "to_arrow": [165, 246, 954], "to_batch": [165, 246], "date32": [165, 246], "large_str": [165, 204, 210, 246], "15000": [165, 246], "2500": [165, 246], "joinstrategi": [166, 246, 609, 668], "left_on": [166, 167, 246, 609, 610, 668], "right_on": [166, 167, 246, 609, 610, 668], "suffix": [166, 167, 193, 223, 226, 246, 302, 389, 391, 392, 393, 429, 441, 474, 572, 609, 610, 628, 646, 647, 650, 668, 719, 895], "_right": [166, 167, 246, 609, 610, 668], "outer": [166, 246, 609, 668], "semi": [166, 246, 609, 668], "anti": [166, 246, 609, 668, 872, 873, 954], "cross": [166, 246, 609, 668], "join_asof": [166, 246, 609, 668], "stringcach": [166, 246, 583], "other_df": [166, 246], "by_left": [167, 246, 610, 668], "by_right": [167, 246, 610, 668], "asofjoinstrategi": [167, 246, 610, 668], "allow_parallel": [167, 246, 609, 610, 668], "force_parallel": [167, 246, 609, 610, 668], "asof": [167, 246, 610, 668], "asof_join": [167, 246], "search": [167, 246, 610, 668], "greater": [167, 246, 377, 378, 463, 492, 572, 610, 668, 884, 913, 954], "distanc": [167, 246, 610, 668, 804, 954], "gdp": [167, 246, 610, 668], "2016": [167, 246, 610, 668], "2017": [167, 246, 610, 668], "2018": [167, 246, 610, 668], "2019": [167, 246, 610, 668], "record": [167, 246, 610, 668], "jan": [167, 246, 610, 668], "1st": [167, 246, 610, 668], "4164": [167, 246, 610, 668], "4411": [167, 246, 610, 668], "4566": [167, 246, 610, 668], "4696": [167, 246, 610, 668], "popul": [167, 246, 610, 668], "12th": [167, 246, 610, 668], "82": [167, 246, 610, 668], "66": [167, 246, 518, 572, 610, 668, 863, 954], "83": [167, 246, 610, 668], "52": [167, 223, 246, 452, 572, 610, 646, 668], "request": [168, 246], "small": [168, 246, 349, 597, 668], "describe_plan": [168, 246, 668], "unoptim": [168, 246, 668], "describe_optimized_plan": [168, 246, 668], "show_graph": [168, 246, 668], "un": [168, 246], "graphviz": [168, 246, 631, 668], "axi": [170, 171, 173, 175, 201, 246, 618, 668], "null_strategi": [171, 201, 246], "nullstrategi": [171, 201, 246], "spam": [171, 246], "id_var": [173, 246, 618, 668], "value_var": [173, 246, 618, 668], "variable_nam": [173, 246, 618, 668], "value_nam": [173, 246, 618, 668], "unpivot": [173, 246, 618, 668], "leav": [173, 246, 618, 668], "massag": [173, 246, 618, 668], "measur": [173, 246, 618, 668], "merg": [174, 246, 619, 668], "caller": [174, 246, 296, 614, 619, 652, 668], "respons": [174, 246, 619, 668], "One": [177, 181, 246, 257, 428, 572, 954], "what": [177, 246, 936, 945, 954], "pack": [177, 246], "expr_unique_subset": [177, 246], "df_nuniqu": [177, 246], "df_agg_nuniqu": [177, 246], "offer": [180, 246, 431, 572, 621, 668], "fulli": [180, 191, 246], "advantag": [180, 246], "cast_str_to_int": [180, 246, 621, 668], "col_nam": [180, 246, 621, 668], "tdf": [180, 246, 621, 668], "aggregate_funct": [181, 246], "pivotagg": [181, 246], "nodefault": [181, 246, 495], "_nodefault": [181, 246, 495], "no_default": [181, 246, 495], "sort_column": [181, 246], "predefin": [181, 246], "predict": [181, 184, 219, 246], "transpos": [181, 246], "discoveri": [181, 246], "interpol": [183, 238, 246, 370, 412, 435, 447, 555, 572, 623, 662, 668, 851, 863, 954], "rollinginterpolationmethod": [183, 238, 246, 435, 447, 555, 572, 623, 662, 668, 851, 863, 954], "midpoint": [183, 238, 246, 435, 447, 555, 572, 623, 662, 668, 851, 863, 954], "old": [185, 246, 625, 668], "by_pred": [189, 246], "accord": [189, 246, 409, 572, 757], "never": [189, 246], "mutual": [189, 246], "exclus": [189, 246, 518, 572], "addition": [189, 246], "clariti": [189, 246], "anyth": [189, 246], "toomanyrowsreturnederror": [189, 246, 583], "norowsreturnederror": [189, 246, 583], "inherit": [189, 246], "rowserror": [189, 246, 583], "with_replac": [191, 246, 453, 572, 869, 954], "shuffl": [191, 228, 246, 453, 572, 652, 869, 954], "nor": [191, 246], "modul": [191, 246, 453, 459, 571, 572, 869, 880, 954], "more_expr": [193, 223, 246, 429, 523, 525, 527, 528, 549, 552, 558, 561, 572, 628, 646, 668], "named_expr": [193, 223, 246, 558, 561, 628, 646, 668], "threshold": [193, 246, 628, 668], "set_auto_structifi": [193, 223, 246, 628, 646, 668], "is_odd": [193, 246, 628, 668], "_is_odd": [193, 246, 628, 668], "shift_and_fil": [195, 246, 572, 668, 954], "shift": [196, 246, 277, 320, 430, 457, 527, 572, 630, 668, 695, 741, 846, 877, 954], "shrink": [197, 246, 458, 572, 878, 879, 954], "hold": [197, 246], "ddof": [200, 220, 246, 468, 516, 529, 554, 559, 560, 564, 572, 636, 644, 668, 888, 944, 954], "deviat": [200, 246, 363, 449, 468, 560, 572, 636, 668, 790, 888, 954], "degre": [200, 220, 246, 468, 516, 529, 554, 559, 560, 564, 572, 636, 644, 668, 888, 944, 954], "freedom": [200, 220, 246, 468, 516, 529, 554, 559, 560, 564, 572, 636, 644, 668, 888, 944, 954], "divisor": [200, 220, 246, 468, 516, 529, 554, 559, 560, 564, 572, 636, 644, 668, 888, 944, 954], "816497": [200, 246], "21": [201, 246, 543], "16a": [201, 246], "27b": [201, 246], "38c": [201, 246], "nth": [203, 246, 492, 506, 572, 639, 668, 913, 927, 954], "mostli": [204, 246, 371, 572], "categoricaltyp": [204, 246], "as_seri": [205, 246], "fruit": [205, 246, 433, 441, 474, 493, 502, 572, 895, 914], "car": [205, 246, 433, 441, 502, 572], "beetl": [205, 246, 433, 441, 502, 572], "audi": [205, 246, 433, 441, 502, 572], "300": [205, 246, 859, 860, 862, 954], "instantiat": [208, 246, 934, 954], "from_repr": [208, 246, 934, 954], "df_from_str_repr": [208, 246], "eval": [208, 246, 538, 934, 954], "re": [209, 246], "ll": [209, 246], "numpy_arrai": [209, 246], "use_pyarrow_extension_arrai": [210, 246, 937, 954], "trigger": [210, 246, 937, 954], "sent": [210, 246, 936, 937, 954], "pandas_df1": [210, 246], "pandas_df2": [210, 246], "pandas_df2_pa": [210, 246], "na": [210, 246, 937, 954], "get_column": [211, 246, 562], "four": [212, 246], "five": [212, 246], "bottom_k": [213, 246, 510, 572, 640, 668, 939, 954], "include_head": [214, 246], "header_nam": [214, 246], "column_nam": [214, 246], "perhap": [214, 246], "column_2": [214, 246], "name_gener": [214, 246, 296, 714], "base_nam": [214, 246], "my_column_": [214, 246], "my_column_0": [214, 246], "my_column_1": [214, 246], "my_column_2": [214, 246], "uniquekeepstrategi": [215, 246, 641, 668], "kept": [215, 246, 641, 668], "decompos": [216, 246, 642, 668], "t_a": [216, 246, 642, 668], "t_b": [216, 246, 642, 668], "t_c": [216, 246, 642, 668], "t_d": [216, 246, 642, 668], "womp": [216, 246, 642, 668], "t_": [216, 246, 642, 668], "t_struct": [216, 246, 642, 668], "step": [217, 246, 522], "unstackdirect": [217, 246], "much": [217, 246, 295, 319, 572, 713, 738, 954], "pivot": [217, 246], "phase": [217, 246], "subject": [217, 246], "ascii_uppercas": [217, 246], "col1": [217, 246, 668], "col2": [217, 246, 668], "h": [217, 246, 253, 352, 458, 495, 572, 916], "col1_0": [217, 246], "col1_1": [217, 246], "col1_2": [217, 246], "col2_0": [217, 246], "col2_1": [217, 246], "col2_2": [217, 246], "syntact": [218, 246, 534, 539, 540, 544, 555, 558, 562, 643, 668, 887, 954], "sugar": [218, 246, 534, 539, 540, 544, 555, 558, 562, 643, 668, 887, 954], "coalesc": [218, 246, 643, 668], "400": [218, 246, 643, 668, 859, 860, 862, 954], "600": [218, 246, 643, 668], "700": [218, 246, 643, 668], "new_df": [218, 246, 643, 668], "time_column": [219, 246], "frequenc": [219, 246], "forward_fil": [219, 246, 315, 318, 572], "06": [219, 246, 325, 335, 347, 348, 359, 775, 783], "varianc": [220, 246, 364, 396, 451, 516, 564, 572, 644, 668, 791, 826, 867, 944, 954], "grow": [221, 246], "is_not": [223, 246, 572, 646, 668], "not_c": [223, 246, 646, 668], "diff": [223, 246, 330, 333, 337, 339, 341, 344, 351, 572, 646, 668, 752, 755, 762, 764, 767, 770, 777, 954], "_diff": [223, 246, 646, 668], "row_nr": [224, 246, 409, 572, 648, 668, 873, 954], "more_agg": [226, 650], "named_agg": [226, 650], "_sum": [226, 650], "_mean_squar": [226, 650], "b_sum": [226, 650], "c_mean_squar": [226, 650], "17": [226, 452, 495, 543, 572, 650, 732, 775, 954], "sub": [228, 572], "triangl": [228, 652], "group_df": [228, 652], "nr": [231, 240, 655, 664], "maxim": [233, 267, 572, 657, 684, 954], "833333": [234, 658], "minim": [236, 268, 273, 458, 466, 572, 660, 685, 691, 837, 878, 954], "overview": [246, 572, 583, 668, 954], "public": [246, 572, 583, 668, 954], "frameinittyp": [246, 668], "variou": [246, 572, 668, 954], "entri": [246, 668], "prevent": [246, 317, 318, 395, 503, 572, 668, 736, 737, 924, 954], "come": [246, 396, 572, 584, 667, 668, 826, 954], "behavior": [246, 260, 295, 521, 572, 713], "mydatafram": 246, "notic": [246, 668, 954], "df4": 246, "df5": 246, "df6": 246, "corr": [246, 554, 559], "drop_in_plac": 246, "drop_nul": [246, 322, 572, 668, 954], "estimated_s": [246, 954], "explod": [246, 373, 440, 572, 668, 856, 954], "find_idx_by_nam": 246, "fold": [246, 416, 525, 532, 533, 556, 562], "frame_equ": [246, 349, 355], "groupby_rol": [246, 443, 444, 445, 446, 447, 449, 450, 451, 572, 604, 668], "hash_row": 246, "hstack": 246, "insert_at_idx": 246, "is_dupl": [246, 572, 954], "is_empti": [246, 954], "is_uniqu": [246, 572, 954], "iter_slic": 246, "melt": [246, 668], "merge_sort": [246, 668], "n_uniqu": [246, 572, 954], "pipe": [246, 572, 668], "quantil": [246, 447, 572, 668, 850, 863, 954], "replace_at_idx": 246, "shrink_to_fit": [246, 954], "take_everi": [246, 572, 668, 954], "to_dict": 246, "to_numpi": [246, 407, 572, 954], "to_panda": [246, 954], "to_struct": 246, "unnest": [246, 491, 492, 500, 668, 912, 913], "unstack": 246, "updat": [246, 668], "upsampl": 246, "write_avro": 246, "write_databas": 246, "write_excel": 246, "write_json": [246, 624, 668], "write_parquet": 246, "cumprod": [253, 572, 954], "ghi": [253, 572], "94": [254, 572], "confus": [256, 389, 391, 572], "tt": [256, 572], "tf": [256, 258, 572], "ff": [256, 258, 572], "upcast": [259, 572], "skip_nul": [260, 572, 677, 954], "pass_nam": [260, 572], "applystrategi": [260, 572], "thread_loc": [260, 572], "unknown": [260, 409, 547, 572], "stage": [260, 572], "code": [260, 455, 572, 612, 668, 874, 954], "amount": [260, 572], "releas": [260, 572], "gil": [260, 572], "discourag": [260, 572], "loop": [260, 572], "a_times_2": [260, 572], "invers": [261, 262, 263, 264, 265, 266, 572, 678, 679, 680, 681, 682, 683, 954], "cosin": [261, 262, 311, 312, 407, 572, 678, 679, 732, 733, 954], "570796": [261, 263, 572, 678, 680, 954], "hyperbol": [262, 264, 266, 312, 462, 508, 572, 679, 681, 683, 733, 883, 929, 954], "sine": [263, 264, 407, 461, 462, 572, 680, 681, 882, 883, 954], "881374": [264, 572, 681, 954], "tangent": [265, 266, 507, 508, 572, 682, 683, 928, 929, 954], "785398": [265, 572, 682, 954], "arg_wher": [270, 572], "sublist": [272, 273, 275, 277, 280, 281, 282, 283, 284, 291, 294, 295, 690, 691, 693, 695, 698, 699, 700, 701, 702, 709, 712, 713, 714, 814, 954], "membership": [275, 693], "listcol": 276, "number_of_two": 276, "null_behavior": [277, 320, 572, 695, 741, 954], "nullbehavior": [277, 320, 572, 695, 741, 954], "th": [277, 320, 463, 572, 695, 741, 884, 954], "against": [278, 668, 696, 961], "blindli": [278, 696], "worth": [278, 696], "enough": [278, 463, 572, 696, 884, 954], "concat_list": [278, 538, 696], "rank": [278, 529, 538, 559, 572, 696, 954], "exprnamespac": 279, "reshap": [279, 572, 697, 954], "flat": [279, 440, 572, 697, 856, 954], "taken": [291, 489, 505, 572, 709, 910], "null_on_oob": [295, 713], "cheaper": [295, 713], "n_field_strategi": [296, 714], "tostructstrategi": [296, 714], "first_non_nul": [296, 714], "max_width": [296, 714], "field_0": [296, 714], "field_1": [296, 714], "field_n": [296, 714], "know": [296, 483, 904, 936, 945, 954], "incorrectli": 296, "downstream": [296, 455, 572, 874, 954], "col_name_": [296, 714], "col_name_0": [296, 714], "col_name_1": [296, 714], "col_name_2": [296, 714], "maintain": [297, 454, 512, 572, 632, 633, 668, 715, 870, 940, 954], "substr": [299, 302, 303, 470, 474, 485, 486, 490, 491, 492, 493, 716, 719, 720, 891, 895, 906, 907, 911, 912, 913, 914], "transferencod": [300, 301, 472, 473, 717, 718, 893, 894], "strict": [300, 305, 470, 472, 484, 495, 572, 717, 722, 871, 891, 893, 905, 916, 954], "hex": [300, 301, 472, 473, 484, 717, 718, 893, 894, 905], "base64": [300, 301, 472, 473, 717, 718, 893, 894], "prefix": [303, 493, 498, 572, 720, 914, 919], "complex": [304, 319, 510, 572, 721, 738, 939, 954], "frac": [304, 362, 363, 364, 463, 510, 572, 721, 789, 790, 791, 884, 939, 954], "due": [305, 572, 722, 954], "overflow": [305, 317, 318, 484, 503, 572, 722, 736, 737, 905, 924, 954], "categoricalord": [306, 724], "lexic": [306, 724], "foo_clip": [308, 309, 310, 572], "clip": [309, 310, 572, 729, 730, 954], "543081": [312, 572, 733, 954], "cumul": [314, 315, 316, 317, 318, 532, 533, 534, 572, 734, 735, 736, 737, 954], "a_revers": [314, 315, 316, 317, 318, 408, 441, 502, 572], "value_cummax": [315, 572], "value_cummax_all_fil": [315, 572], "value_cumsum": [318, 572], "value_cumsum_all_fil": [318, 572], "min_period": [319, 362, 363, 364, 442, 443, 444, 445, 446, 447, 449, 450, 451, 572, 738, 789, 790, 791, 858, 859, 860, 861, 862, 863, 865, 866, 867, 954], "slide": [319, 572, 738, 954], "realli": [319, 572, 738, 954], "visit": [319, 572, 738, 954], "44": [321, 572], "drop_nan": [323, 572, 954], "lose": [324, 746], "2001": [324, 329, 331, 332, 334, 335, 340, 342, 345, 346, 347, 349, 350, 354, 355, 356, 357, 358, 359, 495, 746, 751, 753, 754, 756, 758, 759, 760, 761, 763, 765, 766, 768, 769, 771, 772, 773, 775, 776, 778, 780, 781, 782, 783, 784, 785, 916], "time_unit_m": [324, 746], "time_unit_n": [324, 746], "naiv": [325, 747], "compon": [325, 350, 495, 537, 747, 776], "resolv": 325, "tm": 325, "456000": [325, 747], "101000": 325, "456": [325, 747, 933, 954], "101": [325, 484, 905], "d1": 325, "d2": 325, "d3": 325, "utc": [326, 348, 495, 748, 774, 916], "europ": [326, 348, 748, 774], "london": [326, 348, 748, 774], "gmt": [326, 348, 748, 774], "bst": [326, 348, 748, 774], "weekdai": [329, 346], "day_of_month": [329, 346, 357], "ordinal_dai": [329, 357], "day_of_year": [329, 346, 357], "days_diff": 330, "epochtimeunit": [331, 543, 753], "unix": [331, 543, 753], "epoch_n": [331, 753], "epoch_": [331, 753], "978307200000000": [331, 354, 753, 780], "978307200": [331, 753], "978393600000000": [331, 354, 753, 780], "978393600": [331, 753], "978480000000000": [331, 354, 753, 780], "978480000": [331, 753], "hours_diff": 333, "leap": [334, 345, 756, 771], "2000": [334, 336, 345, 756, 771], "2002": [334, 335, 345, 347, 359, 756, 771, 785], "iso": [335, 356, 357, 757, 782, 783], "correspond": [335, 436, 572, 757, 852, 954], "2006": [335, 345, 771], "180": [335, 347, 359], "2004": [335, 345, 771], "2005": [335, 345, 771], "1_001": [336, 337, 339, 344], "002": [336, 337, 339, 344, 537, 762, 764, 770], "003": [336, 337, 339, 344], "3000": 336, "997": [336, 337, 339, 344], "997000": 336, "998": [336, 337, 339, 344], "998000": 336, "999": [336, 337, 339, 344], "999000": 336, "microseconds_diff": 337, "milliseconds_diff": 339, "minutes_diff": 341, "1440": [341, 767], "nanoseconds_diff": 344, "1000000": [344, 498, 770], "minu": [345, 771], "dictat": [345, 771], "date_plus_1i": [345, 771], "1y2mo": [345, 771], "date_min": 345, "1998": [345, 771], "1999": [345, 771], "2003": [345, 543, 771], "ordin": [346, 436, 572, 772, 852, 954], "366": [346, 772], "convert_time_zon": [348, 774], "unset": [348, 774], "london_timezon": 348, "amsterdam": 348, "london_to_amsterdam": 348, "cet": 348, "cest": 348, "half": [349, 362, 363, 364, 572, 775, 789, 790, 791, 954], "225": [349, 355], "to_fram": [349, 355, 495, 872, 873, 912, 913, 916, 954], "10m": [349, 355, 775, 781], "milli": [350, 776], "micro": [350, 776], "456789": 350, "654321": 350, "111110": 350, "765431": 350, "sec": 350, "11111": 350, "seconds_diff": 351, "timestamp_n": [354, 780], "timestamp_m": 354, "978307200000": 354, "978393600000": 354, "978480000000": 354, "53": [356, 782], "sundai": [357, 783], "incorrect": [358, 455, 572, 652, 784, 874, 954], "time_unit_u": [358, 784], "32971": [358, 784], "32974": [358, 784], "32976": [358, 784], "718281828459045": [360, 402, 572, 787, 829, 954], "pk": [360, 572, 787, 954], "459148": [360, 572], "754888": [360, 572], "span": [362, 363, 364, 572, 789, 790, 791, 954], "half_lif": [362, 363, 364, 572, 789, 790, 791, 954], "adjust": [362, 363, 364, 463, 572, 789, 790, 791, 884, 954], "ignore_nul": [362, 363, 364, 572, 789, 790, 791, 945, 954], "exponenti": [362, 363, 364, 366, 432, 572, 789, 790, 791, 792, 954], "weight": [362, 363, 364, 442, 443, 444, 445, 446, 447, 449, 450, 451, 463, 572, 789, 790, 791, 858, 859, 860, 861, 862, 863, 865, 866, 867, 884, 954], "decai": [362, 363, 364, 572, 789, 790, 791, 954], "term": [362, 363, 364, 480, 483, 572, 789, 790, 791, 901, 904, 954], "mass": [362, 363, 364, 572, 789, 790, 791, 954], "gamma": [362, 363, 364, 572, 789, 790, 791, 954], "foral": [362, 363, 364, 572, 789, 790, 791, 954], "geq": [362, 363, 364, 572, 789, 790, 791, 954], "theta": [362, 363, 364, 572, 789, 790, 791, 954], "life": [362, 363, 364, 572, 789, 790, 791, 954], "exp": [362, 363, 364, 572, 789, 790, 791, 954], "ln": [362, 363, 364, 572, 789, 790, 791, 954], "smooth": [362, 363, 364, 572, 789, 790, 791, 954], "factor": [362, 363, 364, 509, 572, 789, 790, 791, 938, 954], "leq": [362, 363, 364, 572, 789, 790, 791, 954], "begin": [362, 363, 364, 476, 572, 789, 790, 791, 897, 954], "imbal": [362, 363, 364, 572, 789, 790, 791, 954], "ew": [362, 363, 364, 572, 789, 790, 791, 954], "w_i": [362, 363, 364, 572, 789, 790, 791, 954], "recurs": [362, 363, 364, 572, 789, 790, 791, 954], "y_0": [362, 363, 364, 572, 789, 790, 791, 954], "x_0": [362, 363, 364, 572, 789, 790, 791, 954], "y_t": [362, 363, 364, 572, 789, 790, 791, 954], "y_": [362, 363, 364, 572, 789, 790, 791, 954], "x_t": [362, 363, 364, 572, 789, 790, 791, 954], "observ": [362, 363, 364, 572, 789, 790, 791, 954], "x_2": [362, 363, 364, 572, 789, 790, 791, 954], "428571": [362, 572], "bia": [363, 364, 396, 448, 463, 572, 790, 791, 826, 864, 884, 954], "unbias": [363, 364, 572, 790, 791, 954], "963624": [363, 572, 790, 954], "928571": [364, 572, 791, 954], "wildcard": [365, 519, 526, 532, 533, 541, 556, 572], "regex": [365, 414, 470, 471, 474, 476, 477, 485, 486, 493, 539, 549, 552, 562, 572, 891, 892, 895, 897, 898, 906, 907, 914], "aa": [365, 539, 572], "ba": [365, 539, 572], "cc": [365, 539, 572], "718282": [366, 572], "389056": [366, 572], "54": [366, 572], "59815": [366, 572], "expand": [367, 413, 414, 439, 572, 793, 954], "favour": [367, 572, 793, 954], "arr": [367, 538, 572, 573, 793, 936, 954, 955], "exprlistnamespac": [367, 373, 440, 572], "exprstringnamespac": [367, 572], "pythonliter": [368, 549, 552, 572, 646, 668, 794, 834, 837, 954], "extrem": [368, 572, 794, 954], "group_col": [371, 517, 572], "g1": [371, 517, 572], "g2": [371, 517, 572], "lt": [371, 517, 572, 954], "gte": [371, 517, 572], "divis": [375, 511, 572], "truediv": [375, 572], "9774092659964970114": [379, 572], "13614470193936745724": [379, 572], "1101441246220388612": [379, 572], "11638928888656214026": [379, 572], "13382926553367784577": [379, 572], "cumsum": [381, 501, 572, 607, 668, 954], "interpolationmethod": [382, 572, 806, 954], "regrid": [382, 572], "grid": [382, 572], "df_original_grid": [382, 572], "grid_point": [382, 572], "df_new_grid": [382, 572], "conflat": [383, 572], "finit": [385, 511, 529, 559, 572, 811, 954], "primit": [387, 572, 936, 954], "optional_memb": [387, 572, 814, 954], "infinit": [388, 511, 572, 815, 954], "_isnan": [389, 572], "b_isnan": [389, 572], "negat": [390, 572], "_is_not_nan": [391, 572], "b_is_not_nan": [391, 572], "_not_nul": [392, 572], "a_not_nul": [392, 572], "b_not_nul": [392, 572], "_isnul": [393, 572], "a_isnul": [393, 572], "b_isnul": [393, 572], "undo": [395, 418, 572], "duplicateerror": [395, 572, 583], "occurr": [395, 572, 804, 954], "333333": [395, 451, 572, 846, 867, 954], "fisher": [396, 463, 572, 826, 884, 954], "fourth": [396, 572, 826, 954], "subtract": [396, 501, 572, 826, 954], "distribut": [396, 463, 572, 826, 884, 954], "elimin": [396, 572, 826, 954], "bias": [396, 463, 572, 826, 884, 954], "scipi": [396, 463, 572, 826, 884, 954], "stat": [396, 463, 572, 826, 884, 954], "153061": [396, 572], "logarithm": [402, 403, 404, 572, 829, 830, 831, 954], "584963": [402, 572], "30103": [403, 572], "60206": [403, 572], "natur": [404, 572, 831, 954], "plu": [404, 572, 831, 954], "693147": [404, 572], "098612": [404, 572], "386294": [404, 572], "lowest": [405, 572], "9223372036854775808": [405, 572], "agg_list": [407, 572], "elementwis": [407, 442, 443, 444, 445, 446, 447, 449, 450, 451, 519, 520, 572, 858, 859, 860, 861, 862, 863, 865, 866, 867, 954], "third": [407, 572], "parti": [407, 572], "book": [407, 572], "argmax": [407, 572], "_revers": [408, 441, 502, 572], "b_revers": [408, 441, 502, 572], "remap": [409, 572, 833, 954], "lookup": [409, 572, 833, 954], "country_code_dict": [409, 572], "ca": [409, 572], "canada": [409, 572], "de": [409, 572], "germani": [409, 572], "fr": [409, 572], "franc": [409, 572], "country_cod": [409, 572], "rest": [409, 572], "computeerror": [415, 484, 583, 905], "keep_nam": [418, 572], "modulu": [420, 572], "xlog2": [422, 432, 572], "poison": [424, 425, 572, 842, 843, 954], "nanmax": [424, 425, 572, 842, 843, 954], "wherea": [424, 425, 572, 606, 613, 668, 842, 843, 954], "inequ": [426, 572], "outcom": [429, 572], "_max": [429, 572], "c_max": [429, 572], "_min": [429, 572], "c_min": [429, 572], "recent": [430, 572, 846, 954], "percent": [430, 572, 846, 954], "090909": [430, 572], "extract_numb": [431, 572], "r": [431, 471, 475, 476, 477, 485, 572, 892, 896, 897, 898, 906], "expon": [432, 572, 954], "512": [432, 572, 846, 954], "reverse_": [433, 572], "reverse_a": [433, 572], "reverse_fruit": [433, 572], "reverse_b": [433, 572], "reverse_car": [433, 572], "rankmethod": [436, 572, 852, 954], "ti": [436, 572, 852, 954], "competit": [436, 572, 852, 954], "highest": [436, 514, 529, 559, 572, 668, 852, 954], "safe": [438, 495, 572, 854, 936, 954], "coerc": [439, 572], "fruits_revers": [441, 502, 572], "cars_revers": [441, 502, 572], "window_s": [442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 572, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 954], "rolling_min": [442, 572, 858, 954], "rolling_max": [442, 572, 858, 954], "rolling_mean": [442, 572, 858, 954], "rolling_sum": [442, 572, 858, 954], "multipli": [442, 443, 444, 445, 446, 447, 449, 450, 451, 572, 858, 859, 860, 861, 862, 863, 865, 866, 867, 954], "358899": [442, 572], "041452": [442, 572], "567764": [442, 572], "travers": [443, 444, 446, 449, 450, 451, 572, 859, 860, 862, 865, 866, 867, 954], "vector": [443, 444, 446, 449, 450, 451, 572, 859, 860, 862, 865, 866, 867, 954], "5h": [443, 444, 445, 446, 447, 449, 450, 451, 572], "33": [447, 452, 526, 572, 863, 954], "skew": [448, 572, 864, 954], "527525": [449, 572, 865, 954], "digit": [452, 498, 572, 868, 892, 919, 954], "searchsortedsid": [454, 572, 870, 954], "leftmost": [454, 572, 870, 954], "rightmost": [454, 572, 870, 954], "six": [454, 572], "extrema": [458, 572, 878, 954], "112": [458, 572], "129": [458, 572], "i8": [458, 572, 741, 857, 942, 954], "8589934592": [458, 572], "1073741824": [458, 572], "content": [459, 515, 572, 880, 954], "175201": [462, 572, 883, 954], "about": [463, 572, 884, 954], "unimod": [463, 572, 884, 954], "skewtest": [463, 572, 884, 954], "speak": [463, 572, 884, 954], "g_1": [463, 572, 884, 954], "m_3": [463, 572, 884, 954], "m_2": [463, 572, 884, 954], "m_i": [463, 572, 884, 954], "sum_": [463, 572, 884, 954], "texttt": [463, 572, 884, 954], "k_3": [463, 572, 884, 954], "k_2": [463, 572, 884, 954], "sqrt": [463, 572, 884, 954], "343622": [463, 572], "value1": [466, 572], "value2": [466, 572], "attain": [466, 572], "414214": [467, 572, 887, 954], "ends_with": [470, 493, 914], "crab": [470, 891], "dog": [470, 496, 497, 528, 891], "rab": [470, 891], "success": [471, 477, 892, 898], "overlap": [471, 477, 892, 898], "captur": [471, 476, 477, 892, 897, 898], "123": [471, 477, 486, 892, 898, 907, 933, 954], "bla": [471, 477, 892, 898], "asd": [471, 477, 892, 898], "678": [471, 477, 892, 898], "910t": [471, 477, 892, 898], "count_digit": 471, "666f6f": [473, 894], "626172": [473, 894], "mango": [474, 493, 895, 914], "go": [474, 895], "has_suffix": 474, "group_index": [476, 897], "vote": [476, 897], "ballon_dor": [476, 897], "candid": [476, 897], "messi": [476, 897], "ref": [476, 897], "candidat": [476, 897], "jorginho": [476, 897], "ronaldo": [476, 897], "extracted_nr": 477, "910": [477, 898], "json_path_match": [478, 899], "jsonpath": [478, 479, 899, 900], "json_path": [479, 900], "regardless": [479, 900], "json_val": [479, 900], "n_char": [480, 901], "caf\u00e9": [480, 483, 901, 904], "345": [480, 483, 901, 904], "\u6771\u4eac": [480, 483, 901, 904], "nchar": [480, 483], "fill_char": [481, 487, 902, 908], "justifi": [481, 487, 902, 908], "pad": [481, 487, 498, 902, 908, 919], "cow": [481, 487, 902, 908], "monkei": [481, 487, 902, 908], "hippopotamu": [481, 487, 902, 908], "strip": [482, 488, 903, 909], "tworld": [482, 494, 903, 915], "wod": [482, 488, 903, 909], "rld": [482, 903], "text": [483, 485, 486, 904], "radix": [484, 905], "parseerror": [484, 905], "becom": [484, 905], "silent": [484, 905], "110": [484, 905], "010": [484, 905], "fa1e": [484, 905], "ff00": [484, 905], "cafe": [484, 905], "64030": [484, 905], "65280": [484, 905], "51966": [484, 905], "replace_al": [485, 906], "123abc": [485, 906], "abc456": [485, 906], "abcabc": [486, 907], "123a123": [486, 907], "bc": [486, 562, 907], "trail": [488, 494, 909, 915], "worl": [488, 494, 909, 915], "subslic": [489, 910], "pear": [489, 910], "papaya": [489, 910], "dragonfruit": [489, 910], "s_slice": 489, "ear": [489, 910], "aya": [489, 910], "uit": [489, 910], "ya": [489, 910], "onf": [489, 910], "a_1": [491, 912, 932, 954], "d_4": [491, 912], "rename_field": [491, 492, 912, 913], "first_part": [491, 492, 912, 913], "second_part": [491, 492, 912, 913], "remaind": [492, 913], "app": [493, 914], "has_prefix": 493, "polarstemporaltyp": [495, 916], "tz_awar": [495, 916], "strftime": [495, 916], "anywher": [495, 916], "toggl": [495, 916], "futur": 495, "3f": 495, "00z": [495, 916], "sun": [495, 916], "jul": [495, 916], "34": [495, 916], "lowercas": [496, 917], "variant": [496, 497], "uppercas": [497, 918], "100000": 498, "0010": 498, "0001": 498, "00000": 498, "00001": 498, "cd": [499, 500], "struct_col": [499, 500], "www": 500, "xxx": 500, "yyi": 500, "zzz": 500, "obvious": 500, "structfieldnotfounderror": [500, 583], "761594": [508, 572, 929, 954], "replic": [509, 572, 938, 954], "vals_phys": [509, 572], "floordiv": [511, 572], "behaviour": [511, 572], "ieee": [511, 572], "754": [511, 572], "mathemat": [511, 538, 572], "undefin": [511, 572], "On": [511, 572], "operand": [511, 572], "infin": [511, 572], "value_count": [513, 572, 954], "9223372036854775807": [514, 572], "multithread": [515, 572], "binary_str": [518, 572], "zfill": [518, 572], "250": [518, 572, 860, 954], "bin_x": [518, 572], "bin_i": [518, 572], "xor_xi": [518, 572], "bin_xor_xi": [518, 572], "00001010": [518, 572], "00000001": [518, 572], "00001011": [518, 572], "00001000": [518, 572], "00000010": [518, 572], "11111010": [518, 572], "00000011": [518, 572], "249": [518, 572], "11111001": [518, 572], "01000010": [518, 572], "00000100": [518, 572], "70": [518, 572], "01000110": [518, 572], "columnwis": [519, 520], "AND": 519, "bitwis": [519, 520], "returns_scalar": 521, "product_a": 521, "49": 521, "Be": 522, "more_nam": 526, "hamburg": 526, "lag": 527, "mimic": 527, "a_lag_": 527, "a_rol": 527, "plai": 528, "swim": 528, "walk": 528, "full_sent": 528, "correlationmethod": 529, "propagate_nan": [529, 559], "spearman": [529, 559], "larger": [529, 559, 632, 633, 668], "544705": [529, 554], "covari": 531, "acc": [532, 533, 541, 556], "include_init": 532, "accumul": [532, 533, 541, 556], "fn": [532, 533, 541, 556], "new_valu": [532, 533, 541, 556], "cumreduc": 532, "cumfold": 534, "999999": 536, "add_week": 537, "add_dai": 537, "add_second": 537, "add_millisecond": 537, "add_hour": 537, "add_millisec": 537, "ond": 537, "a_b_doubl": 538, "f_string": 542, "placehold": 542, "hello_": 542, "_world": 542, "foo_": 542, "_bar_": 542, "foo_a_bar_1": 542, "foo_b_bar_2": 542, "foo_c_bar_3": 542, "epoch": [543, 774], "timestep": 543, "1666683077": 543, "1666683099": 543, "39": 543, "12345": [543, 725, 799, 868, 954], "12346": 543, "agg_group": [544, 572], "allow_object": 547, "valueexcept": 547, "foo_bar": 547, "test_func": 548, "selector": [549, 552, 562], "favor": [554, 559], "605551": 560, "605551275463989": 560, "my_struct": 561, "q": 561, "statement": 565, "chain": 565, "isn": 565, "thens": 565, "elif": 565, "pick": 565, "sometim": 571, "and_": 572, "arcco": [572, 954], "arccosh": [572, 954], "arcsin": [572, 954], "arcsinh": [572, 954], "arctan": [572, 954], "arctanh": [572, 954], "arg_max": [572, 954], "arg_min": [572, 954], "arg_sort": [572, 954], "arg_uniqu": [572, 954], "backward_fil": 572, "clip_max": [572, 954], "clip_min": [572, 954], "co": [572, 954], "cosh": [572, 954], "cumcount": 572, "cummax": [572, 954], "cummin": [572, 954], "cumulative_ev": [572, 954], "entropi": [572, 954], "eq": [572, 954], "ewm_mean": [572, 954], "ewm_std": [572, 954], "ewm_var": [572, 954], "extend_const": [572, 954], "flatten": 572, "ge": [572, 954], "gt": [572, 954], "inspect": [572, 668], "is_between": [572, 954], "is_finit": [572, 954], "is_first": [572, 954], "is_in": [572, 954], "is_infinit": [572, 954], "is_nan": [572, 954], "is_not_nan": [572, 954], "is_not_nul": [572, 954], "kurtosi": [572, 954], "le": [572, 954], "log10": [572, 954], "log1p": [572, 954], "map_alia": 572, "map_dict": [572, 954], "mod": 572, "mul": 572, "nan_max": [572, 954], "nan_min": [572, 954], "ne": [572, 954], "or_": 572, "pct_chang": [572, 954], "pow": [572, 954], "reinterpret": [572, 954], "repeat_bi": 572, "rolling_appli": [572, 954], "rolling_median": [572, 954], "rolling_quantil": [572, 954], "rolling_skew": [572, 954], "rolling_std": [572, 954], "rolling_var": [572, 954], "search_sort": [572, 954], "set_sort": [572, 954], "shrink_dtyp": [572, 954], "sin": [572, 954], "sinh": [572, 954], "sort_bi": 572, "tan": [572, 954], "tanh": [572, 954], "to_phys": [572, 954], "unique_count": [572, 954], "xor": 572, "expos": 583, "registr": 583, "miscellan": 583, "arrowerror": 583, "columnnotfounderror": 583, "invalidoperationerror": 583, "nodataerror": 583, "polarspanicerror": 583, "schemaerror": 583, "schemafieldnotfounderror": 583, "shapeerror": 583, "build_info": 583, "get_index_typ": 583, "show_vers": 583, "threadpool_s": 583, "sqlcontext": [583, 961], "hit": [587, 668], "node": [587, 607, 614, 618, 622, 625, 668], "huge": [590, 668], "saver": [590, 668], "purpos": [597, 668], "influenc": [597, 614, 668], "read_json": [602, 649, 668], "lazygroupbi": [603, 604, 605, 668], "other_lf": [609, 668], "validate_output_schema": [614, 668], "streamabl": [614, 618, 668], "past": [614, 668], "assum": [614, 652, 668], "paramount": [614, 668], "bug": [614, 652, 668], "elig": [614, 668], "invari": [614, 668], "upheld": [614, 668], "prune": [614, 668], "show_plot": [622, 668], "truncate_nod": [622, 668], "figsiz": [622, 631, 668], "gantt": [622, 668], "plot": [622, 631, 668], "groupby_partit": [622, 668], "470": [622, 668], "475": [622, 668], "1964": [622, 668], "from_json": [624, 668], "swap": [625, 668], "output_path": [631, 668], "raw_output": [631, 668], "figur": [631, 668], "persist": [632, 633, 668], "ram": [632, 633, 668], "slightli": [632, 633, 668], "my_larger_than_ram_fil": [632, 633, 668], "data_pagesize_limit": [633, 668], "290994": [636, 668], "118034": [636, 668], "433013": [636, 668], "1875": [644, 668], "polarsexprtyp": [646, 668], "extern": [647, 668], "lf_other": [647, 668], "afoo": [647, 668], "cfoo": [647, 668], "train_lf": [647, 668], "feature_0": [647, 668], "feature_1": [647, 668], "test_lf": [647, 668], "_train": [647, 668], "feature_0_train": [647, 668], "dataframescan": [649, 668], "output_schema": [649, 668], "initialis": 668, "lf2": 668, "lf3": 668, "lf4": 668, "lf5": 668, "lf6": 668, "explain": 668, "profil": 668, "sink_ipc": 668, "sink_parquet": 668, "with_context": 668, "sr": [673, 954], "new_aliased_sr": [673, 954], "append_chunk": [676, 954], "super": [676, 954], "141593": [678, 954], "292432": [679, 954], "549306": [683, 954], "listnamespac": [689, 793, 856, 954], "catnamespac": 723, "56789": [725, 799, 868, 954], "901234": [725, 799, 868, 954], "pi": [732, 882, 928, 954], "1232e": [732, 954], "quick": [740, 954], "series_num": [740, 954], "581139": [740, 954], "series_str": [740, 954], "datetimenamespac": 745, "ser": [749, 750, 779], "replace_time_zon": [749, 750, 779], "kathmandu": [749, 750, 779], "0545": [749, 750, 779], "500m": [761, 763, 769, 776], "500000": 761, "2m": 766, "500000000": 769, "date_minus_1y_2mon": 771, "1583020800": 774, "1585699200": 774, "1588291200": 774, "nyc": 774, "edt": 774, "1583038800": 774, "1585717200": 774, "1588309200": 774, "165": [775, 781], "series_equ": [775, 781, 954], "timestamp_u": 780, "978307200000000000": 780, "978393600000000000": 780, "978480000000000000": 780, "005": [787, 954], "06293300616044681": [787, 954], "65": [787, 954], "8568409950394724": [787, 954], "4000000": [788, 954], "814697265625": [788, 954], "stringnamespac": [793, 889, 954], "bitmask": [801, 954], "swiftli": [801, 954], "10734580197236529959": [802, 954], "3022416320763508302": [802, 954], "13756996518000038261": [802, 954], "bin_count": [804, 954], "a_count": [804, 954], "fall": [807, 954], "2147483648": [832, 954], "iso3166": [833, 954], "tur": [833, 954], "jpn": [833, 954], "nld": [833, 954], "country_lookup": [833, 954], "japan": [833, 954], "t\u00fcrkiy": [833, 954], "netherland": [833, 954], "unrecognis": [833, 954], "unspecifi": [833, 954], "country_nam": [833, 954], "166667": [846, 954], "142857": [846, 954], "peak": [847, 848, 954], "quanil": [850, 954], "nanstd": [858, 954], "858612": [858, 954], "200": [859, 860, 862, 954], "150": [860, 954], "350": [860, 954], "450": [860, 954], "381802": [864, 954], "dev": [865, 954], "57": [868, 954], "frequent": [872, 873, 954], "mutat": [873, 954], "2246e": [882, 928, 954], "6331e16": [928, 954], "lib": [931, 954], "int64arrai": [931, 954], "a_2": [932, 954], "a_3": [932, 954], "s_from_str_repr": [934, 954], "zero_copy_onli": [936, 954], "writabl": [936, 954], "complet": [936, 954], "view": [936, 954], "presenc": [936, 954], "immut": [936, 954], "127": [942, 954], "seriesview": [945, 954], "arraylik": 954, "dtype_if_empti": 954, "position": 954, "scenario": 954, "through": 954, "chunk_length": 954, "cut": 954, "get_chunk": 954, "has_valid": 954, "hist": 954, "is_boolean": 954, "is_float": 954, "is_numer": 954, "is_sort": 954, "is_tempor": 954, "is_utf8": 954, "new_from_index": 954, "peak_max": 954, "peak_min": 954, "power": 954, "qcut": 954, "set_at_idx": 954}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [961, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [519, 4, 1, "", "all"], [520, 4, 1, "", "any"], [521, 4, 1, "", "apply"], [522, 4, 1, "", "arange"], [523, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [524, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [525, 4, 1, "", "coalesce"], [526, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [527, 4, 1, "", "concat_list"], [528, 4, 1, "", "concat_str"], [529, 4, 1, "", "corr"], [530, 4, 1, "", "count"], [531, 4, 1, "", "cov"], [532, 4, 1, "", "cumfold"], [533, 4, 1, "", "cumreduce"], [534, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [535, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [536, 4, 1, "", "datetime"], [537, 4, 1, "", "duration"], [538, 4, 1, "", "element"], [71, 4, 1, "", "enable_string_cache"], [539, 4, 1, "", "exclude"], [540, 4, 1, "", "first"], [541, 4, 1, "", "fold"], [542, 4, 1, "", "format"], [86, 4, 1, "", "from_arrow"], [87, 4, 1, "", "from_dataframe"], [88, 4, 1, "", "from_dict"], [89, 4, 1, "", "from_dicts"], [543, 4, 1, "", "from_epoch"], [90, 4, 1, "", "from_numpy"], [91, 4, 1, "", "from_pandas"], [92, 4, 1, "", "from_records"], [93, 4, 1, "", "from_repr"], [94, 4, 1, "", "get_dummies"], [95, 4, 1, "", "get_index_type"], [544, 4, 1, "", "groups"], [545, 4, 1, "", "head"], [546, 4, 1, "", "list"], [547, 4, 1, "", "lit"], [548, 4, 1, "", "map"], [549, 4, 1, "", "max"], [550, 4, 1, "", "mean"], [551, 4, 1, "", "median"], [552, 4, 1, "", "min"], [553, 4, 1, "", "n_unique"], [97, 4, 1, "", "ones"], [554, 4, 1, "", "pearson_corr"], [555, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [556, 4, 1, "", "reduce"], [557, 4, 1, "", "repeat"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [558, 4, 1, "", "select"], [116, 4, 1, "", "show_versions"], [559, 4, 1, "", "spearman_rank_corr"], [560, 4, 1, "", "std"], [561, 4, 1, "", "struct"], [562, 4, 1, "", "sum"], [563, 4, 1, "", "tail"], [123, 4, 1, "", "threadpool_size"], [564, 4, 1, "", "var"], [565, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "bottom_k"], [130, 1, 1, "", "clear"], [131, 1, 1, "", "clone"], [132, 2, 1, "", "columns"], [133, 1, 1, "", "corr"], [134, 1, 1, "", "describe"], [135, 1, 1, "", "drop"], [136, 1, 1, "", "drop_in_place"], [137, 1, 1, "", "drop_nulls"], [138, 2, 1, "", "dtypes"], [139, 1, 1, "", "estimated_size"], [140, 1, 1, "", "explode"], [141, 1, 1, "", "extend"], [142, 1, 1, "", "fill_nan"], [143, 1, 1, "", "fill_null"], [144, 1, 1, "", "filter"], [145, 1, 1, "", "find_idx_by_name"], [146, 1, 1, "", "fold"], [147, 1, 1, "", "frame_equal"], [148, 1, 1, "", "get_column"], [149, 1, 1, "", "get_columns"], [150, 1, 1, "", "glimpse"], [151, 1, 1, "", "groupby"], [152, 1, 1, "", "groupby_dynamic"], [153, 1, 1, "", "groupby_rolling"], [154, 1, 1, "", "hash_rows"], [155, 1, 1, "", "head"], [156, 2, 1, "", "height"], [157, 1, 1, "", "hstack"], [158, 1, 1, "", "insert_at_idx"], [159, 1, 1, "", "interpolate"], [160, 1, 1, "", "is_duplicated"], [161, 1, 1, "", "is_empty"], [162, 1, 1, "", "is_unique"], [163, 1, 1, "", "item"], [164, 1, 1, "", "iter_rows"], [165, 1, 1, "", "iter_slices"], [166, 1, 1, "", "join"], [167, 1, 1, "", "join_asof"], [168, 1, 1, "", "lazy"], [169, 1, 1, "", "limit"], [170, 1, 1, "", "max"], [171, 1, 1, "", "mean"], [172, 1, 1, "", "median"], [173, 1, 1, "", "melt"], [174, 1, 1, "", "merge_sorted"], [175, 1, 1, "", "min"], [176, 1, 1, "", "n_chunks"], [177, 1, 1, "", "n_unique"], [178, 1, 1, "", "null_count"], [179, 1, 1, "", "partition_by"], [180, 1, 1, "", "pipe"], [181, 1, 1, "", "pivot"], [182, 1, 1, "", "product"], [183, 1, 1, "", "quantile"], [184, 1, 1, "", "rechunk"], [185, 1, 1, "", "rename"], [186, 1, 1, "", "replace"], [187, 1, 1, "", "replace_at_idx"], [188, 1, 1, "", "reverse"], [189, 1, 1, "", "row"], [190, 1, 1, "", "rows"], [191, 1, 1, "", "sample"], [192, 2, 1, "", "schema"], [193, 1, 1, "", "select"], [194, 2, 1, "", "shape"], [195, 1, 1, "", "shift"], [196, 1, 1, "", "shift_and_fill"], [197, 1, 1, "", "shrink_to_fit"], [198, 1, 1, "", "slice"], [199, 1, 1, "", "sort"], [200, 1, 1, "", "std"], [201, 1, 1, "", "sum"], [202, 1, 1, "", "tail"], [203, 1, 1, "", "take_every"], [204, 1, 1, "", "to_arrow"], [205, 1, 1, "", "to_dict"], [206, 1, 1, "", "to_dicts"], [207, 1, 1, "", "to_dummies"], [208, 1, 1, "", "to_init_repr"], [209, 1, 1, "", "to_numpy"], [210, 1, 1, "", "to_pandas"], [211, 1, 1, "", "to_series"], [212, 1, 1, "", "to_struct"], [213, 1, 1, "", "top_k"], [214, 1, 1, "", "transpose"], [215, 1, 1, "", "unique"], [216, 1, 1, "", "unnest"], [217, 1, 1, "", "unstack"], [218, 1, 1, "", "update"], [219, 1, 1, "", "upsample"], [220, 1, 1, "", "var"], [221, 1, 1, "", "vstack"], [222, 2, 1, "", "width"], [223, 1, 1, "", "with_columns"], [224, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[252, 1, 1, "", "abs"], [253, 1, 1, "", "add"], [254, 1, 1, "", "agg_groups"], [255, 1, 1, "", "alias"], [256, 1, 1, "", "all"], [257, 1, 1, "", "and_"], [258, 1, 1, "", "any"], [259, 1, 1, "", "append"], [260, 1, 1, "", "apply"], [261, 1, 1, "", "arccos"], [262, 1, 1, "", "arccosh"], [263, 1, 1, "", "arcsin"], [264, 1, 1, "", "arcsinh"], [265, 1, 1, "", "arctan"], [266, 1, 1, "", "arctanh"], [267, 1, 1, "", "arg_max"], [268, 1, 1, "", "arg_min"], [269, 1, 1, "", "arg_sort"], [270, 1, 1, "", "arg_true"], [271, 1, 1, "", "arg_unique"], [298, 1, 1, "", "backward_fill"], [304, 1, 1, "", "bottom_k"], [305, 1, 1, "", "cast"], [307, 1, 1, "", "ceil"], [308, 1, 1, "", "clip"], [309, 1, 1, "", "clip_max"], [310, 1, 1, "", "clip_min"], [311, 1, 1, "", "cos"], [312, 1, 1, "", "cosh"], [313, 1, 1, "", "count"], [314, 1, 1, "", "cumcount"], [315, 1, 1, "", "cummax"], [316, 1, 1, "", "cummin"], [317, 1, 1, "", "cumprod"], [318, 1, 1, "", "cumsum"], [319, 1, 1, "", "cumulative_eval"], [320, 1, 1, "", "diff"], [321, 1, 1, "", "dot"], [322, 1, 1, "", "drop_nans"], [323, 1, 1, "", "drop_nulls"], [360, 1, 1, "", "entropy"], [361, 1, 1, "", "eq"], [362, 1, 1, "", "ewm_mean"], [363, 1, 1, "", "ewm_std"], [364, 1, 1, "", "ewm_var"], [365, 1, 1, "", "exclude"], [366, 1, 1, "", "exp"], [367, 1, 1, "", "explode"], [368, 1, 1, "", "extend_constant"], [369, 1, 1, "", "fill_nan"], [370, 1, 1, "", "fill_null"], [371, 1, 1, "", "filter"], [372, 1, 1, "", "first"], [373, 1, 1, "", "flatten"], [374, 1, 1, "", "floor"], [375, 1, 1, "", "floordiv"], [376, 1, 1, "", "forward_fill"], [377, 1, 1, "", "ge"], [378, 1, 1, "", "gt"], [379, 1, 1, "", "hash"], [380, 1, 1, "", "head"], [381, 1, 1, "", "inspect"], [382, 1, 1, "", "interpolate"], [383, 1, 1, "", "is_between"], [384, 1, 1, "", "is_duplicated"], [385, 1, 1, "", "is_finite"], [386, 1, 1, "", "is_first"], [387, 1, 1, "", "is_in"], [388, 1, 1, "", "is_infinite"], [389, 1, 1, "", "is_nan"], [390, 1, 1, "", "is_not"], [391, 1, 1, "", "is_not_nan"], [392, 1, 1, "", "is_not_null"], [393, 1, 1, "", "is_null"], [394, 1, 1, "", "is_unique"], [395, 1, 1, "", "keep_name"], [396, 1, 1, "", "kurtosis"], [397, 1, 1, "", "last"], [398, 1, 1, "", "le"], [399, 1, 1, "", "len"], [400, 1, 1, "", "limit"], [401, 1, 1, "", "list"], [402, 1, 1, "", "log"], [403, 1, 1, "", "log10"], [404, 1, 1, "", "log1p"], [405, 1, 1, "", "lower_bound"], [406, 1, 1, "", "lt"], [407, 1, 1, "", "map"], [408, 1, 1, "", "map_alias"], [409, 1, 1, "", "map_dict"], [410, 1, 1, "", "max"], [411, 1, 1, "", "mean"], [412, 1, 1, "", "median"], [419, 1, 1, "", "min"], [420, 1, 1, "", "mod"], [421, 1, 1, "", "mode"], [422, 1, 1, "", "mul"], [423, 1, 1, "", "n_unique"], [424, 1, 1, "", "nan_max"], [425, 1, 1, "", "nan_min"], [426, 1, 1, "", "ne"], [427, 1, 1, "", "null_count"], [428, 1, 1, "", "or_"], [429, 1, 1, "", "over"], [430, 1, 1, "", "pct_change"], [431, 1, 1, "", "pipe"], [432, 1, 1, "", "pow"], [433, 1, 1, "", "prefix"], [434, 1, 1, "", "product"], [435, 1, 1, "", "quantile"], [436, 1, 1, "", "rank"], [437, 1, 1, "", "rechunk"], [438, 1, 1, "", "reinterpret"], [439, 1, 1, "", "repeat_by"], [440, 1, 1, "", "reshape"], [441, 1, 1, "", "reverse"], [442, 1, 1, "", "rolling_apply"], [443, 1, 1, "", "rolling_max"], [444, 1, 1, "", "rolling_mean"], [445, 1, 1, "", "rolling_median"], [446, 1, 1, "", "rolling_min"], [447, 1, 1, "", "rolling_quantile"], [448, 1, 1, "", "rolling_skew"], [449, 1, 1, "", "rolling_std"], [450, 1, 1, "", "rolling_sum"], [451, 1, 1, "", "rolling_var"], [452, 1, 1, "", "round"], [453, 1, 1, "", "sample"], [454, 1, 1, "", "search_sorted"], [455, 1, 1, "", "set_sorted"], [456, 1, 1, "", "shift"], [457, 1, 1, "", "shift_and_fill"], [458, 1, 1, "", "shrink_dtype"], [459, 1, 1, "", "shuffle"], [460, 1, 1, "", "sign"], [461, 1, 1, "", "sin"], [462, 1, 1, "", "sinh"], [463, 1, 1, "", "skew"], [464, 1, 1, "", "slice"], [465, 1, 1, "", "sort"], [466, 1, 1, "", "sort_by"], [467, 1, 1, "", "sqrt"], [468, 1, 1, "", "std"], [501, 1, 1, "", "sub"], [502, 1, 1, "", "suffix"], [503, 1, 1, "", "sum"], [504, 1, 1, "", "tail"], [505, 1, 1, "", "take"], [506, 1, 1, "", "take_every"], [507, 1, 1, "", "tan"], [508, 1, 1, "", "tanh"], [509, 1, 1, "", "to_physical"], [510, 1, 1, "", "top_k"], [511, 1, 1, "", "truediv"], [512, 1, 1, "", "unique"], [513, 1, 1, "", "unique_counts"], [514, 1, 1, "", "upper_bound"], [515, 1, 1, "", "value_counts"], [516, 1, 1, "", "var"], [517, 1, 1, "", "where"], [518, 1, 1, "", "xor"]], "polars.Expr.arr": [[272, 1, 1, "", "arg_max"], [273, 1, 1, "", "arg_min"], [274, 1, 1, "", "concat"], [275, 1, 1, "", "contains"], [276, 1, 1, "", "count_match"], [277, 1, 1, "", "diff"], [278, 1, 1, "", "eval"], [279, 1, 1, "", "explode"], [280, 1, 1, "", "first"], [281, 1, 1, "", "get"], [282, 1, 1, "", "head"], [283, 1, 1, "", "join"], [284, 1, 1, "", "last"], [285, 1, 1, "", "lengths"], [286, 1, 1, "", "max"], [287, 1, 1, "", "mean"], [288, 1, 1, "", "min"], [289, 1, 1, "", "reverse"], [290, 1, 1, "", "shift"], [291, 1, 1, "", "slice"], [292, 1, 1, "", "sort"], [293, 1, 1, "", "sum"], [294, 1, 1, "", "tail"], [295, 1, 1, "", "take"], [296, 1, 1, "", "to_struct"], [297, 1, 1, "", "unique"]], "polars.Expr.bin": [[299, 1, 1, "", "contains"], [300, 1, 1, "", "decode"], [301, 1, 1, "", "encode"], [302, 1, 1, "", "ends_with"], [303, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[306, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[324, 1, 1, "", "cast_time_unit"], [325, 1, 1, "", "combine"], [326, 1, 1, "", "convert_time_zone"], [327, 1, 1, "", "date"], [328, 1, 1, "", "datetime"], [329, 1, 1, "", "day"], [330, 1, 1, "", "days"], [331, 1, 1, "", "epoch"], [332, 1, 1, "", "hour"], [333, 1, 1, "", "hours"], [334, 1, 1, "", "is_leap_year"], [335, 1, 1, "", "iso_year"], [336, 1, 1, "", "microsecond"], [337, 1, 1, "", "microseconds"], [338, 1, 1, "", "millisecond"], [339, 1, 1, "", "milliseconds"], [340, 1, 1, "", "minute"], [341, 1, 1, "", "minutes"], [342, 1, 1, "", "month"], [343, 1, 1, "", "nanosecond"], [344, 1, 1, "", "nanoseconds"], [345, 1, 1, "", "offset_by"], [346, 1, 1, "", "ordinal_day"], [347, 1, 1, "", "quarter"], [348, 1, 1, "", "replace_time_zone"], [349, 1, 1, "", "round"], [350, 1, 1, "", "second"], [351, 1, 1, "", "seconds"], [352, 1, 1, "", "strftime"], [353, 1, 1, "", "time"], [354, 1, 1, "", "timestamp"], [355, 1, 1, "", "truncate"], [356, 1, 1, "", "week"], [357, 1, 1, "", "weekday"], [358, 1, 1, "", "with_time_unit"], [359, 1, 1, "", "year"]], "polars.Expr.meta": [[413, 1, 1, "", "has_multiple_outputs"], [414, 1, 1, "", "is_regex_projection"], [415, 1, 1, "", "output_name"], [416, 1, 1, "", "pop"], [417, 1, 1, "", "root_names"], [418, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[469, 1, 1, "", "concat"], [470, 1, 1, "", "contains"], [471, 1, 1, "", "count_match"], [472, 1, 1, "", "decode"], [473, 1, 1, "", "encode"], [474, 1, 1, "", "ends_with"], [475, 1, 1, "", "explode"], [476, 1, 1, "", "extract"], [477, 1, 1, "", "extract_all"], [478, 1, 1, "", "json_extract"], [479, 1, 1, "", "json_path_match"], [480, 1, 1, "", "lengths"], [481, 1, 1, "", "ljust"], [482, 1, 1, "", "lstrip"], [483, 1, 1, "", "n_chars"], [484, 1, 1, "", "parse_int"], [485, 1, 1, "", "replace"], [486, 1, 1, "", "replace_all"], [487, 1, 1, "", "rjust"], [488, 1, 1, "", "rstrip"], [489, 1, 1, "", "slice"], [490, 1, 1, "", "split"], [491, 1, 1, "", "split_exact"], [492, 1, 1, "", "splitn"], [493, 1, 1, "", "starts_with"], [494, 1, 1, "", "strip"], [495, 1, 1, "", "strptime"], [496, 1, 1, "", "to_lowercase"], [497, 1, 1, "", "to_uppercase"], [498, 1, 1, "", "zfill"]], "polars.Expr.struct": [[499, 1, 1, "", "field"], [500, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[586, 1, 1, "", "bottom_k"], [587, 1, 1, "", "cache"], [588, 1, 1, "", "clear"], [589, 1, 1, "", "clone"], [590, 1, 1, "", "collect"], [591, 2, 1, "", "columns"], [592, 1, 1, "", "drop"], [593, 1, 1, "", "drop_nulls"], [594, 2, 1, "", "dtypes"], [595, 1, 1, "", "explain"], [596, 1, 1, "", "explode"], [597, 1, 1, "", "fetch"], [598, 1, 1, "", "fill_nan"], [599, 1, 1, "", "fill_null"], [600, 1, 1, "", "filter"], [601, 1, 1, "", "first"], [602, 1, 1, "", "from_json"], [603, 1, 1, "", "groupby"], [604, 1, 1, "", "groupby_dynamic"], [605, 1, 1, "", "groupby_rolling"], [606, 1, 1, "", "head"], [607, 1, 1, "", "inspect"], [608, 1, 1, "", "interpolate"], [609, 1, 1, "", "join"], [610, 1, 1, "", "join_asof"], [611, 1, 1, "", "last"], [612, 1, 1, "", "lazy"], [613, 1, 1, "", "limit"], [614, 1, 1, "", "map"], [615, 1, 1, "", "max"], [616, 1, 1, "", "mean"], [617, 1, 1, "", "median"], [618, 1, 1, "", "melt"], [619, 1, 1, "", "merge_sorted"], [620, 1, 1, "", "min"], [621, 1, 1, "", "pipe"], [622, 1, 1, "", "profile"], [623, 1, 1, "", "quantile"], [624, 1, 1, "", "read_json"], [625, 1, 1, "", "rename"], [626, 1, 1, "", "reverse"], [627, 2, 1, "", "schema"], [628, 1, 1, "", "select"], [629, 1, 1, "", "shift"], [630, 1, 1, "", "shift_and_fill"], [631, 1, 1, "", "show_graph"], [632, 1, 1, "", "sink_ipc"], [633, 1, 1, "", "sink_parquet"], [634, 1, 1, "", "slice"], [635, 1, 1, "", "sort"], [636, 1, 1, "", "std"], [637, 1, 1, "", "sum"], [638, 1, 1, "", "tail"], [639, 1, 1, "", "take_every"], [640, 1, 1, "", "top_k"], [641, 1, 1, "", "unique"], [642, 1, 1, "", "unnest"], [643, 1, 1, "", "update"], [644, 1, 1, "", "var"], [645, 2, 1, "", "width"], [646, 1, 1, "", "with_columns"], [647, 1, 1, "", "with_context"], [648, 1, 1, "", "with_row_count"], [649, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[672, 1, 1, "", "abs"], [673, 1, 1, "", "alias"], [674, 1, 1, "", "all"], [675, 1, 1, "", "any"], [676, 1, 1, "", "append"], [677, 1, 1, "", "apply"], [678, 1, 1, "", "arccos"], [679, 1, 1, "", "arccosh"], [680, 1, 1, "", "arcsin"], [681, 1, 1, "", "arcsinh"], [682, 1, 1, "", "arctan"], [683, 1, 1, "", "arctanh"], [684, 1, 1, "", "arg_max"], [685, 1, 1, "", "arg_min"], [686, 1, 1, "", "arg_sort"], [687, 1, 1, "", "arg_true"], [688, 1, 1, "", "arg_unique"], [689, 3, 1, "", "arr"], [721, 1, 1, "", "bottom_k"], [722, 1, 1, "", "cast"], [723, 3, 1, "", "cat"], [725, 1, 1, "", "ceil"], [726, 1, 1, "", "chunk_lengths"], [727, 1, 1, "", "clear"], [728, 1, 1, "", "clip"], [729, 1, 1, "", "clip_max"], [730, 1, 1, "", "clip_min"], [731, 1, 1, "", "clone"], [732, 1, 1, "", "cos"], [733, 1, 1, "", "cosh"], [734, 1, 1, "", "cummax"], [735, 1, 1, "", "cummin"], [736, 1, 1, "", "cumprod"], [737, 1, 1, "", "cumsum"], [738, 1, 1, "", "cumulative_eval"], [739, 1, 1, "", "cut"], [740, 1, 1, "", "describe"], [741, 1, 1, "", "diff"], [742, 1, 1, "", "dot"], [743, 1, 1, "", "drop_nans"], [744, 1, 1, "", "drop_nulls"], [745, 3, 1, "", "dt"], [786, 3, 1, "", "dtype"], [787, 1, 1, "", "entropy"], [788, 1, 1, "", "estimated_size"], [789, 1, 1, "", "ewm_mean"], [790, 1, 1, "", "ewm_std"], [791, 1, 1, "", "ewm_var"], [792, 1, 1, "", "exp"], [793, 1, 1, "", "explode"], [794, 1, 1, "", "extend_constant"], [795, 1, 1, "", "fill_nan"], [796, 1, 1, "", "fill_null"], [797, 1, 1, "", "filter"], [798, 3, 1, "", "flags"], [799, 1, 1, "", "floor"], [800, 1, 1, "", "get_chunks"], [801, 1, 1, "", "has_validity"], [802, 1, 1, "", "hash"], [803, 1, 1, "", "head"], [804, 1, 1, "", "hist"], [805, 3, 1, "", "inner_dtype"], [806, 1, 1, "", "interpolate"], [807, 1, 1, "", "is_between"], [808, 1, 1, "", "is_boolean"], [809, 1, 1, "", "is_duplicated"], [810, 1, 1, "", "is_empty"], [811, 1, 1, "", "is_finite"], [812, 1, 1, "", "is_first"], [813, 1, 1, "", "is_float"], [814, 1, 1, "", "is_in"], [815, 1, 1, "", "is_infinite"], [816, 1, 1, "", "is_nan"], [817, 1, 1, "", "is_not_nan"], [818, 1, 1, "", "is_not_null"], [819, 1, 1, "", "is_null"], [820, 1, 1, "", "is_numeric"], [821, 1, 1, "", "is_sorted"], [822, 1, 1, "", "is_temporal"], [823, 1, 1, "", "is_unique"], [824, 1, 1, "", "is_utf8"], [825, 1, 1, "", "item"], [826, 1, 1, "", "kurtosis"], [827, 1, 1, "", "len"], [828, 1, 1, "", "limit"], [829, 1, 1, "", "log"], [830, 1, 1, "", "log10"], [831, 1, 1, "", "log1p"], [832, 1, 1, "", "lower_bound"], [833, 1, 1, "", "map_dict"], [834, 1, 1, "", "max"], [835, 1, 1, "", "mean"], [836, 1, 1, "", "median"], [837, 1, 1, "", "min"], [838, 1, 1, "", "mode"], [839, 1, 1, "", "n_chunks"], [840, 1, 1, "", "n_unique"], [841, 3, 1, "", "name"], [842, 1, 1, "", "nan_max"], [843, 1, 1, "", "nan_min"], [844, 1, 1, "", "new_from_index"], [845, 1, 1, "", "null_count"], [846, 1, 1, "", "pct_change"], [847, 1, 1, "", "peak_max"], [848, 1, 1, "", "peak_min"], [849, 1, 1, "", "product"], [850, 1, 1, "", "qcut"], [851, 1, 1, "", "quantile"], [852, 1, 1, "", "rank"], [853, 1, 1, "", "rechunk"], [854, 1, 1, "", "reinterpret"], [855, 1, 1, "", "rename"], [856, 1, 1, "", "reshape"], [857, 1, 1, "", "reverse"], [858, 1, 1, "", "rolling_apply"], [859, 1, 1, "", "rolling_max"], [860, 1, 1, "", "rolling_mean"], [861, 1, 1, "", "rolling_median"], [862, 1, 1, "", "rolling_min"], [863, 1, 1, "", "rolling_quantile"], [864, 1, 1, "", "rolling_skew"], [865, 1, 1, "", "rolling_std"], [866, 1, 1, "", "rolling_sum"], [867, 1, 1, "", "rolling_var"], [868, 1, 1, "", "round"], [869, 1, 1, "", "sample"], [870, 1, 1, "", "search_sorted"], [871, 1, 1, "", "series_equal"], [872, 1, 1, "", "set"], [873, 1, 1, "", "set_at_idx"], [874, 1, 1, "", "set_sorted"], [875, 3, 1, "", "shape"], [876, 1, 1, "", "shift"], [877, 1, 1, "", "shift_and_fill"], [878, 1, 1, "", "shrink_dtype"], [879, 1, 1, "", "shrink_to_fit"], [880, 1, 1, "", "shuffle"], [881, 1, 1, "", "sign"], [882, 1, 1, "", "sin"], [883, 1, 1, "", "sinh"], [884, 1, 1, "", "skew"], [885, 1, 1, "", "slice"], [886, 1, 1, "", "sort"], [887, 1, 1, "", "sqrt"], [888, 1, 1, "", "std"], [889, 3, 1, "", "str"], [924, 1, 1, "", "sum"], [925, 1, 1, "", "tail"], [926, 1, 1, "", "take"], [927, 1, 1, "", "take_every"], [928, 1, 1, "", "tan"], [929, 1, 1, "", "tanh"], [930, 3, 1, "", "time_unit"], [931, 1, 1, "", "to_arrow"], [932, 1, 1, "", "to_dummies"], [933, 1, 1, "", "to_frame"], [934, 1, 1, "", "to_init_repr"], [935, 1, 1, "", "to_list"], [936, 1, 1, "", "to_numpy"], [937, 1, 1, "", "to_pandas"], [938, 1, 1, "", "to_physical"], [939, 1, 1, "", "top_k"], [940, 1, 1, "", "unique"], [941, 1, 1, "", "unique_counts"], [942, 1, 1, "", "upper_bound"], [943, 1, 1, "", "value_counts"], [944, 1, 1, "", "var"], [945, 1, 1, "", "view"], [946, 1, 1, "", "zip_with"]], "polars.Series.arr": [[690, 1, 1, "", "arg_max"], [691, 1, 1, "", "arg_min"], [692, 1, 1, "", "concat"], [693, 1, 1, "", "contains"], [694, 1, 1, "", "count_match"], [695, 1, 1, "", "diff"], [696, 1, 1, "", "eval"], [697, 1, 1, "", "explode"], [698, 1, 1, "", "first"], [699, 1, 1, "", "get"], [700, 1, 1, "", "head"], [701, 1, 1, "", "join"], [702, 1, 1, "", "last"], [703, 1, 1, "", "lengths"], [704, 1, 1, "", "max"], [705, 1, 1, "", "mean"], [706, 1, 1, "", "min"], [707, 1, 1, "", "reverse"], [708, 1, 1, "", "shift"], [709, 1, 1, "", "slice"], [710, 1, 1, "", "sort"], [711, 1, 1, "", "sum"], [712, 1, 1, "", "tail"], [713, 1, 1, "", "take"], [714, 1, 1, "", "to_struct"], [715, 1, 1, "", "unique"]], "polars.Series.bin": [[716, 1, 1, "", "contains"], [717, 1, 1, "", "decode"], [718, 1, 1, "", "encode"], [719, 1, 1, "", "ends_with"], [720, 1, 1, "", "starts_with"]], "polars.Series.cat": [[724, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[746, 1, 1, "", "cast_time_unit"], [747, 1, 1, "", "combine"], [748, 1, 1, "", "convert_time_zone"], [749, 1, 1, "", "date"], [750, 1, 1, "", "datetime"], [751, 1, 1, "", "day"], [752, 1, 1, "", "days"], [753, 1, 1, "", "epoch"], [754, 1, 1, "", "hour"], [755, 1, 1, "", "hours"], [756, 1, 1, "", "is_leap_year"], [757, 1, 1, "", "iso_year"], [758, 1, 1, "", "max"], [759, 1, 1, "", "mean"], [760, 1, 1, "", "median"], [761, 1, 1, "", "microsecond"], [762, 1, 1, "", "microseconds"], [763, 1, 1, "", "millisecond"], [764, 1, 1, "", "milliseconds"], [765, 1, 1, "", "min"], [766, 1, 1, "", "minute"], [767, 1, 1, "", "minutes"], [768, 1, 1, "", "month"], [769, 1, 1, "", "nanosecond"], [770, 1, 1, "", "nanoseconds"], [771, 1, 1, "", "offset_by"], [772, 1, 1, "", "ordinal_day"], [773, 1, 1, "", "quarter"], [774, 1, 1, "", "replace_time_zone"], [775, 1, 1, "", "round"], [776, 1, 1, "", "second"], [777, 1, 1, "", "seconds"], [778, 1, 1, "", "strftime"], [779, 1, 1, "", "time"], [780, 1, 1, "", "timestamp"], [781, 1, 1, "", "truncate"], [782, 1, 1, "", "week"], [783, 1, 1, "", "weekday"], [784, 1, 1, "", "with_time_unit"], [785, 1, 1, "", "year"]], "polars.Series.str": [[890, 1, 1, "", "concat"], [891, 1, 1, "", "contains"], [892, 1, 1, "", "count_match"], [893, 1, 1, "", "decode"], [894, 1, 1, "", "encode"], [895, 1, 1, "", "ends_with"], [896, 1, 1, "", "explode"], [897, 1, 1, "", "extract"], [898, 1, 1, "", "extract_all"], [899, 1, 1, "", "json_extract"], [900, 1, 1, "", "json_path_match"], [901, 1, 1, "", "lengths"], [902, 1, 1, "", "ljust"], [903, 1, 1, "", "lstrip"], [904, 1, 1, "", "n_chars"], [905, 1, 1, "", "parse_int"], [906, 1, 1, "", "replace"], [907, 1, 1, "", "replace_all"], [908, 1, 1, "", "rjust"], [909, 1, 1, "", "rstrip"], [910, 1, 1, "", "slice"], [911, 1, 1, "", "split"], [912, 1, 1, "", "split_exact"], [913, 1, 1, "", "splitn"], [914, 1, 1, "", "starts_with"], [915, 1, 1, "", "strip"], [916, 1, 1, "", "strptime"], [917, 1, 1, "", "to_lowercase"], [918, 1, 1, "", "to_uppercase"], [919, 1, 1, "", "zfill"]], "polars.Series.struct": [[920, 1, 1, "", "field"], [921, 3, 1, "", "fields"], [922, 1, 1, "", "rename_fields"], [923, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[225, 1, 1, "", "__iter__"], [226, 1, 1, "", "agg"], [227, 1, 1, "", "all"], [228, 1, 1, "", "apply"], [229, 1, 1, "", "count"], [230, 1, 1, "", "first"], [231, 1, 1, "", "head"], [232, 1, 1, "", "last"], [233, 1, 1, "", "max"], [234, 1, 1, "", "mean"], [235, 1, 1, "", "median"], [236, 1, 1, "", "min"], [237, 1, 1, "", "n_unique"], [238, 1, 1, "", "quantile"], [239, 1, 1, "", "sum"], [240, 1, 1, "", "tail"]], "polars.exceptions": [[72, 5, 1, "", "ArrowError"], [73, 5, 1, "", "ColumnNotFoundError"], [74, 5, 1, "", "ComputeError"], [75, 5, 1, "", "DuplicateError"], [76, 5, 1, "", "InvalidOperationError"], [77, 5, 1, "", "NoDataError"], [78, 5, 1, "", "NoRowsReturnedError"], [79, 5, 1, "", "PolarsPanicError"], [80, 5, 1, "", "RowsError"], [81, 5, 1, "", "SchemaError"], [82, 5, 1, "", "SchemaFieldNotFoundError"], [83, 5, 1, "", "ShapeError"], [84, 5, 1, "", "StructFieldNotFoundError"], [85, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[96, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[650, 1, 1, "", "agg"], [651, 1, 1, "", "all"], [652, 1, 1, "", "apply"], [653, 1, 1, "", "count"], [654, 1, 1, "", "first"], [655, 1, 1, "", "head"], [656, 1, 1, "", "last"], [657, 1, 1, "", "max"], [658, 1, 1, "", "mean"], [659, 1, 1, "", "median"], [660, 1, 1, "", "min"], [661, 1, 1, "", "n_unique"], [662, 1, 1, "", "quantile"], [663, 1, 1, "", "sum"], [664, 1, 1, "", "tail"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "dataframes"], [122, 4, 1, "", "series"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 141], "api": [1, 61, 62, 63, 64, 583], "provid": 1, "new": 1, "function": [1, 571, 582], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946], "binari": [2, 566, 577, 948], "boolean": [3, 567, 949], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 649], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 327, 535, 749], "datetim": [36, 328, 536, 750], "decim": 37, "durat": [38, 537], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 401, 546, 573, 955], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 582], "struct": [52, 499, 500, 561, 579, 920, 921, 922, 923, 959], "time": [53, 353, 779], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 274, 469, 692, 890], "cut": [69, 739], "date_rang": 70, "enable_string_cach": 71, "except": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 250], "arrowerror": 72, "columnnotfounderror": 73, "computeerror": 74, "duplicateerror": 75, "invalidoperationerror": 76, "nodataerror": 77, "norowsreturnederror": 78, "polarspanicerror": 79, "rowserror": 80, "schemaerror": 81, "schemafieldnotfounderror": 82, "shapeerror": 83, "structfieldnotfounderror": 84, "toomanyrowsreturnederror": 85, "from_arrow": 86, "from_datafram": 87, "from_dict": [88, 89], "from_numpi": 90, "from_panda": 91, "from_record": 92, "from_repr": 93, "get_dummi": 94, "get_index_typ": 95, "io": 96, "csv": [96, 584], "batched_read": 96, "batchedcsvread": [96, 584], "next_batch": 96, "ones": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 624], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 962], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122], "column": [119, 120, 132, 569, 591], "seri": [122, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 954], "threadpool_s": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 251, 585, 671], "__dataframe__": 127, "appli": [128, 228, 260, 521, 652, 677], "bottom_k": [129, 304, 586, 721], "clear": [130, 588, 727], "clone": [131, 589, 731], "corr": [133, 529], "describ": [134, 740], "drop": [135, 592], "drop_in_plac": 136, "drop_nul": [137, 323, 593, 744], "dtype": [138, 594, 786], "estimated_s": [139, 788], "explod": [140, 279, 367, 475, 596, 697, 793, 896], "fill_nan": [142, 369, 598, 795], "fill_nul": [143, 370, 599, 796], "filter": [144, 371, 600, 797], "find_idx_by_nam": 145, "fold": [146, 541], "frame_equ": 147, "get_column": [148, 149], "glimps": 150, "groupbi": [151, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 603, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667], "groupby_dynam": [152, 604], "groupby_rol": [153, 605], "hash_row": 154, "head": [155, 231, 282, 380, 545, 606, 655, 700, 803], "height": 156, "hstack": 157, "insert_at_idx": 158, "interpol": [159, 382, 608, 806], "is_dupl": [160, 384, 809], "is_empti": [161, 810], "is_uniqu": [162, 394, 823], "item": [163, 825], "iter_row": 164, "iter_slic": 165, "join": [166, 283, 609, 701], "join_asof": [167, 610], "lazi": [168, 582, 612], "limit": [169, 400, 613, 828], "max": [170, 233, 286, 410, 549, 615, 657, 704, 758, 834], "mean": [171, 234, 287, 411, 550, 616, 658, 705, 759, 835], "median": [172, 235, 412, 551, 617, 659, 760, 836], "melt": [173, 618], "merge_sort": [174, 619], "min": [175, 236, 288, 419, 552, 620, 660, 706, 765, 837], "n_chunk": [176, 839], "n_uniqu": [177, 237, 423, 553, 661, 840], "null_count": [178, 427, 845], "partition_bi": 179, "pipe": [180, 431, 621], "pivot": 181, "product": [182, 434, 849], "quantil": [183, 238, 435, 555, 623, 662, 851], "rechunk": [184, 437, 853], "renam": [185, 625, 855], "replac": [186, 485, 906], "replace_at_idx": 187, "revers": [188, 289, 441, 626, 707, 857], "row": [189, 190], "sampl": [191, 453, 869], "schema": [192, 627], "select": [193, 248, 558, 576, 628, 670, 957], "shape": [194, 875], "shift": [195, 290, 456, 629, 708, 876], "shift_and_fil": [196, 457, 630, 877], "shrink_to_fit": [197, 879], "slice": [198, 291, 464, 489, 634, 709, 885, 910], "sort": [199, 292, 465, 635, 710, 886], "std": [200, 468, 560, 636, 888], "sum": [201, 239, 293, 503, 562, 637, 663, 711, 924], "tail": [202, 240, 294, 504, 563, 638, 664, 712, 925], "take_everi": [203, 506, 639, 927], "to_arrow": [204, 931], "to_dict": [205, 206], "to_dummi": [207, 932], "to_init_repr": [208, 934], "to_numpi": [209, 936], "to_panda": [210, 937], "to_seri": 211, "to_struct": [212, 296, 714], "top_k": [213, 510, 640, 939], "transpos": 214, "uniqu": [215, 297, 512, 641, 715, 940], "unnest": [216, 642, 923], "unstack": 217, "updat": [218, 643], "upsampl": 219, "var": [220, 516, 564, 644, 944], "vstack": 221, "width": [222, 645], "with_column": [223, 646], "with_row_count": [224, 648], "__iter__": 225, "agg": [226, 650], "all": [227, 256, 519, 651, 674], "count": [229, 313, 530, 653], "first": [230, 280, 372, 540, 601, 654, 698], "last": [232, 284, 397, 611, 656, 702], "attribut": [241, 665, 947], "comput": [242, 570, 951], "descript": [243, 666, 952], "export": [244, 953], "miscellan": [247, 575, 582, 669, 956], "manipul": [248, 576, 670, 957], "data": 249, "type": 249, "numer": [249, 577], "tempor": [249, 580, 960], "nest": 249, "other": 249, "expr": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "ab": [252, 672], "add": 253, "agg_group": 254, "alia": [255, 673], "and_": 257, "ani": [258, 520, 675], "append": [259, 676], "arcco": [261, 678], "arccosh": [262, 679], "arcsin": [263, 680], "arcsinh": [264, 681], "arctan": [265, 682], "arctanh": [266, 683], "arg_max": [267, 272, 684, 690], "arg_min": [268, 273, 685, 691], "arg_sort": [269, 686], "arg_tru": [270, 687], "arg_uniqu": [271, 688], "arr": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "contain": [275, 299, 470, 693, 716, 891], "count_match": [276, 471, 694, 892], "diff": [277, 320, 695, 741], "eval": [278, 696], "get": [281, 699], "length": [285, 480, 703, 901], "take": [295, 505, 713, 926], "backward_fil": 298, "bin": [299, 300, 301, 302, 303, 716, 717, 718, 719, 720], "decod": [300, 472, 717, 893], "encod": [301, 473, 718, 894], "ends_with": [302, 474, 719, 895], "starts_with": [303, 493, 720, 914], "cast": [305, 722], "cat": [306, 723, 724], "set_ord": [306, 724], "ceil": [307, 725], "clip": [308, 728], "clip_max": [309, 729], "clip_min": [310, 730], "co": [311, 732], "cosh": [312, 733], "cumcount": 314, "cummax": [315, 734], "cummin": [316, 735], "cumprod": [317, 736], "cumsum": [318, 534, 737], "cumulative_ev": [319, 738], "dot": [321, 742], "drop_nan": [322, 743], "dt": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785], "cast_time_unit": [324, 746], "combin": [325, 747], "convert_time_zon": [326, 748], "dai": [329, 330, 751, 752], "epoch": [331, 753], "hour": [332, 333, 754, 755], "is_leap_year": [334, 756], "iso_year": [335, 757], "microsecond": [336, 337, 761, 762], "millisecond": [338, 339, 763, 764], "minut": [340, 341, 766, 767], "month": [342, 768], "nanosecond": [343, 344, 769, 770], "offset_bi": [345, 771], "ordinal_dai": [346, 772], "quarter": [347, 773], "replace_time_zon": [348, 774], "round": [349, 452, 775, 868], "second": [350, 351, 776, 777], "strftime": [352, 778], "timestamp": [354, 780], "truncat": [355, 781], "week": [356, 782], "weekdai": [357, 783], "with_time_unit": [358, 784], "year": [359, 785], "entropi": [360, 787], "eq": 361, "ewm_mean": [362, 789], "ewm_std": [363, 790], "ewm_var": [364, 791], "exclud": [365, 539], "exp": [366, 792], "extend_const": [368, 794], "flatten": 373, "floor": [374, 799], "floordiv": 375, "forward_fil": 376, "ge": 377, "gt": 378, "hash": [379, 802], "inspect": [381, 607], "is_between": [383, 807], "is_finit": [385, 811], "is_first": [386, 812], "is_in": [387, 814], "is_infinit": [388, 815], "is_nan": [389, 816], "is_not": 390, "is_not_nan": [391, 817], "is_not_nul": [392, 818], "is_nul": [393, 819], "keep_nam": 395, "kurtosi": [396, 826], "le": 398, "len": [399, 827], "log": [402, 829], "log10": [403, 830], "log1p": [404, 831], "lower_bound": [405, 832], "lt": 406, "map": [407, 548, 614], "map_alia": 408, "map_dict": [409, 833], "meta": [413, 414, 415, 416, 417, 418, 574], "has_multiple_output": 413, "is_regex_project": 414, "output_nam": 415, "pop": 416, "root_nam": 417, "undo_alias": 418, "mod": 420, "mode": [421, 838], "mul": 422, "nan_max": [424, 842], "nan_min": [425, 843], "ne": 426, "or_": 428, "over": 429, "pct_chang": [430, 846], "pow": 432, "prefix": 433, "rank": [436, 852], "reinterpret": [438, 854], "repeat_bi": 439, "reshap": [440, 856], "rolling_appli": [442, 858], "rolling_max": [443, 859], "rolling_mean": [444, 860], "rolling_median": [445, 861], "rolling_min": [446, 862], "rolling_quantil": [447, 863], "rolling_skew": [448, 864], "rolling_std": [449, 865], "rolling_sum": [450, 866], "rolling_var": [451, 867], "search_sort": [454, 870], "set_sort": [455, 874], "shrink_dtyp": [458, 878], "shuffl": [459, 880], "sign": [460, 881], "sin": [461, 882], "sinh": [462, 883], "skew": [463, 884], "sort_bi": 466, "sqrt": [467, 887], "str": [469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919], "extract": [476, 897], "extract_al": [477, 898], "json_extract": [478, 899], "json_path_match": [479, 900], "ljust": [481, 902], "lstrip": [482, 903], "n_char": [483, 904], "parse_int": [484, 905], "replace_al": [486, 907], "rjust": [487, 908], "rstrip": [488, 909], "split": [490, 911], "split_exact": [491, 912], "splitn": [492, 913], "strip": [494, 915], "strptime": [495, 916], "to_lowercas": [496, 917], "to_uppercas": [497, 918], "zfill": [498, 919], "field": [499, 920, 921], "rename_field": [500, 922], "sub": 501, "suffix": 502, "tan": [507, 928], "tanh": [508, 929], "to_phys": [509, 938], "truediv": 511, "unique_count": [513, 941], "upper_bound": [514, 942], "value_count": [515, 943], "where": 517, "xor": 518, "arang": 522, "arg_sort_bi": 523, "avg": 524, "coalesc": 525, "col": 526, "concat_list": 527, "concat_str": 528, "cov": 531, "cumfold": 532, "cumreduc": 533, "element": 538, "format": 542, "from_epoch": 543, "group": 544, "lit": 547, "pearson_corr": 554, "reduc": 556, "repeat": 557, "spearman_rank_corr": 559, "when": 565, "categori": [568, 950], "name": [569, 841], "express": 572, "oper": 577, "conjunct": 577, "comparison": 577, "string": [578, 958], "window": 581, "convers": 582, "eager": 582, "parallel": 582, "refer": 583, "input": 584, "output": 584, "feather": 584, "ipc": 584, "parquet": 584, "databas": 584, "json": 584, "avro": 584, "excel": 584, "delta": 584, "lake": 584, "dataset": 584, "lazyfram": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668], "cach": 587, "collect": 590, "explain": 595, "fetch": 597, "from_json": 602, "profil": 622, "show_graph": 631, "sink_ipc": 632, "sink_parquet": 633, "with_context": 647, "lazygroupbi": [650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "read": 669, "write": 669, "logic": 669, "plan": 669, "chunk_length": 726, "flag": 798, "get_chunk": 800, "has_valid": 801, "hist": 804, "inner_dtyp": 805, "is_boolean": 808, "is_float": 813, "is_numer": 820, "is_sort": 821, "is_tempor": 822, "is_utf8": 824, "new_from_index": 844, "peak_max": 847, "peak_min": 848, "qcut": 850, "series_equ": 871, "set": 872, "set_at_idx": 873, "time_unit": 930, "to_fram": 933, "to_list": 935, "view": 945, "zip_with": 946, "sql": 961, "method": 961, "assert": 962, "properti": 962, "base": 962, "strategi": 962, "helper": 962, "util": 963}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.StringCache": [[51, "polars-stringcache"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.Date": [[35, "polars-date"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Null": [[46, "polars-null"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Float64": [[40, "polars-float64"]], "polars.Int8": [[44, "polars-int8"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Int16": [[41, "polars-int16"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Struct": [[52, "polars-struct"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Int64": [[43, "polars-int64"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Int32": [[42, "polars-int32"]], "polars.Time": [[53, "polars-time"]], "polars.concat": [[68, "polars-concat"]], "polars.Float32": [[39, "polars-float32"]], "polars.Duration": [[38, "polars-duration"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.List": [[45, "polars-list"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Object": [[47, "polars-object"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.from_dicts": [[89, "polars-from-dicts"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.exceptions.TooManyRowsReturnedError": [[85, "polars-exceptions-toomanyrowsreturnederror"]], "polars.cut": [[69, "polars-cut"]], "polars.from_numpy": [[90, "polars-from-numpy"]], "polars.read_database": [[101, "polars-read-database"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.exceptions.StructFieldNotFoundError": [[84, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.describe": [[134, "polars-dataframe-describe"]], "polars.exceptions.ComputeError": [[74, "polars-exceptions-computeerror"]], "polars.DataFrame.drop": [[135, "polars-dataframe-drop"]], "polars.DataFrame.bottom_k": [[129, "polars-dataframe-bottom-k"]], "polars.enable_string_cache": [[71, "polars-enable-string-cache"]], "polars.get_dummies": [[94, "polars-get-dummies"]], "polars.DataFrame.drop_nulls": [[137, "polars-dataframe-drop-nulls"]], "Aggregation": [[126, "aggregation"], [671, "aggregation"], [585, "aggregation"], [251, "aggregation"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.exceptions.InvalidOperationError": [[76, "polars-exceptions-invalidoperationerror"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.DataFrame.clear": [[130, "polars-dataframe-clear"]], "polars.read_json": [[106, "polars-read-json"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.exceptions.RowsError": [[80, "polars-exceptions-rowserror"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.exceptions.ShapeError": [[83, "polars-exceptions-shapeerror"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.threadpool_size": [[123, "polars-threadpool-size"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.exceptions.DuplicateError": [[75, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.series": [[122, "polars-testing-parametric-series"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.exceptions.NoRowsReturnedError": [[78, "polars-exceptions-norowsreturnederror"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.exceptions.ArrowError": [[72, "polars-exceptions-arrowerror"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.from_arrow": [[86, "polars-from-arrow"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.testing.parametric.dataframes": [[121, "polars-testing-parametric-dataframes"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.from_repr": [[93, "polars-from-repr"]], "polars.ones": [[97, "polars-ones"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.DataFrame.drop_in_place": [[136, "polars-dataframe-drop-in-place"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.DataFrame.columns": [[132, "polars-dataframe-columns"]], "polars.from_pandas": [[91, "polars-from-pandas"]], "polars.get_index_type": [[95, "polars-get-index-type"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.DataFrame.clone": [[131, "polars-dataframe-clone"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.exceptions.SchemaError": [[81, "polars-exceptions-schemaerror"]], "polars.zeros": [[124, "polars-zeros"]], "polars.date_range": [[70, "polars-date-range"]], "polars.exceptions.NoDataError": [[77, "polars-exceptions-nodataerror"]], "polars.from_records": [[92, "polars-from-records"]], "polars.from_dict": [[88, "polars-from-dict"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[96, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.ColumnNotFoundError": [[73, "polars-exceptions-columnnotfounderror"]], "polars.from_dataframe": [[87, "polars-from-dataframe"]], "polars.exceptions.SchemaFieldNotFoundError": [[82, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.corr": [[133, "polars-dataframe-corr"]], "polars.exceptions.PolarsPanicError": [[79, "polars-exceptions-polarspanicerror"]], "polars.Series.log": [[829, "polars-series-log"]], "polars.Series.map_dict": [[833, "polars-series-map-dict"]], "polars.Series.reinterpret": [[854, "polars-series-reinterpret"]], "polars.Series.shrink_to_fit": [[879, "polars-series-shrink-to-fit"]], "polars.Series.new_from_index": [[844, "polars-series-new-from-index"]], "polars.Series.rolling_apply": [[858, "polars-series-rolling-apply"]], "polars.Series.rolling_min": [[862, "polars-series-rolling-min"]], "polars.Series.sqrt": [[887, "polars-series-sqrt"]], "polars.Series.rolling_std": [[865, "polars-series-rolling-std"]], "polars.Series.shuffle": [[880, "polars-series-shuffle"]], "polars.Series.nan_min": [[843, "polars-series-nan-min"]], "polars.Series.rename": [[855, "polars-series-rename"]], "polars.Series.log10": [[830, "polars-series-log10"]], "polars.Series.rank": [[852, "polars-series-rank"]], "polars.Series.str": [[889, "polars-series-str"]], "polars.Series.log1p": [[831, "polars-series-log1p"]], "polars.Series.null_count": [[845, "polars-series-null-count"]], "polars.Series.quantile": [[851, "polars-series-quantile"]], "polars.Series.sin": [[882, "polars-series-sin"]], "polars.Series.reverse": [[857, "polars-series-reverse"]], "polars.Series.limit": [[828, "polars-series-limit"]], "polars.Series.pct_change": [[846, "polars-series-pct-change"]], "polars.Series.series_equal": [[871, "polars-series-series-equal"]], "polars.Series.str.encode": [[894, "polars-series-str-encode"]], "polars.Series.search_sorted": [[870, "polars-series-search-sorted"]], "polars.Series.product": [[849, "polars-series-product"]], "polars.Series.mode": [[838, "polars-series-mode"]], "polars.Series.str.ends_with": [[895, "polars-series-str-ends-with"]], "polars.Series.rolling_skew": [[864, "polars-series-rolling-skew"]], "polars.Series.peak_max": [[847, "polars-series-peak-max"]], "polars.Series.rolling_median": [[861, "polars-series-rolling-median"]], "polars.Series.set": [[872, "polars-series-set"]], "polars.Series.str.count_match": [[892, "polars-series-str-count-match"]], "polars.Series.shift": [[876, "polars-series-shift"]], "polars.Series.slice": [[885, "polars-series-slice"]], "polars.Series.name": [[841, "polars-series-name"]], "polars.Series.set_at_idx": [[873, "polars-series-set-at-idx"]], "polars.Series.lower_bound": [[832, "polars-series-lower-bound"]], "polars.Series.n_unique": [[840, "polars-series-n-unique"]], "polars.Series.qcut": [[850, "polars-series-qcut"]], "polars.Series.min": [[837, "polars-series-min"]], "polars.Series.rolling_sum": [[866, "polars-series-rolling-sum"]], "polars.Series.std": [[888, "polars-series-std"]], "polars.Series.skew": [[884, "polars-series-skew"]], "polars.Series.str.contains": [[891, "polars-series-str-contains"]], "polars.Series.sign": [[881, "polars-series-sign"]], "polars.Series.rolling_quantile": [[863, "polars-series-rolling-quantile"]], "polars.Series.shape": [[875, "polars-series-shape"]], "polars.Series.set_sorted": [[874, "polars-series-set-sorted"]], "polars.Series.nan_max": [[842, "polars-series-nan-max"]], "polars.Series.sample": [[869, "polars-series-sample"]], "polars.Series.shift_and_fill": [[877, "polars-series-shift-and-fill"]], "polars.Series.rechunk": [[853, "polars-series-rechunk"]], "polars.Series.str.decode": [[893, "polars-series-str-decode"]], "polars.Series.str.explode": [[896, "polars-series-str-explode"]], "polars.Series.peak_min": [[848, "polars-series-peak-min"]], "polars.Series.mean": [[835, "polars-series-mean"]], "polars.Series.reshape": [[856, "polars-series-reshape"]], "polars.Series.sinh": [[883, "polars-series-sinh"]], "polars.Series.rolling_mean": [[860, "polars-series-rolling-mean"]], "polars.Series.sort": [[886, "polars-series-sort"]], "polars.Series.n_chunks": [[839, "polars-series-n-chunks"]], "polars.Series.str.concat": [[890, "polars-series-str-concat"]], "polars.Series.rolling_max": [[859, "polars-series-rolling-max"]], "polars.Series.round": [[868, "polars-series-round"]], "polars.Series.shrink_dtype": [[878, "polars-series-shrink-dtype"]], "polars.Series.median": [[836, "polars-series-median"]], "polars.Series.max": [[834, "polars-series-max"]], "polars.Series.rolling_var": [[867, "polars-series-rolling-var"]], "polars.Series.entropy": [[787, "polars-series-entropy"]], "polars.Series.inner_dtype": [[805, "polars-series-inner-dtype"]], "polars.Series.dt.truncate": [[781, "polars-series-dt-truncate"]], "polars.Series.is_numeric": [[820, "polars-series-is-numeric"]], "polars.Series.dtype": [[786, "polars-series-dtype"]], "polars.Series.is_nan": [[816, "polars-series-is-nan"]], "polars.Series.dt.milliseconds": [[764, "polars-series-dt-milliseconds"]], "polars.Series.dt.replace_time_zone": [[774, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.month": [[768, "polars-series-dt-month"]], "polars.Series.dt.minutes": [[767, "polars-series-dt-minutes"]], "polars.Series.hist": [[804, "polars-series-hist"]], "polars.Series.len": [[827, "polars-series-len"]], "polars.Series.item": [[825, "polars-series-item"]], "polars.Series.dt.second": [[776, "polars-series-dt-second"]], "polars.Series.dt.nanoseconds": [[770, "polars-series-dt-nanoseconds"]], "polars.Series.dt.median": [[760, "polars-series-dt-median"]], "polars.Series.dt.seconds": [[777, "polars-series-dt-seconds"]], "polars.Series.dt.time": [[779, "polars-series-dt-time"]], "polars.Series.ewm_var": [[791, "polars-series-ewm-var"]], "polars.Series.dt.timestamp": [[780, "polars-series-dt-timestamp"]], "polars.Series.hash": [[802, "polars-series-hash"]], "polars.Series.floor": [[799, "polars-series-floor"]], "polars.Series.is_boolean": [[808, "polars-series-is-boolean"]], "polars.Series.is_not_nan": [[817, "polars-series-is-not-nan"]], "polars.Series.dt.year": [[785, "polars-series-dt-year"]], "polars.Series.dt.with_time_unit": [[784, "polars-series-dt-with-time-unit"]], "polars.Series.is_temporal": [[822, "polars-series-is-temporal"]], "polars.Series.ewm_std": [[790, "polars-series-ewm-std"]], "polars.Series.is_null": [[819, "polars-series-is-null"]], "polars.Series.is_utf8": [[824, "polars-series-is-utf8"]], "polars.Series.is_in": [[814, "polars-series-is-in"]], "polars.Series.dt.weekday": [[783, "polars-series-dt-weekday"]], "polars.Series.estimated_size": [[788, "polars-series-estimated-size"]], "polars.Series.get_chunks": [[800, "polars-series-get-chunks"]], "polars.Series.is_infinite": [[815, "polars-series-is-infinite"]], "polars.Series.is_sorted": [[821, "polars-series-is-sorted"]], "polars.Series.is_unique": [[823, "polars-series-is-unique"]], "polars.Series.ewm_mean": [[789, "polars-series-ewm-mean"]], "polars.Series.dt.strftime": [[778, "polars-series-dt-strftime"]], "polars.Series.dt.microsecond": [[761, "polars-series-dt-microsecond"]], "polars.Series.fill_null": [[796, "polars-series-fill-null"]], "polars.Series.has_validity": [[801, "polars-series-has-validity"]], "polars.Series.dt.ordinal_day": [[772, "polars-series-dt-ordinal-day"]], "polars.Series.flags": [[798, "polars-series-flags"]], "polars.Series.is_empty": [[810, "polars-series-is-empty"]], "polars.Series.is_finite": [[811, "polars-series-is-finite"]], "polars.Series.is_first": [[812, "polars-series-is-first"]], "polars.Series.dt.week": [[782, "polars-series-dt-week"]], "polars.Series.filter": [[797, "polars-series-filter"]], "polars.Series.is_float": [[813, "polars-series-is-float"]], "polars.Series.exp": [[792, "polars-series-exp"]], "polars.Series.is_between": [[807, "polars-series-is-between"]], "polars.Series.dt.nanosecond": [[769, "polars-series-dt-nanosecond"]], "polars.Series.head": [[803, "polars-series-head"]], "polars.Series.extend_constant": [[794, "polars-series-extend-constant"]], "polars.Series.dt.millisecond": [[763, "polars-series-dt-millisecond"]], "polars.Series.explode": [[793, "polars-series-explode"]], "polars.Series.fill_nan": [[795, "polars-series-fill-nan"]], "polars.Series.is_duplicated": [[809, "polars-series-is-duplicated"]], "polars.Series.kurtosis": [[826, "polars-series-kurtosis"]], "polars.Series.dt.mean": [[759, "polars-series-dt-mean"]], "polars.Series.dt.minute": [[766, "polars-series-dt-minute"]], "polars.Series.dt.offset_by": [[771, "polars-series-dt-offset-by"]], "polars.Series.dt.round": [[775, "polars-series-dt-round"]], "polars.Series.interpolate": [[806, "polars-series-interpolate"]], "polars.Series.is_not_null": [[818, "polars-series-is-not-null"]], "polars.Series.dt.quarter": [[773, "polars-series-dt-quarter"]], "polars.Series.dt.microseconds": [[762, "polars-series-dt-microseconds"]], "polars.Series.dt.min": [[765, "polars-series-dt-min"]], "polars.Series.arr.get": [[699, "polars-series-arr-get"]], "polars.Series.bin.starts_with": [[720, "polars-series-bin-starts-with"]], "polars.Series.arr.join": [[701, "polars-series-arr-join"]], "polars.Series.cummin": [[735, "polars-series-cummin"]], "polars.Series.arr.sort": [[710, "polars-series-arr-sort"]], "polars.Series.arr.max": [[704, "polars-series-arr-max"]], "polars.Series.arr.head": [[700, "polars-series-arr-head"]], "polars.Series.clone": [[731, "polars-series-clone"]], "polars.Series.clip_max": [[729, "polars-series-clip-max"]], "polars.Series.describe": [[740, "polars-series-describe"]], "polars.Series.arr.shift": [[708, "polars-series-arr-shift"]], "polars.Series.dt.cast_time_unit": [[746, "polars-series-dt-cast-time-unit"]], "polars.Series.arr.reverse": [[707, "polars-series-arr-reverse"]], "polars.Series.arr.last": [[702, "polars-series-arr-last"]], "polars.Series.arr.slice": [[709, "polars-series-arr-slice"]], "polars.Series.cumprod": [[736, "polars-series-cumprod"]], "polars.Series.dt.datetime": [[750, "polars-series-dt-datetime"]], "polars.Series.bin.ends_with": [[719, "polars-series-bin-ends-with"]], "polars.Series.cos": [[732, "polars-series-cos"]], "polars.Series.cumulative_eval": [[738, "polars-series-cumulative-eval"]], "polars.Series.dt.hours": [[755, "polars-series-dt-hours"]], "polars.Series.arr.eval": [[696, "polars-series-arr-eval"]], "polars.Series.arr.take": [[713, "polars-series-arr-take"]], "polars.Series.dot": [[742, "polars-series-dot"]], "polars.Series.arr.mean": [[705, "polars-series-arr-mean"]], "polars.Series.arr.contains": [[693, "polars-series-arr-contains"]], "polars.Series.bottom_k": [[721, "polars-series-bottom-k"]], "polars.Series.dt.is_leap_year": [[756, "polars-series-dt-is-leap-year"]], "polars.Series.arr.min": [[706, "polars-series-arr-min"]], "polars.Series.arr.count_match": [[694, "polars-series-arr-count-match"]], "polars.Series.arr.tail": [[712, "polars-series-arr-tail"]], "polars.Series.cummax": [[734, "polars-series-cummax"]], "polars.Series.dt.convert_time_zone": [[748, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.iso_year": [[757, "polars-series-dt-iso-year"]], "polars.Series.arr.arg_min": [[691, "polars-series-arr-arg-min"]], "polars.Series.arr.explode": [[697, "polars-series-arr-explode"]], "polars.Series.bin.contains": [[716, "polars-series-bin-contains"]], "polars.Series.bin.encode": [[718, "polars-series-bin-encode"]], "polars.Series.dt.day": [[751, "polars-series-dt-day"]], "polars.Series.chunk_lengths": [[726, "polars-series-chunk-lengths"]], "polars.Series.arr.concat": [[692, "polars-series-arr-concat"]], "polars.Series.diff": [[741, "polars-series-diff"]], "polars.Series.ceil": [[725, "polars-series-ceil"]], "polars.Series.cat": [[723, "polars-series-cat"]], "polars.Series.dt.epoch": [[753, "polars-series-dt-epoch"]], "polars.Series.clip": [[728, "polars-series-clip"]], "polars.Series.dt": [[745, "polars-series-dt"]], "polars.Series.clear": [[727, "polars-series-clear"]], "polars.Series.arr.arg_max": [[690, "polars-series-arr-arg-max"]], "polars.Series.clip_min": [[730, "polars-series-clip-min"]], "polars.Series.cumsum": [[737, "polars-series-cumsum"]], "polars.Series.dt.days": [[752, "polars-series-dt-days"]], "polars.Series.drop_nans": [[743, "polars-series-drop-nans"]], "polars.Series.arr.to_struct": [[714, "polars-series-arr-to-struct"]], "polars.Series.arr.lengths": [[703, "polars-series-arr-lengths"]], "polars.Series.dt.max": [[758, "polars-series-dt-max"]], "polars.Series.arr.sum": [[711, "polars-series-arr-sum"]], "polars.Series.dt.hour": [[754, "polars-series-dt-hour"]], "polars.Series.dt.combine": [[747, "polars-series-dt-combine"]], "polars.Series.arr.diff": [[695, "polars-series-arr-diff"]], "polars.Series.cosh": [[733, "polars-series-cosh"]], "polars.Series.arr.unique": [[715, "polars-series-arr-unique"]], "polars.Series.arr.first": [[698, "polars-series-arr-first"]], "polars.Series.cut": [[739, "polars-series-cut"]], "polars.Series.bin.decode": [[717, "polars-series-bin-decode"]], "polars.Series.dt.date": [[749, "polars-series-dt-date"]], "polars.Series.cat.set_ordering": [[724, "polars-series-cat-set-ordering"]], "polars.Series.drop_nulls": [[744, "polars-series-drop-nulls"]], "polars.Series.cast": [[722, "polars-series-cast"]], "polars.Series.zip_with": [[946, "polars-series-zip-with"]], "polars.Series.tail": [[925, "polars-series-tail"]], "polars.Series.unique_counts": [[941, "polars-series-unique-counts"]], "Computation": [[951, "computation"], [570, "computation"], [242, "computation"]], "Descriptive": [[952, "descriptive"], [666, "descriptive"], [243, "descriptive"]], "polars.Series.str.parse_int": [[905, "polars-series-str-parse-int"]], "polars.Series.str.splitn": [[913, "polars-series-str-splitn"]], "SQL": [[961, "sql"]], "Methods": [[961, "methods"]], "polars.Series.struct.fields": [[921, "polars-series-struct-fields"]], "polars.Series.str.lengths": [[901, "polars-series-str-lengths"]], "polars.Series.to_dummies": [[932, "polars-series-to-dummies"]], "polars.Series.value_counts": [[943, "polars-series-value-counts"]], "polars.Series.str.lstrip": [[903, "polars-series-str-lstrip"]], "polars.Series.str.extract_all": [[898, "polars-series-str-extract-all"]], "polars.Series.struct.field": [[920, "polars-series-struct-field"]], "polars.Series.str.json_extract": [[899, "polars-series-str-json-extract"]], "polars.Series.upper_bound": [[942, "polars-series-upper-bound"]], "polars.Series.sum": [[924, "polars-series-sum"]], "polars.Series.take_every": [[927, "polars-series-take-every"]], "Miscellaneous": [[956, "miscellaneous"], [669, "miscellaneous"], [582, "miscellaneous"], [575, "miscellaneous"], [247, "miscellaneous"]], "Series": [[954, "series"]], "Testing": [[962, "testing"]], "Asserts": [[962, "asserts"]], "Property-based testing": [[962, "property-based-testing"]], "Strategies": [[962, "strategies"]], "Strategy helpers": [[962, "strategy-helpers"]], "polars.Series.to_frame": [[933, "polars-series-to-frame"]], "polars.Series.to_physical": [[938, "polars-series-to-physical"]], "polars.Series.str.starts_with": [[914, "polars-series-str-starts-with"]], "Boolean": [[949, "boolean"], [567, "boolean"]], "polars.Series.str.replace": [[906, "polars-series-str-replace"]], "polars.Series.tan": [[928, "polars-series-tan"]], "Categories": [[950, "categories"], [568, "categories"]], "Export": [[953, "export"], [244, "export"]], "polars.Series.str.replace_all": [[907, "polars-series-str-replace-all"]], "polars.Series.struct.unnest": [[923, "polars-series-struct-unnest"]], "polars.Series.time_unit": [[930, "polars-series-time-unit"]], "polars.Series.take": [[926, "polars-series-take"]], "polars.Series.str.extract": [[897, "polars-series-str-extract"]], "polars.Series.str.zfill": [[919, "polars-series-str-zfill"]], "Manipulation/selection": [[957, "manipulation-selection"], [670, "manipulation-selection"], [576, "manipulation-selection"], [248, "manipulation-selection"]], "polars.Series.str.to_lowercase": [[917, "polars-series-str-to-lowercase"]], "polars.Series.top_k": [[939, "polars-series-top-k"]], "Temporal": [[960, "temporal"], [580, "temporal"], [249, "temporal"]], "List": [[955, "list"], [573, "list"]], "polars.Series.struct.rename_fields": [[922, "polars-series-struct-rename-fields"]], "polars.Series.to_pandas": [[937, "polars-series-to-pandas"]], "polars.Series.str.rjust": [[908, "polars-series-str-rjust"]], "polars.Series.str.strip": [[915, "polars-series-str-strip"]], "polars.Series.tanh": [[929, "polars-series-tanh"]], "polars.Series.to_numpy": [[936, "polars-series-to-numpy"]], "polars.Series.str.split_exact": [[912, "polars-series-str-split-exact"]], "polars.Series.str.split": [[911, "polars-series-str-split"]], "polars.Series.str.strptime": [[916, "polars-series-str-strptime"]], "polars.Series.str.n_chars": [[904, "polars-series-str-n-chars"]], "String": [[958, "string"], [578, "string"]], "Attributes": [[947, "attributes"], [665, "attributes"], [241, "attributes"]], "polars.Series.str.ljust": [[902, "polars-series-str-ljust"]], "polars.Series.to_arrow": [[931, "polars-series-to-arrow"]], "polars.Series.unique": [[940, "polars-series-unique"]], "polars.Series.str.rstrip": [[909, "polars-series-str-rstrip"]], "polars.Series.var": [[944, "polars-series-var"]], "polars.Series.str.slice": [[910, "polars-series-str-slice"]], "polars.Series.str.to_uppercase": [[918, "polars-series-str-to-uppercase"]], "polars.Series.to_list": [[935, "polars-series-to-list"]], "polars.Series.str.json_path_match": [[900, "polars-series-str-json-path-match"]], "Binary": [[948, "binary"], [566, "binary"], [577, "binary"]], "Utils": [[963, "utils"]], "polars.Series.to_init_repr": [[934, "polars-series-to-init-repr"]], "Struct": [[959, "struct"], [579, "struct"]], "polars.Series.view": [[945, "polars-series-view"]], "polars.Series.arr": [[689, "polars-series-arr"]], "polars.LazyFrame.with_columns": [[646, "polars-lazyframe-with-columns"]], "polars.Series.arg_unique": [[688, "polars-series-arg-unique"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[651, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arccos": [[678, "polars-series-arccos"]], "polars.LazyFrame.read_json": [[624, "polars-lazyframe-read-json"]], "polars.LazyFrame.take_every": [[639, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[663, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.alias": [[673, "polars-series-alias"]], "polars.LazyFrame.tail": [[638, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[653, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arcsin": [[680, "polars-series-arcsin"]], "polars.Series.arcsinh": [[681, "polars-series-arcsinh"]], "polars.Series.arctanh": [[683, "polars-series-arctanh"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[654, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.unique": [[641, "polars-lazyframe-unique"]], "polars.Series.arg_max": [[684, "polars-series-arg-max"]], "polars.LazyFrame.slice": [[634, "polars-lazyframe-slice"]], "polars.LazyFrame.var": [[644, "polars-lazyframe-var"]], "polars.LazyFrame.sum": [[637, "polars-lazyframe-sum"]], "polars.LazyFrame.with_context": [[647, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[662, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.all": [[674, "polars-series-all"]], "polars.Series.arccosh": [[679, "polars-series-arccosh"]], "polars.Series.arg_min": [[685, "polars-series-arg-min"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[652, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arg_true": [[687, "polars-series-arg-true"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[657, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[658, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[664, "polars-lazyframe-groupby-lazygroupby-tail"]], "LazyFrame": [[668, "lazyframe"]], "polars.LazyFrame.width": [[645, "polars-lazyframe-width"]], "polars.LazyFrame.select": [[628, "polars-lazyframe-select"]], "polars.LazyFrame.sort": [[635, "polars-lazyframe-sort"]], "polars.Series.arctan": [[682, "polars-series-arctan"]], "polars.Series.abs": [[672, "polars-series-abs"]], "GroupBy": [[667, "groupby"], [245, "groupby"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[659, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[655, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.shift_and_fill": [[630, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.top_k": [[640, "polars-lazyframe-top-k"]], "polars.LazyFrame.unnest": [[642, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[656, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.any": [[675, "polars-series-any"]], "polars.LazyFrame.profile": [[622, "polars-lazyframe-profile"]], "polars.LazyFrame.show_graph": [[631, "polars-lazyframe-show-graph"]], "polars.Series.arg_sort": [[686, "polars-series-arg-sort"]], "polars.LazyFrame.write_json": [[649, "polars-lazyframe-write-json"]], "polars.LazyFrame.sink_ipc": [[632, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.pipe": [[621, "polars-lazyframe-pipe"]], "polars.LazyFrame.with_row_count": [[648, "polars-lazyframe-with-row-count"]], "Read/write logical plan": [[669, "read-write-logical-plan"]], "polars.LazyFrame.schema": [[627, "polars-lazyframe-schema"]], "polars.LazyFrame.quantile": [[623, "polars-lazyframe-quantile"]], "polars.Series.append": [[676, "polars-series-append"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[660, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.apply": [[677, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[661, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.reverse": [[626, "polars-lazyframe-reverse"]], "polars.LazyFrame.sink_parquet": [[633, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.std": [[636, "polars-lazyframe-std"]], "polars.LazyFrame.update": [[643, "polars-lazyframe-update"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[650, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.shift": [[629, "polars-lazyframe-shift"]], "polars.LazyFrame.rename": [[625, "polars-lazyframe-rename"]], "polars.element": [[538, "polars-element"]], "polars.groups": [[544, "polars-groups"]], "polars.Expr.str.to_uppercase": [[497, "polars-expr-str-to-uppercase"]], "polars.Expr.suffix": [[502, "polars-expr-suffix"]], "polars.Expr.str.split_exact": [[491, "polars-expr-str-split-exact"]], "polars.Expr.unique": [[512, "polars-expr-unique"]], "polars.Expr.xor": [[518, "polars-expr-xor"]], "polars.apply": [[521, "polars-apply"]], "polars.coalesce": [[525, "polars-coalesce"]], "polars.Expr.str.rjust": [[487, "polars-expr-str-rjust"]], "polars.first": [[540, "polars-first"]], "polars.Expr.str.rstrip": [[488, "polars-expr-str-rstrip"]], "polars.Expr.top_k": [[510, "polars-expr-top-k"]], "polars.date": [[535, "polars-date"]], "polars.Expr.tan": [[507, "polars-expr-tan"]], "polars.duration": [[537, "polars-duration"]], "polars.Expr.str.replace": [[485, "polars-expr-str-replace"]], "polars.Expr.sum": [[503, "polars-expr-sum"]], "polars.cumsum": [[534, "polars-cumsum"]], "polars.format": [[542, "polars-format"]], "polars.from_epoch": [[543, "polars-from-epoch"]], "polars.datetime": [[536, "polars-datetime"]], "polars.concat_list": [[527, "polars-concat-list"]], "polars.cumfold": [[532, "polars-cumfold"]], "polars.Expr.str.split": [[490, "polars-expr-str-split"]], "polars.Expr.str.splitn": [[492, "polars-expr-str-splitn"]], "polars.Expr.where": [[517, "polars-expr-where"]], "polars.col": [[526, "polars-col"]], "polars.Expr.str.replace_all": [[486, "polars-expr-str-replace-all"]], "polars.fold": [[541, "polars-fold"]], "polars.count": [[530, "polars-count"]], "polars.Expr.to_physical": [[509, "polars-expr-to-physical"]], "polars.arange": [[522, "polars-arange"]], "polars.Expr.value_counts": [[515, "polars-expr-value-counts"]], "polars.corr": [[529, "polars-corr"]], "polars.cov": [[531, "polars-cov"]], "polars.Expr.take": [[505, "polars-expr-take"]], "polars.Expr.var": [[516, "polars-expr-var"]], "polars.lit": [[547, "polars-lit"]], "polars.Expr.str.zfill": [[498, "polars-expr-str-zfill"]], "polars.Expr.str.strip": [[494, "polars-expr-str-strip"]], "polars.max": [[549, "polars-max"]], "polars.Expr.str.to_lowercase": [[496, "polars-expr-str-to-lowercase"]], "polars.exclude": [[539, "polars-exclude"]], "polars.any": [[520, "polars-any"]], "polars.Expr.unique_counts": [[513, "polars-expr-unique-counts"]], "polars.Expr.str.strptime": [[495, "polars-expr-str-strptime"]], "polars.median": [[551, "polars-median"]], "polars.Expr.sub": [[501, "polars-expr-sub"]], "polars.Expr.struct.rename_fields": [[500, "polars-expr-struct-rename-fields"]], "polars.Expr.str.starts_with": [[493, "polars-expr-str-starts-with"]], "polars.Expr.take_every": [[506, "polars-expr-take-every"]], "polars.Expr.str.slice": [[489, "polars-expr-str-slice"]], "polars.map": [[548, "polars-map"]], "polars.Expr.str.parse_int": [[484, "polars-expr-str-parse-int"]], "polars.mean": [[550, "polars-mean"]], "polars.avg": [[524, "polars-avg"]], "polars.concat_str": [[528, "polars-concat-str"]], "polars.Expr.tail": [[504, "polars-expr-tail"]], "polars.Expr.upper_bound": [[514, "polars-expr-upper-bound"]], "polars.all": [[519, "polars-all"]], "polars.Expr.struct.field": [[499, "polars-expr-struct-field"]], "polars.list": [[546, "polars-list"]], "polars.cumreduce": [[533, "polars-cumreduce"]], "polars.head": [[545, "polars-head"]], "polars.Expr.str.n_chars": [[483, "polars-expr-str-n-chars"]], "polars.arg_sort_by": [[523, "polars-arg-sort-by"]], "polars.Expr.tanh": [[508, "polars-expr-tanh"]], "polars.Expr.truediv": [[511, "polars-expr-truediv"]], "polars.Expr.n_unique": [[423, "polars-expr-n-unique"]], "polars.Expr.nan_max": [[424, "polars-expr-nan-max"]], "polars.Expr.rank": [[436, "polars-expr-rank"]], "polars.Expr.str.concat": [[469, "polars-expr-str-concat"]], "polars.Expr.round": [[452, "polars-expr-round"]], "polars.Expr.str.ends_with": [[474, "polars-expr-str-ends-with"]], "polars.Expr.shuffle": [[459, "polars-expr-shuffle"]], "polars.Expr.str.explode": [[475, "polars-expr-str-explode"]], "polars.Expr.str.json_path_match": [[479, "polars-expr-str-json-path-match"]], "polars.Expr.meta.output_name": [[415, "polars-expr-meta-output-name"]], "polars.Expr.slice": [[464, "polars-expr-slice"]], "polars.Expr.pct_change": [[430, "polars-expr-pct-change"]], "polars.Expr.reshape": [[440, "polars-expr-reshape"]], "polars.Expr.mode": [[421, "polars-expr-mode"]], "polars.Expr.std": [[468, "polars-expr-std"]], "polars.Expr.rolling_quantile": [[447, "polars-expr-rolling-quantile"]], "polars.Expr.str.ljust": [[481, "polars-expr-str-ljust"]], "polars.Expr.quantile": [[435, "polars-expr-quantile"]], "polars.Expr.pipe": [[431, "polars-expr-pipe"]], "polars.Expr.null_count": [[427, "polars-expr-null-count"]], "polars.Expr.str.encode": [[473, "polars-expr-str-encode"]], "polars.Expr.ne": [[426, "polars-expr-ne"]], "polars.Expr.prefix": [[433, "polars-expr-prefix"]], "polars.Expr.shift": [[456, "polars-expr-shift"]], "polars.Expr.rolling_apply": [[442, "polars-expr-rolling-apply"]], "polars.Expr.rechunk": [[437, "polars-expr-rechunk"]], "polars.Expr.repeat_by": [[439, "polars-expr-repeat-by"]], "polars.Expr.sin": [[461, "polars-expr-sin"]], "polars.Expr.sqrt": [[467, "polars-expr-sqrt"]], "polars.Expr.str.count_match": [[471, "polars-expr-str-count-match"]], "polars.Expr.search_sorted": [[454, "polars-expr-search-sorted"]], "polars.Expr.rolling_var": [[451, "polars-expr-rolling-var"]], "polars.Expr.sign": [[460, "polars-expr-sign"]], "polars.Expr.str.lengths": [[480, "polars-expr-str-lengths"]], "polars.Expr.min": [[419, "polars-expr-min"]], "polars.Expr.str.extract": [[476, "polars-expr-str-extract"]], "polars.Expr.shift_and_fill": [[457, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_max": [[443, "polars-expr-rolling-max"]], "polars.Expr.str.lstrip": [[482, "polars-expr-str-lstrip"]], "polars.Expr.reverse": [[441, "polars-expr-reverse"]], "polars.Expr.mul": [[422, "polars-expr-mul"]], "polars.Expr.str.extract_all": [[477, "polars-expr-str-extract-all"]], "polars.Expr.reinterpret": [[438, "polars-expr-reinterpret"]], "polars.Expr.sort_by": [[466, "polars-expr-sort-by"]], "polars.Expr.sinh": [[462, "polars-expr-sinh"]], "polars.Expr.meta.root_names": [[417, "polars-expr-meta-root-names"]], "polars.Expr.mod": [[420, "polars-expr-mod"]], "polars.Expr.rolling_skew": [[448, "polars-expr-rolling-skew"]], "polars.Expr.meta.is_regex_projection": [[414, "polars-expr-meta-is-regex-projection"]], "polars.Expr.str.decode": [[472, "polars-expr-str-decode"]], "polars.Expr.rolling_std": [[449, "polars-expr-rolling-std"]], "polars.Expr.rolling_min": [[446, "polars-expr-rolling-min"]], "polars.Expr.pow": [[432, "polars-expr-pow"]], "polars.Expr.set_sorted": [[455, "polars-expr-set-sorted"]], "polars.Expr.sample": [[453, "polars-expr-sample"]], "polars.Expr.shrink_dtype": [[458, "polars-expr-shrink-dtype"]], "polars.Expr.or_": [[428, "polars-expr-or"]], "polars.Expr.sort": [[465, "polars-expr-sort"]], "polars.Expr.skew": [[463, "polars-expr-skew"]], "polars.Expr.str.contains": [[470, "polars-expr-str-contains"]], "polars.Expr.nan_min": [[425, "polars-expr-nan-min"]], "polars.Expr.over": [[429, "polars-expr-over"]], "polars.Expr.product": [[434, "polars-expr-product"]], "polars.Expr.rolling_sum": [[450, "polars-expr-rolling-sum"]], "polars.Expr.rolling_median": [[445, "polars-expr-rolling-median"]], "polars.Expr.meta.undo_aliases": [[418, "polars-expr-meta-undo-aliases"]], "polars.Expr.str.json_extract": [[478, "polars-expr-str-json-extract"]], "polars.Expr.rolling_mean": [[444, "polars-expr-rolling-mean"]], "polars.Expr.meta.pop": [[416, "polars-expr-meta-pop"]], "polars.Expr.head": [[380, "polars-expr-head"]], "polars.Expr.dt.weekday": [[357, "polars-expr-dt-weekday"]], "polars.Expr.is_in": [[387, "polars-expr-is-in"]], "polars.Expr.fill_null": [[370, "polars-expr-fill-null"]], "polars.Expr.first": [[372, "polars-expr-first"]], "polars.Expr.max": [[410, "polars-expr-max"]], "polars.Expr.dt.strftime": [[352, "polars-expr-dt-strftime"]], "polars.Expr.exclude": [[365, "polars-expr-exclude"]], "polars.Expr.ge": [[377, "polars-expr-ge"]], "polars.Expr.map_dict": [[409, "polars-expr-map-dict"]], "polars.Expr.entropy": [[360, "polars-expr-entropy"]], "polars.Expr.forward_fill": [[376, "polars-expr-forward-fill"]], "polars.Expr.floor": [[374, "polars-expr-floor"]], "polars.Expr.interpolate": [[382, "polars-expr-interpolate"]], "polars.Expr.is_finite": [[385, "polars-expr-is-finite"]], "polars.Expr.is_not": [[390, "polars-expr-is-not"]], "polars.Expr.last": [[397, "polars-expr-last"]], "polars.Expr.kurtosis": [[396, "polars-expr-kurtosis"]], "polars.Expr.dt.ordinal_day": [[346, "polars-expr-dt-ordinal-day"]], "polars.Expr.log": [[402, "polars-expr-log"]], "polars.Expr.meta.has_multiple_outputs": [[413, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.is_nan": [[389, "polars-expr-is-nan"]], "polars.Expr.filter": [[371, "polars-expr-filter"]], "polars.Expr.le": [[398, "polars-expr-le"]], "polars.Expr.dt.week": [[356, "polars-expr-dt-week"]], "polars.Expr.extend_constant": [[368, "polars-expr-extend-constant"]], "polars.Expr.is_between": [[383, "polars-expr-is-between"]], "polars.Expr.log1p": [[404, "polars-expr-log1p"]], "polars.Expr.map": [[407, "polars-expr-map"]], "polars.Expr.list": [[401, "polars-expr-list"]], "polars.Expr.dt.round": [[349, "polars-expr-dt-round"]], "polars.Expr.ewm_var": [[364, "polars-expr-ewm-var"]], "polars.Expr.is_first": [[386, "polars-expr-is-first"]], "polars.Expr.fill_nan": [[369, "polars-expr-fill-nan"]], "polars.Expr.map_alias": [[408, "polars-expr-map-alias"]], "polars.Expr.dt.offset_by": [[345, "polars-expr-dt-offset-by"]], "polars.Expr.flatten": [[373, "polars-expr-flatten"]], "polars.Expr.gt": [[378, "polars-expr-gt"]], "polars.Expr.exp": [[366, "polars-expr-exp"]], "polars.Expr.dt.quarter": [[347, "polars-expr-dt-quarter"]], "polars.Expr.is_not_null": [[392, "polars-expr-is-not-null"]], "polars.Expr.limit": [[400, "polars-expr-limit"]], "polars.Expr.is_duplicated": [[384, "polars-expr-is-duplicated"]], "polars.Expr.is_not_nan": [[391, "polars-expr-is-not-nan"]], "polars.Expr.lower_bound": [[405, "polars-expr-lower-bound"]], "polars.Expr.dt.replace_time_zone": [[348, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.seconds": [[351, "polars-expr-dt-seconds"]], "polars.Expr.dt.second": [[350, "polars-expr-dt-second"]], "polars.Expr.dt.year": [[359, "polars-expr-dt-year"]], "polars.Expr.eq": [[361, "polars-expr-eq"]], "polars.Expr.is_infinite": [[388, "polars-expr-is-infinite"]], "polars.Expr.log10": [[403, "polars-expr-log10"]], "polars.Expr.lt": [[406, "polars-expr-lt"]], "polars.Expr.median": [[412, "polars-expr-median"]], "polars.Expr.dt.time": [[353, "polars-expr-dt-time"]], "polars.Expr.explode": [[367, "polars-expr-explode"]], "polars.Expr.floordiv": [[375, "polars-expr-floordiv"]], "polars.Expr.keep_name": [[395, "polars-expr-keep-name"]], "polars.Expr.dt.truncate": [[355, "polars-expr-dt-truncate"]], "polars.Expr.ewm_mean": [[362, "polars-expr-ewm-mean"]], "polars.Expr.dt.timestamp": [[354, "polars-expr-dt-timestamp"]], "polars.Expr.mean": [[411, "polars-expr-mean"]], "polars.Expr.inspect": [[381, "polars-expr-inspect"]], "polars.Expr.is_null": [[393, "polars-expr-is-null"]], "polars.Expr.is_unique": [[394, "polars-expr-is-unique"]], "polars.Expr.hash": [[379, "polars-expr-hash"]], "polars.Expr.dt.with_time_unit": [[358, "polars-expr-dt-with-time-unit"]], "polars.Expr.len": [[399, "polars-expr-len"]], "polars.Expr.ewm_std": [[363, "polars-expr-ewm-std"]], "polars.Expr.dt.date": [[327, "polars-expr-dt-date"]], "polars.Expr.count": [[313, "polars-expr-count"]], "polars.Expr.bin.decode": [[300, "polars-expr-bin-decode"]], "polars.Expr.cast": [[305, "polars-expr-cast"]], "polars.Expr.arr.eval": [[278, "polars-expr-arr-eval"]], "polars.Expr.dt.datetime": [[328, "polars-expr-dt-datetime"]], "polars.Expr.cos": [[311, "polars-expr-cos"]], "polars.Expr.cumsum": [[318, "polars-expr-cumsum"]], "polars.Expr.dt.is_leap_year": [[334, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.milliseconds": [[339, "polars-expr-dt-milliseconds"]], "polars.Expr.clip_max": [[309, "polars-expr-clip-max"]], "polars.Expr.arr.get": [[281, "polars-expr-arr-get"]], "polars.Expr.arr.min": [[288, "polars-expr-arr-min"]], "polars.Expr.drop_nans": [[322, "polars-expr-drop-nans"]], "polars.Expr.dt.cast_time_unit": [[324, "polars-expr-dt-cast-time-unit"]], "polars.Expr.clip": [[308, "polars-expr-clip"]], "polars.Expr.arr.shift": [[290, "polars-expr-arr-shift"]], "polars.Expr.dt.millisecond": [[338, "polars-expr-dt-millisecond"]], "polars.Expr.bin.ends_with": [[302, "polars-expr-bin-ends-with"]], "polars.Expr.arr.lengths": [[285, "polars-expr-arr-lengths"]], "polars.Expr.arr.diff": [[277, "polars-expr-arr-diff"]], "polars.Expr.arr.join": [[283, "polars-expr-arr-join"]], "polars.Expr.arr.max": [[286, "polars-expr-arr-max"]], "polars.Expr.drop_nulls": [[323, "polars-expr-drop-nulls"]], "polars.Expr.arr.head": [[282, "polars-expr-arr-head"]], "polars.Expr.diff": [[320, "polars-expr-diff"]], "polars.Expr.arr.count_match": [[276, "polars-expr-arr-count-match"]], "polars.Expr.cosh": [[312, "polars-expr-cosh"]], "polars.Expr.cummax": [[315, "polars-expr-cummax"]], "polars.Expr.dt.microseconds": [[337, "polars-expr-dt-microseconds"]], "polars.Expr.dt.days": [[330, "polars-expr-dt-days"]], "polars.Expr.arr.unique": [[297, "polars-expr-arr-unique"]], "polars.Expr.arr.take": [[295, "polars-expr-arr-take"]], "polars.Expr.arr.slice": [[291, "polars-expr-arr-slice"]], "polars.Expr.cumprod": [[317, "polars-expr-cumprod"]], "polars.Expr.dt.minutes": [[341, "polars-expr-dt-minutes"]], "polars.Expr.dt.combine": [[325, "polars-expr-dt-combine"]], "polars.Expr.dt.day": [[329, "polars-expr-dt-day"]], "polars.Expr.cumulative_eval": [[319, "polars-expr-cumulative-eval"]], "polars.Expr.bin.contains": [[299, "polars-expr-bin-contains"]], "polars.Expr.cumcount": [[314, "polars-expr-cumcount"]], "polars.Expr.bin.starts_with": [[303, "polars-expr-bin-starts-with"]], "polars.Expr.arr.sum": [[293, "polars-expr-arr-sum"]], "polars.Expr.dot": [[321, "polars-expr-dot"]], "polars.Expr.dt.epoch": [[331, "polars-expr-dt-epoch"]], "polars.Expr.arr.reverse": [[289, "polars-expr-arr-reverse"]], "polars.Expr.dt.microsecond": [[336, "polars-expr-dt-microsecond"]], "polars.Expr.bottom_k": [[304, "polars-expr-bottom-k"]], "polars.Expr.ceil": [[307, "polars-expr-ceil"]], "polars.Expr.backward_fill": [[298, "polars-expr-backward-fill"]], "polars.Expr.dt.nanosecond": [[343, "polars-expr-dt-nanosecond"]], "polars.Expr.bin.encode": [[301, "polars-expr-bin-encode"]], "polars.Expr.cat.set_ordering": [[306, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.tail": [[294, "polars-expr-arr-tail"]], "polars.Expr.arr.explode": [[279, "polars-expr-arr-explode"]], "polars.Expr.dt.month": [[342, "polars-expr-dt-month"]], "polars.Expr.dt.hour": [[332, "polars-expr-dt-hour"]], "polars.Expr.dt.iso_year": [[335, "polars-expr-dt-iso-year"]], "polars.Expr.arr.mean": [[287, "polars-expr-arr-mean"]], "polars.Expr.arr.to_struct": [[296, "polars-expr-arr-to-struct"]], "polars.Expr.dt.hours": [[333, "polars-expr-dt-hours"]], "polars.Expr.cummin": [[316, "polars-expr-cummin"]], "polars.Expr.clip_min": [[310, "polars-expr-clip-min"]], "polars.Expr.dt.convert_time_zone": [[326, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.minute": [[340, "polars-expr-dt-minute"]], "polars.Expr.arr.sort": [[292, "polars-expr-arr-sort"]], "polars.Expr.arr.first": [[280, "polars-expr-arr-first"]], "polars.Expr.arr.last": [[284, "polars-expr-arr-last"]], "polars.Expr.dt.nanoseconds": [[344, "polars-expr-dt-nanoseconds"]], "polars.LazyFrame.columns": [[591, "polars-lazyframe-columns"]], "polars.LazyFrame.lazy": [[612, "polars-lazyframe-lazy"]], "polars.LazyFrame.merge_sorted": [[619, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.explode": [[596, "polars-lazyframe-explode"]], "API reference": [[583, "api-reference"]], "polars.struct": [[561, "polars-struct"]], "polars.LazyFrame.clear": [[588, "polars-lazyframe-clear"]], "Input/output": [[584, "input-output"]], "CSV": [[584, "csv"]], "Feather/ IPC": [[584, "feather-ipc"]], "Parquet": [[584, "parquet"]], "Database": [[584, "database"]], "JSON": [[584, "json"]], "AVRO": [[584, "avro"]], "Excel": [[584, "excel"]], "Delta Lake": [[584, "delta-lake"]], "Datasets": [[584, "datasets"]], "BatchedCsvReader": [[584, "batchedcsvreader"]], "polars.sum": [[562, "polars-sum"]], "polars.LazyFrame.explain": [[595, "polars-lazyframe-explain"]], "polars.LazyFrame.interpolate": [[608, "polars-lazyframe-interpolate"]], "polars.LazyFrame.limit": [[613, "polars-lazyframe-limit"]], "Expressions": [[572, "expressions"]], "polars.LazyFrame.cache": [[587, "polars-lazyframe-cache"]], "polars.LazyFrame.mean": [[616, "polars-lazyframe-mean"]], "polars.LazyFrame.clone": [[589, "polars-lazyframe-clone"]], "polars.LazyFrame.fill_nan": [[598, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.collect": [[590, "polars-lazyframe-collect"]], "polars.LazyFrame.head": [[606, "polars-lazyframe-head"]], "polars.LazyFrame.fetch": [[597, "polars-lazyframe-fetch"]], "polars.LazyFrame.bottom_k": [[586, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.last": [[611, "polars-lazyframe-last"]], "polars.reduce": [[556, "polars-reduce"]], "polars.n_unique": [[553, "polars-n-unique"]], "polars.select": [[558, "polars-select"]], "Functions": [[582, "functions"], [571, "functions"]], "Conversion": [[582, "conversion"]], "Eager/Lazy functions": [[582, "eager-lazy-functions"]], "Parallelization": [[582, "parallelization"]], "StringCache": [[582, "stringcache"]], "polars.quantile": [[555, "polars-quantile"]], "polars.LazyFrame.fill_null": [[599, "polars-lazyframe-fill-null"]], "polars.tail": [[563, "polars-tail"]], "polars.pearson_corr": [[554, "polars-pearson-corr"]], "polars.LazyFrame.max": [[615, "polars-lazyframe-max"]], "polars.LazyFrame.drop": [[592, "polars-lazyframe-drop"]], "polars.LazyFrame.join_asof": [[610, "polars-lazyframe-join-asof"]], "polars.LazyFrame.first": [[601, "polars-lazyframe-first"]], "Operators": [[577, "operators"]], "Conjunction": [[577, "conjunction"]], "Comparison": [[577, "comparison"]], "Numeric": [[577, "numeric"], [249, "numeric"]], "polars.repeat": [[557, "polars-repeat"]], "polars.LazyFrame.groupby": [[603, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_dynamic": [[604, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.from_json": [[602, "polars-lazyframe-from-json"]], "polars.LazyFrame.inspect": [[607, "polars-lazyframe-inspect"]], "Columns / names": [[569, "columns-names"]], "polars.LazyFrame.map": [[614, "polars-lazyframe-map"]], "polars.LazyFrame.drop_nulls": [[593, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.min": [[620, "polars-lazyframe-min"]], "polars.LazyFrame.filter": [[600, "polars-lazyframe-filter"]], "polars.std": [[560, "polars-std"]], "polars.spearman_rank_corr": [[559, "polars-spearman-rank-corr"]], "Window": [[581, "window"]], "polars.LazyFrame.dtypes": [[594, "polars-lazyframe-dtypes"]], "polars.var": [[564, "polars-var"]], "polars.min": [[552, "polars-min"]], "polars.when": [[565, "polars-when"]], "Meta": [[574, "meta"]], "polars.LazyFrame.groupby_rolling": [[605, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.join": [[609, "polars-lazyframe-join"]], "polars.LazyFrame.median": [[617, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[618, "polars-lazyframe-melt"]], "polars.DataFrame.median": [[172, "polars-dataframe-median"]], "polars.DataFrame.row": [[189, "polars-dataframe-row"]], "polars.DataFrame.item": [[163, "polars-dataframe-item"]], "polars.DataFrame.select": [[193, "polars-dataframe-select"]], "polars.DataFrame.explode": [[140, "polars-dataframe-explode"]], "polars.DataFrame.shape": [[194, "polars-dataframe-shape"]], "polars.DataFrame.get_columns": [[149, "polars-dataframe-get-columns"]], "polars.DataFrame.partition_by": [[179, "polars-dataframe-partition-by"]], "polars.DataFrame.replace_at_idx": [[187, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_arrow": [[204, "polars-dataframe-to-arrow"]], "polars.DataFrame.join": [[166, "polars-dataframe-join"]], "polars.DataFrame.sample": [[191, "polars-dataframe-sample"]], "polars.DataFrame.melt": [[173, "polars-dataframe-melt"]], "polars.DataFrame.frame_equal": [[147, "polars-dataframe-frame-equal"]], "polars.DataFrame.slice": [[198, "polars-dataframe-slice"]], "polars.DataFrame.null_count": [[178, "polars-dataframe-null-count"]], "polars.DataFrame.shift_and_fill": [[196, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shift": [[195, "polars-dataframe-shift"]], "polars.DataFrame.iter_slices": [[165, "polars-dataframe-iter-slices"]], "polars.DataFrame.estimated_size": [[139, "polars-dataframe-estimated-size"]], "polars.DataFrame.extend": [[141, "polars-dataframe-extend"]], "polars.DataFrame.limit": [[169, "polars-dataframe-limit"]], "polars.DataFrame.product": [[182, "polars-dataframe-product"]], "polars.DataFrame.take_every": [[203, "polars-dataframe-take-every"]], "polars.DataFrame.merge_sorted": [[174, "polars-dataframe-merge-sorted"]], "polars.DataFrame.insert_at_idx": [[158, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.groupby": [[151, "polars-dataframe-groupby"]], "polars.DataFrame.glimpse": [[150, "polars-dataframe-glimpse"]], "polars.DataFrame.head": [[155, "polars-dataframe-head"]], "polars.DataFrame.reverse": [[188, "polars-dataframe-reverse"]], "polars.DataFrame.sum": [[201, "polars-dataframe-sum"]], "polars.DataFrame.is_duplicated": [[160, "polars-dataframe-is-duplicated"]], "polars.DataFrame.groupby_dynamic": [[152, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.groupby_rolling": [[153, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[154, "polars-dataframe-hash-rows"]], "polars.DataFrame.schema": [[192, "polars-dataframe-schema"]], "polars.DataFrame.fold": [[146, "polars-dataframe-fold"]], "polars.DataFrame.interpolate": [[159, "polars-dataframe-interpolate"]], "polars.DataFrame.replace": [[186, "polars-dataframe-replace"]], "polars.DataFrame.fill_nan": [[142, "polars-dataframe-fill-nan"]], "polars.DataFrame.filter": [[144, "polars-dataframe-filter"]], "polars.DataFrame.rename": [[185, "polars-dataframe-rename"]], "polars.DataFrame.min": [[175, "polars-dataframe-min"]], "polars.DataFrame.dtypes": [[138, "polars-dataframe-dtypes"]], "polars.DataFrame.sort": [[199, "polars-dataframe-sort"]], "polars.DataFrame.n_unique": [[177, "polars-dataframe-n-unique"]], "polars.DataFrame.pivot": [[181, "polars-dataframe-pivot"]], "polars.DataFrame.find_idx_by_name": [[145, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.std": [[200, "polars-dataframe-std"]], "polars.DataFrame.max": [[170, "polars-dataframe-max"]], "polars.DataFrame.to_dict": [[205, "polars-dataframe-to-dict"]], "polars.DataFrame.rows": [[190, "polars-dataframe-rows"]], "polars.DataFrame.mean": [[171, "polars-dataframe-mean"]], "polars.DataFrame.to_dicts": [[206, "polars-dataframe-to-dicts"]], "polars.DataFrame.height": [[156, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[157, "polars-dataframe-hstack"]], "polars.DataFrame.quantile": [[183, "polars-dataframe-quantile"]], "polars.DataFrame.iter_rows": [[164, "polars-dataframe-iter-rows"]], "polars.DataFrame.fill_null": [[143, "polars-dataframe-fill-null"]], "polars.DataFrame.shrink_to_fit": [[197, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.join_asof": [[167, "polars-dataframe-join-asof"]], "polars.DataFrame.tail": [[202, "polars-dataframe-tail"]], "polars.DataFrame.rechunk": [[184, "polars-dataframe-rechunk"]], "polars.DataFrame.is_unique": [[162, "polars-dataframe-is-unique"]], "polars.DataFrame.lazy": [[168, "polars-dataframe-lazy"]], "polars.DataFrame.pipe": [[180, "polars-dataframe-pipe"]], "polars.DataFrame.n_chunks": [[176, "polars-dataframe-n-chunks"]], "polars.DataFrame.get_column": [[148, "polars-dataframe-get-column"]], "polars.DataFrame.is_empty": [[161, "polars-dataframe-is-empty"]], "polars.dataframe.groupby.GroupBy.n_unique": [[237, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.all": [[227, "polars-dataframe-groupby-groupby-all"]], "DataFrame": [[246, "dataframe"]], "polars.dataframe.groupby.GroupBy.__iter__": [[225, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.alias": [[255, "polars-expr-alias"]], "polars.Expr.arccos": [[261, "polars-expr-arccos"]], "polars.DataFrame.to_series": [[211, "polars-dataframe-to-series"]], "polars.Expr.arcsin": [[263, "polars-expr-arcsin"]], "polars.DataFrame.update": [[218, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.head": [[231, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.upsample": [[219, "polars-dataframe-upsample"]], "polars.Expr.arr.arg_max": [[272, "polars-expr-arr-arg-max"]], "polars.DataFrame.with_row_count": [[224, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_columns": [[223, "polars-dataframe-with-columns"]], "polars.Expr.arctanh": [[266, "polars-expr-arctanh"]], "polars.dataframe.groupby.GroupBy.mean": [[234, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.quantile": [[238, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arg_min": [[268, "polars-expr-arg-min"]], "polars.DataFrame.unstack": [[217, "polars-dataframe-unstack"]], "Exceptions": [[250, "exceptions"]], "polars.dataframe.groupby.GroupBy.max": [[233, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.all": [[256, "polars-expr-all"]], "polars.DataFrame.var": [[220, "polars-dataframe-var"]], "Data types": [[249, "data-types"]], "Nested": [[249, "nested"]], "Other": [[249, "other"]], "polars.Expr.abs": [[252, "polars-expr-abs"]], "polars.Expr.add": [[253, "polars-expr-add"]], "polars.DataFrame.to_numpy": [[209, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.sum": [[239, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_max": [[267, "polars-expr-arg-max"]], "polars.DataFrame.unique": [[215, "polars-dataframe-unique"]], "polars.Expr.and_": [[257, "polars-expr-and"]], "polars.Expr.arr.contains": [[275, "polars-expr-arr-contains"]], "polars.DataFrame.to_dummies": [[207, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_struct": [[212, "polars-dataframe-to-struct"]], "polars.DataFrame.vstack": [[221, "polars-dataframe-vstack"]], "polars.Expr.any": [[258, "polars-expr-any"]], "polars.DataFrame.unnest": [[216, "polars-dataframe-unnest"]], "polars.DataFrame.width": [[222, "polars-dataframe-width"]], "polars.DataFrame.to_init_repr": [[208, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.min": [[236, "polars-dataframe-groupby-groupby-min"]], "polars.dataframe.groupby.GroupBy.last": [[232, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arccosh": [[262, "polars-expr-arccosh"]], "polars.Expr.apply": [[260, "polars-expr-apply"]], "polars.Expr.arg_sort": [[269, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.tail": [[240, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arg_true": [[270, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[271, "polars-expr-arg-unique"]], "polars.DataFrame.to_pandas": [[210, "polars-dataframe-to-pandas"]], "polars.Expr.append": [[259, "polars-expr-append"]], "polars.dataframe.groupby.GroupBy.first": [[230, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.arctan": [[265, "polars-expr-arctan"]], "polars.Expr.arr.arg_min": [[273, "polars-expr-arr-arg-min"]], "polars.dataframe.groupby.GroupBy.count": [[229, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arcsinh": [[264, "polars-expr-arcsinh"]], "polars.Expr.arr.concat": [[274, "polars-expr-arr-concat"]], "polars.dataframe.groupby.GroupBy.median": [[235, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.apply": [[228, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.transpose": [[214, "polars-dataframe-transpose"]], "polars.Expr.agg_groups": [[254, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.agg": [[226, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.top_k": [[213, "polars-dataframe-top-k"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "enable_string_cache() (in module polars)": [[71, "polars.enable_string_cache"]], "arrowerror": [[72, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[73, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[74, "polars.exceptions.ComputeError"]], "duplicateerror": [[75, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[76, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[77, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[78, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[79, "polars.exceptions.PolarsPanicError"]], "rowserror": [[80, "polars.exceptions.RowsError"]], "schemaerror": [[81, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[82, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[83, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[84, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[85, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[86, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[87, "polars.from_dataframe"]], "from_dict() (in module polars)": [[88, "polars.from_dict"]], "from_dicts() (in module polars)": [[89, "polars.from_dicts"]], "from_numpy() (in module polars)": [[90, "polars.from_numpy"]], "from_pandas() (in module polars)": [[91, "polars.from_pandas"]], "from_records() (in module polars)": [[92, "polars.from_records"]], "from_repr() (in module polars)": [[93, "polars.from_repr"]], "get_dummies() (in module polars)": [[94, "polars.get_dummies"]], "get_index_type() (in module polars)": [[95, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[96, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[97, "polars.ones"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[123, "polars.threadpool_size"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[129, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[130, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[131, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[132, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[133, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[134, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[135, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[136, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[137, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[138, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[139, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[140, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[141, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[142, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[143, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[144, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[145, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[146, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[147, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[148, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[149, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[150, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[151, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[153, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[154, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[155, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[156, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[157, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[158, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[159, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[160, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[161, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[162, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[163, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[164, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[165, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[166, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[167, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[168, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[169, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[170, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[171, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[172, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[173, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[174, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[175, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[176, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[177, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[178, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[179, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[180, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[181, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[182, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[183, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[184, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[185, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[186, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[187, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[188, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[189, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[190, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[191, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[192, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[193, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[194, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[195, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[196, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[197, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[198, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[199, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[200, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[201, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[202, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[203, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[204, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[205, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[206, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[207, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[208, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[209, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[210, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[211, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[212, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[213, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[214, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[215, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[216, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[217, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[218, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[219, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[220, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[221, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[222, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[223, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[224, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[252, "polars.Expr.abs"]], "add() (polars.expr method)": [[253, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[254, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[255, "polars.Expr.alias"]], "all() (polars.expr method)": [[256, "polars.Expr.all"]], "and_() (polars.expr method)": [[257, "polars.Expr.and_"]], "any() (polars.expr method)": [[258, "polars.Expr.any"]], "append() (polars.expr method)": [[259, "polars.Expr.append"]], "apply() (polars.expr method)": [[260, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[261, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[262, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[263, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[264, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[265, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[266, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[267, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[268, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[269, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[270, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[271, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[272, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[273, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[274, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[275, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[276, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[277, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[278, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[279, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[280, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[281, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[282, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[283, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[284, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[285, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[286, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[287, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[288, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[289, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[290, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[291, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[292, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[293, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[294, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[295, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[296, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[297, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[298, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[299, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[300, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[301, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[302, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[303, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[304, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[305, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[306, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[307, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[308, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[309, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[310, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[311, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[312, "polars.Expr.cosh"]], "count() (polars.expr method)": [[313, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[314, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[315, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[316, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[317, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[318, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[319, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[320, "polars.Expr.diff"]], "dot() (polars.expr method)": [[321, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[322, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[323, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[324, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[325, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[326, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[327, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[328, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[329, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[330, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[331, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[332, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[333, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[334, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[335, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[336, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[338, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[339, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[340, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[341, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[342, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[343, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[344, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[345, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[346, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[347, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[348, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[349, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[350, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[351, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[352, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[353, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[354, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[355, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[356, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[357, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[358, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[359, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[360, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[361, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[362, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[363, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[364, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[365, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[366, "polars.Expr.exp"]], "explode() (polars.expr method)": [[367, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[368, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[369, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[370, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[371, "polars.Expr.filter"]], "first() (polars.expr method)": [[372, "polars.Expr.first"]], "flatten() (polars.expr method)": [[373, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[374, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[375, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[376, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[377, "polars.Expr.ge"]], "gt() (polars.expr method)": [[378, "polars.Expr.gt"]], "hash() (polars.expr method)": [[379, "polars.Expr.hash"]], "head() (polars.expr method)": [[380, "polars.Expr.head"]], "inspect() (polars.expr method)": [[381, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[382, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[383, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[384, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[385, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[386, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[387, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[388, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[389, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[390, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[391, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[392, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[393, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[394, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[395, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[396, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[397, "polars.Expr.last"]], "le() (polars.expr method)": [[398, "polars.Expr.le"]], "len() (polars.expr method)": [[399, "polars.Expr.len"]], "limit() (polars.expr method)": [[400, "polars.Expr.limit"]], "list() (polars.expr method)": [[401, "polars.Expr.list"]], "log() (polars.expr method)": [[402, "polars.Expr.log"]], "log10() (polars.expr method)": [[403, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[404, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[405, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[406, "polars.Expr.lt"]], "map() (polars.expr method)": [[407, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[408, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[409, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[410, "polars.Expr.max"]], "mean() (polars.expr method)": [[411, "polars.Expr.mean"]], "median() (polars.expr method)": [[412, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[413, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[414, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[415, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[416, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[417, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[418, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[419, "polars.Expr.min"]], "mod() (polars.expr method)": [[420, "polars.Expr.mod"]], "mode() (polars.expr method)": [[421, "polars.Expr.mode"]], "mul() (polars.expr method)": [[422, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[423, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[424, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[425, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[426, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[427, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[428, "polars.Expr.or_"]], "over() (polars.expr method)": [[429, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[430, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[431, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[432, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[433, "polars.Expr.prefix"]], "product() (polars.expr method)": [[434, "polars.Expr.product"]], "quantile() (polars.expr method)": [[435, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[436, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[437, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[438, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[439, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[440, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[441, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[442, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[443, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[444, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[445, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[446, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[447, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[448, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[449, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[450, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[451, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[452, "polars.Expr.round"]], "sample() (polars.expr method)": [[453, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[454, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[455, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[456, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[457, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[458, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[459, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[460, "polars.Expr.sign"]], "sin() (polars.expr method)": [[461, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[462, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[463, "polars.Expr.skew"]], "slice() (polars.expr method)": [[464, "polars.Expr.slice"]], "sort() (polars.expr method)": [[465, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[466, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[467, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[468, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[469, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[470, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[471, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[472, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[473, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[474, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[475, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[476, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[477, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[478, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[479, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[480, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[481, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[482, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[483, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[484, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[485, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[486, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[487, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[488, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[489, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[490, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[491, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[492, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[493, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[494, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[495, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[496, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[497, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[498, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[499, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[500, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[501, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[502, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[503, "polars.Expr.sum"]], "tail() (polars.expr method)": [[504, "polars.Expr.tail"]], "take() (polars.expr method)": [[505, "polars.Expr.take"]], "take_every() (polars.expr method)": [[506, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[507, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[508, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[509, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[510, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[511, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[512, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[513, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[514, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[515, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[516, "polars.Expr.var"]], "where() (polars.expr method)": [[517, "polars.Expr.where"]], "xor() (polars.expr method)": [[518, "polars.Expr.xor"]], "all() (in module polars)": [[519, "polars.all"]], "any() (in module polars)": [[520, "polars.any"]], "apply() (in module polars)": [[521, "polars.apply"]], "arange() (in module polars)": [[522, "polars.arange"]], "arg_sort_by() (in module polars)": [[523, "polars.arg_sort_by"]], "avg() (in module polars)": [[524, "polars.avg"]], "coalesce() (in module polars)": [[525, "polars.coalesce"]], "col() (in module polars)": [[526, "polars.col"]], "concat_list() (in module polars)": [[527, "polars.concat_list"]], "concat_str() (in module polars)": [[528, "polars.concat_str"]], "corr() (in module polars)": [[529, "polars.corr"]], "count() (in module polars)": [[530, "polars.count"]], "cov() (in module polars)": [[531, "polars.cov"]], "cumfold() (in module polars)": [[532, "polars.cumfold"]], "cumreduce() (in module polars)": [[533, "polars.cumreduce"]], "cumsum() (in module polars)": [[534, "polars.cumsum"]], "date() (in module polars)": [[535, "polars.date"]], "datetime() (in module polars)": [[536, "polars.datetime"]], "duration() (in module polars)": [[537, "polars.duration"]], "element() (in module polars)": [[538, "polars.element"]], "exclude() (in module polars)": [[539, "polars.exclude"]], "first() (in module polars)": [[540, "polars.first"]], "fold() (in module polars)": [[541, "polars.fold"]], "format() (in module polars)": [[542, "polars.format"]], "from_epoch() (in module polars)": [[543, "polars.from_epoch"]], "groups() (in module polars)": [[544, "polars.groups"]], "head() (in module polars)": [[545, "polars.head"]], "list() (in module polars)": [[546, "polars.list"]], "lit() (in module polars)": [[547, "polars.lit"]], "map() (in module polars)": [[548, "polars.map"]], "max() (in module polars)": [[549, "polars.max"]], "mean() (in module polars)": [[550, "polars.mean"]], "median() (in module polars)": [[551, "polars.median"]], "min() (in module polars)": [[552, "polars.min"]], "n_unique() (in module polars)": [[553, "polars.n_unique"]], "pearson_corr() (in module polars)": [[554, "polars.pearson_corr"]], "quantile() (in module polars)": [[555, "polars.quantile"]], "reduce() (in module polars)": [[556, "polars.reduce"]], "repeat() (in module polars)": [[557, "polars.repeat"]], "select() (in module polars)": [[558, "polars.select"]], "spearman_rank_corr() (in module polars)": [[559, "polars.spearman_rank_corr"]], "std() (in module polars)": [[560, "polars.std"]], "struct() (in module polars)": [[561, "polars.struct"]], "sum() (in module polars)": [[562, "polars.sum"]], "tail() (in module polars)": [[563, "polars.tail"]], "var() (in module polars)": [[564, "polars.var"]], "when() (in module polars)": [[565, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[586, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[587, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[588, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[589, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[590, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[591, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[592, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[593, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[594, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[595, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[596, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[597, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[598, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[599, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[600, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[601, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[602, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[603, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[604, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[605, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[606, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[607, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[608, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[609, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[610, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[611, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[612, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[613, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[614, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[615, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[616, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[617, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[618, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[619, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[620, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[621, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[622, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[623, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[624, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[625, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[626, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[627, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[628, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[629, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[630, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[631, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[632, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[633, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[634, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[635, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[636, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[637, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[638, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[639, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[640, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[641, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[642, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[643, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[644, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[645, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[646, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[647, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[648, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[649, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[650, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[651, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[652, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[653, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[654, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[655, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[656, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[657, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[658, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[659, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[660, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[661, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[662, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[663, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[664, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[672, "polars.Series.abs"]], "alias() (polars.series method)": [[673, "polars.Series.alias"]], "all() (polars.series method)": [[674, "polars.Series.all"]], "any() (polars.series method)": [[675, "polars.Series.any"]], "append() (polars.series method)": [[676, "polars.Series.append"]], "apply() (polars.series method)": [[677, "polars.Series.apply"]], "arccos() (polars.series method)": [[678, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[679, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[680, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[681, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[682, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[683, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[684, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[685, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[686, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[687, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[688, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[689, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[690, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[691, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[692, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[693, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[694, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[695, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[696, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[697, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[698, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[699, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[700, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[701, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[702, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[703, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[704, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[705, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[706, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[707, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[708, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[709, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[710, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[711, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[712, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[713, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[714, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[715, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[716, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[717, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[718, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[719, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[720, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[721, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[722, "polars.Series.cast"]], "cat (polars.series attribute)": [[723, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[724, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[725, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[726, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[727, "polars.Series.clear"]], "clip() (polars.series method)": [[728, "polars.Series.clip"]], "clip_max() (polars.series method)": [[729, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[730, "polars.Series.clip_min"]], "clone() (polars.series method)": [[731, "polars.Series.clone"]], "cos() (polars.series method)": [[732, "polars.Series.cos"]], "cosh() (polars.series method)": [[733, "polars.Series.cosh"]], "cummax() (polars.series method)": [[734, "polars.Series.cummax"]], "cummin() (polars.series method)": [[735, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[736, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[737, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[738, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[739, "polars.Series.cut"]], "describe() (polars.series method)": [[740, "polars.Series.describe"]], "diff() (polars.series method)": [[741, "polars.Series.diff"]], "dot() (polars.series method)": [[742, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[743, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[744, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[745, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[746, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[747, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[748, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[749, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[750, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[751, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[752, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[753, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[754, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[755, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[756, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[757, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[758, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[759, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[760, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[761, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[762, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[763, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[764, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[765, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[766, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[767, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[768, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[769, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[770, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[771, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[772, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[773, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[774, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[775, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[776, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[777, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[778, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[779, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[780, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[781, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[782, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[783, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[784, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[785, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[786, "polars.Series.dtype"]], "entropy() (polars.series method)": [[787, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[788, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[789, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[790, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[791, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[792, "polars.Series.exp"]], "explode() (polars.series method)": [[793, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[794, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[795, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[796, "polars.Series.fill_null"]], "filter() (polars.series method)": [[797, "polars.Series.filter"]], "flags (polars.series attribute)": [[798, "polars.Series.flags"]], "floor() (polars.series method)": [[799, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[800, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[801, "polars.Series.has_validity"]], "hash() (polars.series method)": [[802, "polars.Series.hash"]], "head() (polars.series method)": [[803, "polars.Series.head"]], "hist() (polars.series method)": [[804, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[805, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[806, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[807, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[808, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[809, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[810, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[811, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[812, "polars.Series.is_first"]], "is_float() (polars.series method)": [[813, "polars.Series.is_float"]], "is_in() (polars.series method)": [[814, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[815, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[816, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[817, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[818, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[819, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[820, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[821, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[822, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[823, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[824, "polars.Series.is_utf8"]], "item() (polars.series method)": [[825, "polars.Series.item"]], "kurtosis() (polars.series method)": [[826, "polars.Series.kurtosis"]], "len() (polars.series method)": [[827, "polars.Series.len"]], "limit() (polars.series method)": [[828, "polars.Series.limit"]], "log() (polars.series method)": [[829, "polars.Series.log"]], "log10() (polars.series method)": [[830, "polars.Series.log10"]], "log1p() (polars.series method)": [[831, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[832, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[833, "polars.Series.map_dict"]], "max() (polars.series method)": [[834, "polars.Series.max"]], "mean() (polars.series method)": [[835, "polars.Series.mean"]], "median() (polars.series method)": [[836, "polars.Series.median"]], "min() (polars.series method)": [[837, "polars.Series.min"]], "mode() (polars.series method)": [[838, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[839, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[840, "polars.Series.n_unique"]], "name (polars.series attribute)": [[841, "polars.Series.name"]], "nan_max() (polars.series method)": [[842, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[843, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[844, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[845, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[846, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[847, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[848, "polars.Series.peak_min"]], "product() (polars.series method)": [[849, "polars.Series.product"]], "qcut() (polars.series method)": [[850, "polars.Series.qcut"]], "quantile() (polars.series method)": [[851, "polars.Series.quantile"]], "rank() (polars.series method)": [[852, "polars.Series.rank"]], "rechunk() (polars.series method)": [[853, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[854, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[855, "polars.Series.rename"]], "reshape() (polars.series method)": [[856, "polars.Series.reshape"]], "reverse() (polars.series method)": [[857, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[858, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[859, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[860, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[861, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[862, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[863, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[864, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[865, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[866, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[867, "polars.Series.rolling_var"]], "round() (polars.series method)": [[868, "polars.Series.round"]], "sample() (polars.series method)": [[869, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[870, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[871, "polars.Series.series_equal"]], "set() (polars.series method)": [[872, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[873, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[874, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[875, "polars.Series.shape"]], "shift() (polars.series method)": [[876, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[877, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[878, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[879, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[880, "polars.Series.shuffle"]], "sign() (polars.series method)": [[881, "polars.Series.sign"]], "sin() (polars.series method)": [[882, "polars.Series.sin"]], "sinh() (polars.series method)": [[883, "polars.Series.sinh"]], "skew() (polars.series method)": [[884, "polars.Series.skew"]], "slice() (polars.series method)": [[885, "polars.Series.slice"]], "sort() (polars.series method)": [[886, "polars.Series.sort"]], "sqrt() (polars.series method)": [[887, "polars.Series.sqrt"]], "std() (polars.series method)": [[888, "polars.Series.std"]], "str (polars.series attribute)": [[889, "polars.Series.str"]], "concat() (polars.series.str method)": [[890, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[891, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[892, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[893, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[894, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[895, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[896, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[897, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[898, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[899, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[900, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[901, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[902, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[903, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[904, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[905, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[906, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[907, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[908, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[909, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[910, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[911, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[912, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[913, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[914, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[915, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[916, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[917, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[918, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[919, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[920, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[921, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[922, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[923, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[924, "polars.Series.sum"]], "tail() (polars.series method)": [[925, "polars.Series.tail"]], "take() (polars.series method)": [[926, "polars.Series.take"]], "take_every() (polars.series method)": [[927, "polars.Series.take_every"]], "tan() (polars.series method)": [[928, "polars.Series.tan"]], "tanh() (polars.series method)": [[929, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[930, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[931, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[932, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[933, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[934, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[935, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[936, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[937, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[938, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[939, "polars.Series.top_k"]], "unique() (polars.series method)": [[940, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[941, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[942, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[943, "polars.Series.value_counts"]], "var() (polars.series method)": [[944, "polars.Series.var"]], "view() (polars.series method)": [[945, "polars.Series.view"]], "zip_with() (polars.series method)": [[946, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[961, "polars.SQLContext"]]}})